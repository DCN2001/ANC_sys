
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080071b0  080071b0  000081b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e8  080073e8  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  080073e8  080073e8  000083e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f0  080073f0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f0  080073f0  000083f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080073f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000068  08007460  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08007460  00009494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfe6  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ed  00000000  00000000  0001507e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00017170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bf  00000000  00000000  00017a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d9b  00000000  00000000  0001813f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c666  00000000  00000000  00039eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc056  00000000  00000000  00046540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  00112596  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  00112654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00115384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d95  00000000  00000000  001153c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00116156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007198 	.word	0x08007198

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08007198 	.word	0x08007198

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <check_s1_pressed>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool check_s1_pressed()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000f52:	f000 ff9d 	bl	8001e90 <HAL_GetTick>
 8000f56:	6038      	str	r0, [r7, #0]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2140      	movs	r1, #64	@ 0x40
 8000f5c:	4810      	ldr	r0, [pc, #64]	@ (8000fa0 <check_s1_pressed+0x54>)
 8000f5e:	f001 fdf5 	bl	8002b4c <HAL_GPIO_WritePin>

    bool pressed = false;
 8000f62:	2300      	movs	r3, #0
 8000f64:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 8000f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <check_s1_pressed+0x58>)
 8000f6c:	f001 fdd6 	bl	8002b1c <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d10a      	bne.n	8000f8c <check_s1_pressed+0x40>
    {
        if (current_time - last_press_time > 200)
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <check_s1_pressed+0x5c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f80:	d904      	bls.n	8000f8c <check_s1_pressed+0x40>
        {
            pressed = true;
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
            last_press_time = current_time;
 8000f86:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <check_s1_pressed+0x5c>)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6013      	str	r3, [r2, #0]
        }
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2140      	movs	r1, #64	@ 0x40
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <check_s1_pressed+0x54>)
 8000f92:	f001 fddb 	bl	8002b4c <HAL_GPIO_WritePin>

    return pressed;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	2000033c 	.word	0x2000033c

08000fac <check_specific_button_pressed>:

bool check_specific_button_pressed(int button_id)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    int row, col;

    // Map button_id to row and column
    map_button_to_row_col(button_id, &row, &col);
 8000fb4:	f107 020c 	add.w	r2, r7, #12
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f830 	bl	8001024 <map_button_to_row_col>

    // Activate the specific row (R1~R4 -> PC6~PC9)
    HAL_GPIO_WritePin(GPIOC, 1 << (row + 6), GPIO_PIN_SET); // Set the corresponding row high
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	3306      	adds	r3, #6
 8000fc8:	2201      	movs	r2, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4811      	ldr	r0, [pc, #68]	@ (800101c <check_specific_button_pressed+0x70>)
 8000fd6:	f001 fdb9 	bl	8002b4c <HAL_GPIO_WritePin>

    // Check if the corresponding column (C1~C4 -> PA8~PA11) is high
    bool pressed = HAL_GPIO_ReadPin(GPIOA, 1 << (col + 8)) == GPIO_PIN_SET;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3308      	adds	r3, #8
 8000fde:	2201      	movs	r2, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <check_specific_button_pressed+0x74>)
 8000fea:	f001 fd97 	bl	8002b1c <HAL_GPIO_ReadPin>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	bf0c      	ite	eq
 8000ff4:	2301      	moveq	r3, #1
 8000ff6:	2300      	movne	r3, #0
 8000ff8:	75fb      	strb	r3, [r7, #23]

    // Reset the row to low
    HAL_GPIO_WritePin(GPIOC, 1 << (row + 6), GPIO_PIN_RESET);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	3306      	adds	r3, #6
 8000ffe:	2201      	movs	r2, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	b29b      	uxth	r3, r3
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <check_specific_button_pressed+0x70>)
 800100c:	f001 fd9e 	bl	8002b4c <HAL_GPIO_WritePin>

    return pressed;
 8001010:	7dfb      	ldrb	r3, [r7, #23]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020800 	.word	0x40020800
 8001020:	40020000 	.word	0x40020000

08001024 <map_button_to_row_col>:

// Function to map a button ID to row and column
void map_button_to_row_col(int button_id, int *row, int *col)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
    *row = (button_id - 1) / 4; // Calculate row (0 to 3)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3b01      	subs	r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	da00      	bge.n	800103a <map_button_to_row_col+0x16>
 8001038:	3303      	adds	r3, #3
 800103a:	109b      	asrs	r3, r3, #2
 800103c:	461a      	mov	r2, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	601a      	str	r2, [r3, #0]
    *col = (button_id - 1) % 4; // Calculate column (0 to 3)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3b01      	subs	r3, #1
 8001046:	425a      	negs	r2, r3
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	f002 0203 	and.w	r2, r2, #3
 8001050:	bf58      	it	pl
 8001052:	4253      	negpl	r3, r2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	0000      	movs	r0, r0
	...

08001068 <lowpass_fir>:
        }
    }
}

void lowpass_fir(float32_t* coeffs, int num_taps, float cutoff)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	ed87 0a01 	vstr	s0, [r7, #4]
    int M = num_taps - 1;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3b01      	subs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
    for (int n = 0; n < num_taps; n++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e09f      	b.n	80011c2 <lowpass_fir+0x15a>
    {
        if (n == M / 2)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	0fda      	lsrs	r2, r3, #31
 8001086:	4413      	add	r3, r2
 8001088:	105b      	asrs	r3, r3, #1
 800108a:	461a      	mov	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	4293      	cmp	r3, r2
 8001090:	d10a      	bne.n	80010a8 <lowpass_fir+0x40>
        {
            coeffs[n] = 2 * cutoff;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010a2:	edc3 7a00 	vstr	s15, [r3]
 80010a6:	e089      	b.n	80011bc <lowpass_fir+0x154>
        }
        else
        {
            coeffs[n] = sin(2 * PI * cutoff * (n - M / 2)) / (PI * (n - M / 2));
 80010a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ac:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80011e8 <lowpass_fir+0x180>
 80010b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	0fda      	lsrs	r2, r3, #31
 80010b8:	4413      	add	r3, r2
 80010ba:	105b      	asrs	r3, r3, #1
 80010bc:	425b      	negs	r3, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	4413      	add	r3, r2
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff fa58 	bl	8000588 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	ec43 2b10 	vmov	d0, r2, r3
 80010e0:	f005 f82a 	bl	8006138 <sin>
 80010e4:	ec55 4b10 	vmov	r4, r5, d0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	0fda      	lsrs	r2, r3, #31
 80010ec:	4413      	add	r3, r2
 80010ee:	105b      	asrs	r3, r3, #1
 80010f0:	425b      	negs	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	4413      	add	r3, r2
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80011ec <lowpass_fir+0x184>
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	ee17 0a90 	vmov	r0, s15
 800110c:	f7ff fa3c 	bl	8000588 <__aeabi_f2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff fbb8 	bl	800088c <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	18d4      	adds	r4, r2, r3
 800112c:	f7ff fd46 	bl	8000bbc <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	6023      	str	r3, [r4, #0]
            coeffs[n] *= (0.54 - 0.46 * cos(2 * PI * n / M));  // 使用 Hamming  ?
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa22 	bl	8000588 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001152:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80011e8 <lowpass_fir+0x180>
 8001156:	ee27 7a87 	vmul.f32	s14, s15, s14
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001168:	ee16 0a90 	vmov	r0, s13
 800116c:	f7ff fa0c 	bl	8000588 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	ec43 2b10 	vmov	d0, r2, r3
 8001178:	f004 ff8a 	bl	8006090 <cos>
 800117c:	ec51 0b10 	vmov	r0, r1, d0
 8001180:	a315      	add	r3, pc, #84	@ (adr r3, 80011d8 <lowpass_fir+0x170>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fa57 	bl	8000638 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	a114      	add	r1, pc, #80	@ (adr r1, 80011e0 <lowpass_fir+0x178>)
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	f7ff f898 	bl	80002c8 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4620      	mov	r0, r4
 800119e:	4629      	mov	r1, r5
 80011a0:	f7ff fa4a 	bl	8000638 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	18d4      	adds	r4, r2, r3
 80011b4:	f7ff fd02 	bl	8000bbc <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	6023      	str	r3, [r4, #0]
    for (int n = 0; n < num_taps; n++)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	f6ff af5b 	blt.w	8001082 <lowpass_fir+0x1a>
        }
    }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bdb0      	pop	{r4, r5, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	d70a3d71 	.word	0xd70a3d71
 80011dc:	3fdd70a3 	.word	0x3fdd70a3
 80011e0:	147ae148 	.word	0x147ae148
 80011e4:	3fe147ae 	.word	0x3fe147ae
 80011e8:	40c90fdb 	.word	0x40c90fdb
 80011ec:	40490fdb 	.word	0x40490fdb

080011f0 <init_filter>:

void init_filter()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af02      	add	r7, sp, #8
	LOW_CUTOFF = low_cutoff / 16000.0f;
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <init_filter+0x58>)
 80011f8:	ed93 7a00 	vldr	s14, [r3]
 80011fc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800124c <init_filter+0x5c>
 8001200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <init_filter+0x60>)
 8001206:	edc3 7a00 	vstr	s15, [r3]
	HIGH_CUTOFF = high_cutoff / 16000.0f;							//If using lowpass filter
 800120a:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <init_filter+0x64>)
 800120c:	ed93 7a00 	vldr	s14, [r3]
 8001210:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800124c <init_filter+0x5c>
 8001214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <init_filter+0x68>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
    //bandpass_fir(firCoeffs, NUM_TAPS, LOW_CUTOFF, HIGH_CUTOFF);   //If using bandpass filter
	lowpass_fir(firCoeffs, NUM_TAPS, HIGH_CUTOFF);
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <init_filter+0x68>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	2110      	movs	r1, #16
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <init_filter+0x6c>)
 800122c:	f7ff ff1c 	bl	8001068 <lowpass_fir>
	arm_fir_init_f32(&S, NUM_TAPS, firCoeffs, firState, BLOCK_SIZE);
 8001230:	2301      	movs	r3, #1
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <init_filter+0x70>)
 8001236:	4a09      	ldr	r2, [pc, #36]	@ (800125c <init_filter+0x6c>)
 8001238:	2110      	movs	r1, #16
 800123a:	480a      	ldr	r0, [pc, #40]	@ (8001264 <init_filter+0x74>)
 800123c:	f003 fff0 	bl	8005220 <arm_fir_init_f32>
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000084 	.word	0x20000084
 800124c:	467a0000 	.word	0x467a0000
 8001250:	20000088 	.word	0x20000088
 8001254:	20000000 	.word	0x20000000
 8001258:	2000008c 	.word	0x2000008c
 800125c:	20000238 	.word	0x20000238
 8001260:	20000278 	.word	0x20000278
 8001264:	2000022c 	.word	0x2000022c

08001268 <HAL_I2S_RxCpltCallback>:

char buffer[16];
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    //Check whether press blue button
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) // If pressed
 8001270:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001274:	487e      	ldr	r0, [pc, #504]	@ (8001470 <HAL_I2S_RxCpltCallback+0x208>)
 8001276:	f001 fc51 	bl	8002b1c <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d127      	bne.n	80012d0 <HAL_I2S_RxCpltCallback+0x68>
    {
    	if (!mode_button_pressed) // If mode_button_pressed = false
 8001280:	4b7c      	ldr	r3, [pc, #496]	@ (8001474 <HAL_I2S_RxCpltCallback+0x20c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d023      	beq.n	80012d6 <HAL_I2S_RxCpltCallback+0x6e>
    	        {
					active_mode_select = !active_mode_select; // Mode change
 800128e:	4b7a      	ldr	r3, [pc, #488]	@ (8001478 <HAL_I2S_RxCpltCallback+0x210>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	bf14      	ite	ne
 8001296:	2301      	movne	r3, #1
 8001298:	2300      	moveq	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f083 0301 	eor.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b73      	ldr	r3, [pc, #460]	@ (8001478 <HAL_I2S_RxCpltCallback+0x210>)
 80012aa:	701a      	strb	r2, [r3, #0]
					if (active_mode_select){
 80012ac:	4b72      	ldr	r3, [pc, #456]	@ (8001478 <HAL_I2S_RxCpltCallback+0x210>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_I2S_RxCpltCallback+0x56>
						high_cutoff = phase_change;
 80012b4:	4b71      	ldr	r3, [pc, #452]	@ (800147c <HAL_I2S_RxCpltCallback+0x214>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a71      	ldr	r2, [pc, #452]	@ (8001480 <HAL_I2S_RxCpltCallback+0x218>)
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e002      	b.n	80012c4 <HAL_I2S_RxCpltCallback+0x5c>
					}else{
						high_cutoff = 10000.0f;
 80012be:	4b70      	ldr	r3, [pc, #448]	@ (8001480 <HAL_I2S_RxCpltCallback+0x218>)
 80012c0:	4a70      	ldr	r2, [pc, #448]	@ (8001484 <HAL_I2S_RxCpltCallback+0x21c>)
 80012c2:	601a      	str	r2, [r3, #0]
					}
					init_filter();
 80012c4:	f7ff ff94 	bl	80011f0 <init_filter>
					mode_button_pressed = true;      // Button pressed
 80012c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001474 <HAL_I2S_RxCpltCallback+0x20c>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e002      	b.n	80012d6 <HAL_I2S_RxCpltCallback+0x6e>
    	        }
    }else{
    	mode_button_pressed= false;
 80012d0:	4b68      	ldr	r3, [pc, #416]	@ (8001474 <HAL_I2S_RxCpltCallback+0x20c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
    }

    //Check S1 button
    if (check_s1_pressed()){
 80012d6:	f7ff fe39 	bl	8000f4c <check_s1_pressed>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d019      	beq.n	8001314 <HAL_I2S_RxCpltCallback+0xac>
		if (!setting_button_pressed) // Debouncing
 80012e0:	4b69      	ldr	r3, [pc, #420]	@ (8001488 <HAL_I2S_RxCpltCallback+0x220>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f083 0301 	eor.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <HAL_I2S_RxCpltCallback+0xb2>
		{
			setting_mode_select = !setting_mode_select; // Switch Setting Mode
 80012ee:	4b67      	ldr	r3, [pc, #412]	@ (800148c <HAL_I2S_RxCpltCallback+0x224>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bf14      	ite	ne
 80012f6:	2301      	movne	r3, #1
 80012f8:	2300      	moveq	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f083 0301 	eor.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b60      	ldr	r3, [pc, #384]	@ (800148c <HAL_I2S_RxCpltCallback+0x224>)
 800130a:	701a      	strb	r2, [r3, #0]
			setting_button_pressed = true;
 800130c:	4b5e      	ldr	r3, [pc, #376]	@ (8001488 <HAL_I2S_RxCpltCallback+0x220>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e002      	b.n	800131a <HAL_I2S_RxCpltCallback+0xb2>
		}
	}else{
		setting_button_pressed = false;
 8001314:	4b5c      	ldr	r3, [pc, #368]	@ (8001488 <HAL_I2S_RxCpltCallback+0x220>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
	}

    //Set mode or work mode(monitor or active)
    if (setting_mode_select==false){
 800131a:	4b5c      	ldr	r3, [pc, #368]	@ (800148c <HAL_I2S_RxCpltCallback+0x224>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d02d      	beq.n	8001384 <HAL_I2S_RxCpltCallback+0x11c>
    	//Apply DSP Filter
    	filter_input = (float32_t)toReceive; // Transfer to float type
 8001328:	4b59      	ldr	r3, [pc, #356]	@ (8001490 <HAL_I2S_RxCpltCallback+0x228>)
 800132a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001336:	4b57      	ldr	r3, [pc, #348]	@ (8001494 <HAL_I2S_RxCpltCallback+0x22c>)
 8001338:	edc3 7a00 	vstr	s15, [r3]
    	arm_fir_f32(&S, &filter_input, &filter_output, BLOCK_SIZE);
 800133c:	2301      	movs	r3, #1
 800133e:	4a56      	ldr	r2, [pc, #344]	@ (8001498 <HAL_I2S_RxCpltCallback+0x230>)
 8001340:	4954      	ldr	r1, [pc, #336]	@ (8001494 <HAL_I2S_RxCpltCallback+0x22c>)
 8001342:	4856      	ldr	r0, [pc, #344]	@ (800149c <HAL_I2S_RxCpltCallback+0x234>)
 8001344:	f003 ff7a 	bl	800523c <arm_fir_f32>
		//filter_output = toReceive;    // IF no filter apply

    	// Mode select
		if (active_mode_select)
 8001348:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <HAL_I2S_RxCpltCallback+0x210>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8086 	beq.w	800145e <HAL_I2S_RxCpltCallback+0x1f6>
		{
			//toWrite = toReceive * (-1);
			toWrite = (int16_t)(filter_output)* -(VOLUME);    //after bandpass filter
 8001352:	4b51      	ldr	r3, [pc, #324]	@ (8001498 <HAL_I2S_RxCpltCallback+0x230>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135c:	ee17 3a90 	vmov	r3, s15
 8001360:	b21b      	sxth	r3, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b4e      	ldr	r3, [pc, #312]	@ (80014a0 <HAL_I2S_RxCpltCallback+0x238>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	425b      	negs	r3, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	fb12 f303 	smulbb	r3, r2, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b4b      	ldr	r3, [pc, #300]	@ (80014a4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001376:	801a      	strh	r2, [r3, #0]
			HAL_I2S_Transmit_DMA(&hi2s2, &toWrite, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	494a      	ldr	r1, [pc, #296]	@ (80014a4 <HAL_I2S_RxCpltCallback+0x23c>)
 800137c:	484a      	ldr	r0, [pc, #296]	@ (80014a8 <HAL_I2S_RxCpltCallback+0x240>)
 800137e:	f001 fcf7 	bl	8002d70 <HAL_I2S_Transmit_DMA>
 8001382:	e06c      	b.n	800145e <HAL_I2S_RxCpltCallback+0x1f6>
		}
    }else{
    	filter_output = 0;
 8001384:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <HAL_I2S_RxCpltCallback+0x230>)
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
    	// Adjust parameter
		static uint32_t last_adjust_time = 0;
		uint32_t current_time = HAL_GetTick();
 800138c:	f000 fd80 	bl	8001e90 <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]
		if (current_time - last_adjust_time > 200){    //Adjust every 200 ms
 8001392:	4b46      	ldr	r3, [pc, #280]	@ (80014ac <HAL_I2S_RxCpltCallback+0x244>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2bc8      	cmp	r3, #200	@ 0xc8
 800139c:	d95f      	bls.n	800145e <HAL_I2S_RxCpltCallback+0x1f6>
			//Adjusting volume
			if (check_specific_button_pressed(9)){   //Increase volume
 800139e:	2009      	movs	r0, #9
 80013a0:	f7ff fe04 	bl	8000fac <check_specific_button_pressed>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_I2S_RxCpltCallback+0x14e>
				VOLUME++;}
 80013aa:	4b3d      	ldr	r3, [pc, #244]	@ (80014a0 <HAL_I2S_RxCpltCallback+0x238>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	4a3b      	ldr	r2, [pc, #236]	@ (80014a0 <HAL_I2S_RxCpltCallback+0x238>)
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e04e      	b.n	8001454 <HAL_I2S_RxCpltCallback+0x1ec>
			else if (check_specific_button_pressed(13)){  //Decrease volume
 80013b6:	200d      	movs	r0, #13
 80013b8:	f7ff fdf8 	bl	8000fac <check_specific_button_pressed>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_I2S_RxCpltCallback+0x166>
				VOLUME--;}
 80013c2:	4b37      	ldr	r3, [pc, #220]	@ (80014a0 <HAL_I2S_RxCpltCallback+0x238>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	4a35      	ldr	r2, [pc, #212]	@ (80014a0 <HAL_I2S_RxCpltCallback+0x238>)
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e042      	b.n	8001454 <HAL_I2S_RxCpltCallback+0x1ec>
			//Adjusting frequency band
			else if (check_specific_button_pressed(11)){  // Increase lower cutoff frequency
 80013ce:	200b      	movs	r0, #11
 80013d0:	f7ff fdec 	bl	8000fac <check_specific_button_pressed>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00a      	beq.n	80013f0 <HAL_I2S_RxCpltCallback+0x188>
				low_cutoff += 100.0f;}
 80013da:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_I2S_RxCpltCallback+0x248>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80014b4 <HAL_I2S_RxCpltCallback+0x24c>
 80013e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013e8:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <HAL_I2S_RxCpltCallback+0x248>)
 80013ea:	edc3 7a00 	vstr	s15, [r3]
 80013ee:	e031      	b.n	8001454 <HAL_I2S_RxCpltCallback+0x1ec>
			else if (check_specific_button_pressed(15)){  // Decrease lower cutoff frequency
 80013f0:	200f      	movs	r0, #15
 80013f2:	f7ff fddb 	bl	8000fac <check_specific_button_pressed>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <HAL_I2S_RxCpltCallback+0x1aa>
				low_cutoff -= 100.0f;}
 80013fc:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <HAL_I2S_RxCpltCallback+0x248>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80014b4 <HAL_I2S_RxCpltCallback+0x24c>
 8001406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800140a:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <HAL_I2S_RxCpltCallback+0x248>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
 8001410:	e020      	b.n	8001454 <HAL_I2S_RxCpltCallback+0x1ec>
			else if (check_specific_button_pressed(12)){  // Increase higher cutoff frequency
 8001412:	200c      	movs	r0, #12
 8001414:	f7ff fdca 	bl	8000fac <check_specific_button_pressed>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00a      	beq.n	8001434 <HAL_I2S_RxCpltCallback+0x1cc>
				high_cutoff += 100.0f;}
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <HAL_I2S_RxCpltCallback+0x218>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80014b4 <HAL_I2S_RxCpltCallback+0x24c>
 8001428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_I2S_RxCpltCallback+0x218>)
 800142e:	edc3 7a00 	vstr	s15, [r3]
 8001432:	e00f      	b.n	8001454 <HAL_I2S_RxCpltCallback+0x1ec>
			else if (check_specific_button_pressed(16)){  // Decrease higher cutoff frequency
 8001434:	2010      	movs	r0, #16
 8001436:	f7ff fdb9 	bl	8000fac <check_specific_button_pressed>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <HAL_I2S_RxCpltCallback+0x1ec>
				high_cutoff -= 100.0f;}
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_I2S_RxCpltCallback+0x218>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80014b4 <HAL_I2S_RxCpltCallback+0x24c>
 800144a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_I2S_RxCpltCallback+0x218>)
 8001450:	edc3 7a00 	vstr	s15, [r3]
			init_filter();
 8001454:	f7ff fecc 	bl	80011f0 <init_filter>
			last_adjust_time = current_time; // Update last adjustment time
 8001458:	4a14      	ldr	r2, [pc, #80]	@ (80014ac <HAL_I2S_RxCpltCallback+0x244>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6013      	str	r3, [r2, #0]
		}
    }
    HAL_I2S_Receive_DMA(hi2s, &toReceive, 1);
 800145e:	2201      	movs	r2, #1
 8001460:	490b      	ldr	r1, [pc, #44]	@ (8001490 <HAL_I2S_RxCpltCallback+0x228>)
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f001 fd28 	bl	8002eb8 <HAL_I2S_Receive_DMA>
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40020800 	.word	0x40020800
 8001474:	200002c2 	.word	0x200002c2
 8001478:	200002c0 	.word	0x200002c0
 800147c:	20000008 	.word	0x20000008
 8001480:	20000000 	.word	0x20000000
 8001484:	461c4000 	.word	0x461c4000
 8001488:	200002c3 	.word	0x200002c3
 800148c:	200002c1 	.word	0x200002c1
 8001490:	20000228 	.word	0x20000228
 8001494:	200002b8 	.word	0x200002b8
 8001498:	200002bc 	.word	0x200002bc
 800149c:	2000022c 	.word	0x2000022c
 80014a0:	20000004 	.word	0x20000004
 80014a4:	2000022a 	.word	0x2000022a
 80014a8:	20000090 	.word	0x20000090
 80014ac:	20000340 	.word	0x20000340
 80014b0:	20000084 	.word	0x20000084
 80014b4:	42c80000 	.word	0x42c80000

080014b8 <main>:

char str[120];
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  HAL_Init();
 80014bc:	f000 fc82 	bl	8001dc4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f840 	bl	8001544 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014c4:	f000 f8ac 	bl	8001620 <PeriphCommonClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 f97e 	bl	80017c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014cc:	f000 f954 	bl	8001778 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014d0:	f000 f928 	bl	8001724 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 80014d4:	f000 f8ca 	bl	800166c <MX_I2S2_Init>
  MX_I2S3_Init();
 80014d8:	f000 f8f6 	bl	80016c8 <MX_I2S3_Init>
  init_filter();
 80014dc:	f7ff fe88 	bl	80011f0 <init_filter>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s3, &toReceive, 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	4911      	ldr	r1, [pc, #68]	@ (8001528 <main+0x70>)
 80014e4:	4811      	ldr	r0, [pc, #68]	@ (800152c <main+0x74>)
 80014e6:	f001 fce7 	bl	8002eb8 <HAL_I2S_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //The code below can plot the signal in serial port plotter
	  sprintf(str, "$%d %d;", toWrite, (int16_t)filter_output);    //The signal transmitted to the speaker and the signal pass through the filter
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <main+0x78>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <main+0x7c>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fc:	ee17 3a90 	vmov	r3, s15
 8001500:	b21b      	sxth	r3, r3
 8001502:	490d      	ldr	r1, [pc, #52]	@ (8001538 <main+0x80>)
 8001504:	480d      	ldr	r0, [pc, #52]	@ (800153c <main+0x84>)
 8001506:	f004 f921 	bl	800574c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 10);
 800150a:	480c      	ldr	r0, [pc, #48]	@ (800153c <main+0x84>)
 800150c:	f7fe fe80 	bl	8000210 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	230a      	movs	r3, #10
 8001516:	4909      	ldr	r1, [pc, #36]	@ (800153c <main+0x84>)
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <main+0x88>)
 800151a:	f003 fac5 	bl	8004aa8 <HAL_UART_Transmit>
	  HAL_Delay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f000 fcc2 	bl	8001ea8 <HAL_Delay>
	  sprintf(str, "$%d %d;", toWrite, (int16_t)filter_output);    //The signal transmitted to the speaker and the signal pass through the filter
 8001524:	bf00      	nop
 8001526:	e7e0      	b.n	80014ea <main+0x32>
 8001528:	20000228 	.word	0x20000228
 800152c:	200000d8 	.word	0x200000d8
 8001530:	2000022a 	.word	0x2000022a
 8001534:	200002bc 	.word	0x200002bc
 8001538:	080071b0 	.word	0x080071b0
 800153c:	200002c4 	.word	0x200002c4
 8001540:	200001e0 	.word	0x200001e0

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	@ 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	2234      	movs	r2, #52	@ 0x34
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f004 f91a 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <SystemClock_Config+0xd4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	4a29      	ldr	r2, [pc, #164]	@ (8001618 <SystemClock_Config+0xd4>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	@ 0x40
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <SystemClock_Config+0xd4>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	4b24      	ldr	r3, [pc, #144]	@ (800161c <SystemClock_Config+0xd8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001590:	4a22      	ldr	r2, [pc, #136]	@ (800161c <SystemClock_Config+0xd8>)
 8001592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <SystemClock_Config+0xd8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a8:	2301      	movs	r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ac:	2310      	movs	r3, #16
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b0:	2302      	movs	r3, #2
 80015b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015b8:	2310      	movs	r3, #16
 80015ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015c2:	2304      	movs	r3, #4
 80015c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 ff7a 	bl	80044cc <HAL_RCC_OscConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015de:	f000 f983 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e2:	230f      	movs	r3, #15
 80015e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e6:	2302      	movs	r3, #2
 80015e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	2102      	movs	r1, #2
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 fea6 	bl	8003350 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800160a:	f000 f96d 	bl	80018e8 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3750      	adds	r7, #80	@ 0x50
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b098      	sub	sp, #96	@ 0x60
 8001624:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	225c      	movs	r2, #92	@ 0x5c
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f004 f8ad 	bl	800578c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8001632:	2301      	movs	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001636:	23c0      	movs	r3, #192	@ 0xc0
 8001638:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800163e:	2310      	movs	r3, #16
 8001640:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001646:	2302      	movs	r3, #2
 8001648:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800164a:	2301      	movs	r3, #1
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800164e:	2300      	movs	r3, #0
 8001650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4618      	mov	r0, r3
 8001656:	f001 ff95 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <PeriphCommonClock_Config+0x44>
  {
    Error_Handler();
 8001660:	f000 f942 	bl	80018e8 <Error_Handler>
  }
}
 8001664:	bf00      	nop
 8001666:	3760      	adds	r7, #96	@ 0x60
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <MX_I2S2_Init+0x54>)
 8001672:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <MX_I2S2_Init+0x58>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_I2S2_Init+0x54>)
 8001678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800167c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <MX_I2S2_Init+0x54>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_I2S2_Init+0x54>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <MX_I2S2_Init+0x54>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_I2S2_Init+0x54>)
 8001692:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001696:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_I2S2_Init+0x54>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <MX_I2S2_Init+0x54>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_I2S2_Init+0x54>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_I2S2_Init+0x54>)
 80016ac:	f001 fa68 	bl	8002b80 <HAL_I2S_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80016b6:	f000 f917 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000090 	.word	0x20000090
 80016c4:	40003800 	.word	0x40003800

080016c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_I2S3_Init+0x54>)
 80016ce:	4a14      	ldr	r2, [pc, #80]	@ (8001720 <MX_I2S3_Init+0x58>)
 80016d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_I2S3_Init+0x54>)
 80016d4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80016d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <MX_I2S3_Init+0x54>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <MX_I2S3_Init+0x54>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <MX_I2S3_Init+0x54>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_I2S3_Init+0x54>)
 80016ee:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80016f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_I2S3_Init+0x54>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <MX_I2S3_Init+0x54>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_I2S3_Init+0x54>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_I2S3_Init+0x54>)
 8001708:	f001 fa3a 	bl	8002b80 <HAL_I2S_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001712:	f000 f8e9 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200000d8 	.word	0x200000d8
 8001720:	40003c00 	.word	0x40003c00

08001724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <MX_USART2_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;//115200;
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <MX_USART2_UART_Init+0x4c>)
 800175c:	f003 f954 	bl	8004a08 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 f8bf 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200001e0 	.word	0x200001e0
 8001774:	40004400 	.word	0x40004400

08001778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MX_DMA_Init+0x4c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <MX_DMA_Init+0x4c>)
 8001788:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <MX_DMA_Init+0x4c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200b      	movs	r0, #11
 80017a0:	f000 fc81 	bl	80020a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017a4:	200b      	movs	r0, #11
 80017a6:	f000 fc9a 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 fc79 	bl	80020a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017b4:	200f      	movs	r0, #15
 80017b6:	f000 fc92 	bl	80020de <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b3e      	ldr	r3, [pc, #248]	@ (80018dc <MX_GPIO_Init+0x114>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a3d      	ldr	r2, [pc, #244]	@ (80018dc <MX_GPIO_Init+0x114>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <MX_GPIO_Init+0x114>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <MX_GPIO_Init+0x114>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a36      	ldr	r2, [pc, #216]	@ (80018dc <MX_GPIO_Init+0x114>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <MX_GPIO_Init+0x114>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <MX_GPIO_Init+0x114>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <MX_GPIO_Init+0x114>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <MX_GPIO_Init+0x114>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b29      	ldr	r3, [pc, #164]	@ (80018dc <MX_GPIO_Init+0x114>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a28      	ldr	r2, [pc, #160]	@ (80018dc <MX_GPIO_Init+0x114>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <MX_GPIO_Init+0x114>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2120      	movs	r1, #32
 8001852:	4823      	ldr	r0, [pc, #140]	@ (80018e0 <MX_GPIO_Init+0x118>)
 8001854:	f001 f97a 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800185e:	4821      	ldr	r0, [pc, #132]	@ (80018e4 <MX_GPIO_Init+0x11c>)
 8001860:	f001 f974 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800186a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	481a      	ldr	r0, [pc, #104]	@ (80018e4 <MX_GPIO_Init+0x11c>)
 800187c:	f000 ffba 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001880:	2320      	movs	r3, #32
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4812      	ldr	r0, [pc, #72]	@ (80018e0 <MX_GPIO_Init+0x118>)
 8001898:	f000 ffac 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800189c:	f44f 7358 	mov.w	r3, #864	@ 0x360
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480b      	ldr	r0, [pc, #44]	@ (80018e4 <MX_GPIO_Init+0x11c>)
 80018b6:	f000 ff9d 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80018ba:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <MX_GPIO_Init+0x118>)
 80018d0:	f000 ff90 	bl	80027f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	@ 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020800 	.word	0x40020800

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <Error_Handler+0x8>

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <HAL_MspInit+0x4c>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <HAL_MspInit+0x4c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001932:	2007      	movs	r0, #7
 8001934:	f000 fbac 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	@ 0x38
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a8f      	ldr	r2, [pc, #572]	@ (8001ba0 <HAL_I2S_MspInit+0x25c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d17a      	bne.n	8001a5c <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
 800196a:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	4a8d      	ldr	r2, [pc, #564]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001974:	6413      	str	r3, [r2, #64]	@ 0x40
 8001976:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197e:	623b      	str	r3, [r7, #32]
 8001980:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	4b87      	ldr	r3, [pc, #540]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a86      	ldr	r2, [pc, #536]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b84      	ldr	r3, [pc, #528]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	4b80      	ldr	r3, [pc, #512]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a7f      	ldr	r2, [pc, #508]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b7d      	ldr	r3, [pc, #500]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019ba:	2302      	movs	r3, #2
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80019ca:	2307      	movs	r3, #7
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	4874      	ldr	r0, [pc, #464]	@ (8001ba8 <HAL_I2S_MspInit+0x264>)
 80019d6:	f000 ff0d 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80019da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ec:	2305      	movs	r3, #5
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	486d      	ldr	r0, [pc, #436]	@ (8001bac <HAL_I2S_MspInit+0x268>)
 80019f8:	f000 fefc 	bl	80027f4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80019fc:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 80019fe:	4a6d      	ldr	r2, [pc, #436]	@ (8001bb4 <HAL_I2S_MspInit+0x270>)
 8001a00:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001a02:	4b6b      	ldr	r3, [pc, #428]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a08:	4b69      	ldr	r3, [pc, #420]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a0a:	2240      	movs	r2, #64	@ 0x40
 8001a0c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0e:	4b68      	ldr	r3, [pc, #416]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a14:	4b66      	ldr	r3, [pc, #408]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a1a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a1c:	4b64      	ldr	r3, [pc, #400]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a22:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a24:	4b62      	ldr	r3, [pc, #392]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a2a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001a2c:	4b60      	ldr	r3, [pc, #384]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a32:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a38:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a3e:	485c      	ldr	r0, [pc, #368]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a40:	f000 fb68 	bl	8002114 <HAL_DMA_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2S_MspInit+0x10a>
    {
      Error_Handler();
 8001a4a:	f7ff ff4d 	bl	80018e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a52:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a54:	4a56      	ldr	r2, [pc, #344]	@ (8001bb0 <HAL_I2S_MspInit+0x26c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a5a:	e09d      	b.n	8001b98 <HAL_I2S_MspInit+0x254>
  else if(hi2s->Instance==SPI3)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a55      	ldr	r2, [pc, #340]	@ (8001bb8 <HAL_I2S_MspInit+0x274>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	f040 8098 	bne.w	8001b98 <HAL_I2S_MspInit+0x254>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a78:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	4b46      	ldr	r3, [pc, #280]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	4a45      	ldr	r2, [pc, #276]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a94:	4b43      	ldr	r3, [pc, #268]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	4b38      	ldr	r3, [pc, #224]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	4a37      	ldr	r2, [pc, #220]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001acc:	4b35      	ldr	r3, [pc, #212]	@ (8001ba4 <HAL_I2S_MspInit+0x260>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad8:	2310      	movs	r3, #16
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ae8:	2306      	movs	r3, #6
 8001aea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af0:	4619      	mov	r1, r3
 8001af2:	4832      	ldr	r0, [pc, #200]	@ (8001bbc <HAL_I2S_MspInit+0x278>)
 8001af4:	f000 fe7e 	bl	80027f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001b08:	2307      	movs	r3, #7
 8001b0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4826      	ldr	r0, [pc, #152]	@ (8001bac <HAL_I2S_MspInit+0x268>)
 8001b14:	f000 fe6e 	bl	80027f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b32:	4619      	mov	r1, r3
 8001b34:	481c      	ldr	r0, [pc, #112]	@ (8001ba8 <HAL_I2S_MspInit+0x264>)
 8001b36:	f000 fe5d 	bl	80027f4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b3c:	4a21      	ldr	r2, [pc, #132]	@ (8001bc4 <HAL_I2S_MspInit+0x280>)
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b58:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b60:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b68:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b76:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001b7c:	4810      	ldr	r0, [pc, #64]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b7e:	f000 fac9 	bl	8002114 <HAL_DMA_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_I2S_MspInit+0x248>
      Error_Handler();
 8001b88:	f7ff feae 	bl	80018e8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <HAL_I2S_MspInit+0x27c>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001b98:	bf00      	nop
 8001b9a:	3738      	adds	r7, #56	@ 0x38
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40003800 	.word	0x40003800
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	20000120 	.word	0x20000120
 8001bb4:	40026070 	.word	0x40026070
 8001bb8:	40003c00 	.word	0x40003c00
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	20000180 	.word	0x20000180
 8001bc4:	40026010 	.word	0x40026010

08001bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_UART_MspInit+0x84>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12b      	bne.n	8001c42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_UART_MspInit+0x88>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_UART_MspInit+0x88>)
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_UART_MspInit+0x88>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_UART_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <HAL_UART_MspInit+0x88>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_UART_MspInit+0x88>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c22:	230c      	movs	r3, #12
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c32:	2307      	movs	r3, #7
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <HAL_UART_MspInit+0x8c>)
 8001c3e:	f000 fdd9 	bl	80027f4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	@ 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40004400 	.word	0x40004400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <NMI_Handler+0x4>

08001c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <MemManage_Handler+0x4>

08001c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cae:	f000 f8db 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <DMA1_Stream0_IRQHandler+0x10>)
 8001cbe:	f000 fb2f 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000180 	.word	0x20000180

08001ccc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <DMA1_Stream4_IRQHandler+0x10>)
 8001cd2:	f000 fb25 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000120 	.word	0x20000120

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f003 fd44 	bl	800579c <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20020000 	.word	0x20020000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	20000344 	.word	0x20000344
 8001d48:	20000498 	.word	0x20000498

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d74:	f7ff ffea 	bl	8001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f003 fd03 	bl	80057a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff fb89 	bl	80014b8 <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001db4:	080073f8 	.word	0x080073f8
  ldr r2, =_sbss
 8001db8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001dbc:	20000494 	.word	0x20000494

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	@ (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f94f 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fd7c 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f967 	bl	80020fa <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 f92f 	bl	80020a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	20000014 	.word	0x20000014
 8001e64:	20000010 	.word	0x20000010

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000014 	.word	0x20000014
 8001e8c:	20000348 	.word	0x20000348

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000348 	.word	0x20000348

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_Delay+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000014 	.word	0x20000014

08001ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <__NVIC_GetPriorityGrouping+0x18>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0307 	and.w	r3, r3, #7
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0b      	blt.n	8001f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4907      	ldr	r1, [pc, #28]	@ (8001f8c <__NVIC_EnableIRQ+0x38>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	@ (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	@ (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	@ 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	bf28      	it	cs
 8002002:	2304      	movcs	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3304      	adds	r3, #4
 800200a:	2b06      	cmp	r3, #6
 800200c:	d902      	bls.n	8002014 <NVIC_EncodePriority+0x30>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b03      	subs	r3, #3
 8002012:	e000      	b.n	8002016 <NVIC_EncodePriority+0x32>
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	f04f 32ff 	mov.w	r2, #4294967295
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	4313      	orrs	r3, r2
         );
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff8e 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff29 	bl	8001ef0 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff3e 	bl	8001f38 <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff8e 	bl	8001fe4 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5d 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff31 	bl	8001f54 <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffa2 	bl	800204c <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff feb6 	bl	8001e90 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e099      	b.n	8002264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002150:	e00f      	b.n	8002172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002152:	f7ff fe9d 	bl	8001e90 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b05      	cmp	r3, #5
 800215e:	d908      	bls.n	8002172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e078      	b.n	8002264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e8      	bne.n	8002152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4b38      	ldr	r3, [pc, #224]	@ (800226c <HAL_DMA_Init+0x158>)
 800218c:	4013      	ands	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d107      	bne.n	80021dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	4313      	orrs	r3, r2
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f023 0307 	bic.w	r3, r3, #7
 80021f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	2b04      	cmp	r3, #4
 8002204:	d117      	bne.n	8002236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fa6f 	bl	80026fc <DMA_CheckFifoParam>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2240      	movs	r2, #64	@ 0x40
 8002228:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002232:	2301      	movs	r3, #1
 8002234:	e016      	b.n	8002264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa26 	bl	8002690 <DMA_CalcBaseAndBitshift>
 8002244:	4603      	mov	r3, r0
 8002246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224c:	223f      	movs	r2, #63	@ 0x3f
 800224e:	409a      	lsls	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f010803f 	.word	0xf010803f

08002270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_DMA_Start_IT+0x26>
 8002292:	2302      	movs	r3, #2
 8002294:	e040      	b.n	8002318 <HAL_DMA_Start_IT+0xa8>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d12f      	bne.n	800230a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f9b8 	bl	8002634 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	223f      	movs	r2, #63	@ 0x3f
 80022ca:	409a      	lsls	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0216 	orr.w	r2, r2, #22
 80022de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0208 	orr.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e005      	b.n	8002316 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002312:	2302      	movs	r3, #2
 8002314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002316:	7dfb      	ldrb	r3, [r7, #23]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800232c:	4b8e      	ldr	r3, [pc, #568]	@ (8002568 <HAL_DMA_IRQHandler+0x248>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a8e      	ldr	r2, [pc, #568]	@ (800256c <HAL_DMA_IRQHandler+0x24c>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234a:	2208      	movs	r2, #8
 800234c:	409a      	lsls	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0204 	bic.w	r2, r2, #4
 8002372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002378:	2208      	movs	r2, #8
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	2201      	movs	r2, #1
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d012      	beq.n	80023c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ae:	2201      	movs	r2, #1
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	2204      	movs	r2, #4
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d012      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e4:	2204      	movs	r2, #4
 80023e6:	409a      	lsls	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	2210      	movs	r2, #16
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d043      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03c      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241a:	2210      	movs	r2, #16
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d018      	beq.n	8002462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d024      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
 800244e:	e01f      	b.n	8002490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
 8002460:	e016      	b.n	8002490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0208 	bic.w	r2, r2, #8
 800247e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	2220      	movs	r2, #32
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 808f 	beq.w	80025c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8087 	beq.w	80025c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b6:	2220      	movs	r2, #32
 80024b8:	409a      	lsls	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d136      	bne.n	8002538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0216 	bic.w	r2, r2, #22
 80024d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_DMA_IRQHandler+0x1da>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0208 	bic.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250e:	223f      	movs	r2, #63	@ 0x3f
 8002510:	409a      	lsls	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252a:	2b00      	cmp	r3, #0
 800252c:	d07e      	beq.n	800262c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
        }
        return;
 8002536:	e079      	b.n	800262c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01d      	beq.n	8002582 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002558:	2b00      	cmp	r3, #0
 800255a:	d031      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e02c      	b.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
 8002566:	bf00      	nop
 8002568:	2000000c 	.word	0x2000000c
 800256c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
 8002580:	e01e      	b.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10f      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0210 	bic.w	r2, r2, #16
 800259e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d032      	beq.n	800262e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d022      	beq.n	800261a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2205      	movs	r2, #5
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d307      	bcc.n	8002608 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f2      	bne.n	80025ec <HAL_DMA_IRQHandler+0x2cc>
 8002606:	e000      	b.n	800260a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002608:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4798      	blx	r3
 800262a:	e000      	b.n	800262e <HAL_DMA_IRQHandler+0x30e>
        return;
 800262c:	bf00      	nop
    }
  }
}
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002650:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	d108      	bne.n	8002674 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002672:	e007      	b.n	8002684 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3b10      	subs	r3, #16
 80026a0:	4a14      	ldr	r2, [pc, #80]	@ (80026f4 <DMA_CalcBaseAndBitshift+0x64>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026aa:	4a13      	ldr	r2, [pc, #76]	@ (80026f8 <DMA_CalcBaseAndBitshift+0x68>)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d909      	bls.n	80026d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	1d1a      	adds	r2, r3, #4
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80026d0:	e007      	b.n	80026e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	aaaaaaab 	.word	0xaaaaaaab
 80026f8:	080071d0 	.word	0x080071d0

080026fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d856      	bhi.n	80027ca <DMA_CheckFifoParam+0xce>
 800271c:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <DMA_CheckFifoParam+0x28>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002735 	.word	0x08002735
 8002728:	08002747 	.word	0x08002747
 800272c:	08002735 	.word	0x08002735
 8002730:	080027cb 	.word	0x080027cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d046      	beq.n	80027ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002744:	e043      	b.n	80027ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800274e:	d140      	bne.n	80027d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002754:	e03d      	b.n	80027d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275e:	d121      	bne.n	80027a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d837      	bhi.n	80027d6 <DMA_CheckFifoParam+0xda>
 8002766:	a201      	add	r2, pc, #4	@ (adr r2, 800276c <DMA_CheckFifoParam+0x70>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	0800277d 	.word	0x0800277d
 8002770:	08002783 	.word	0x08002783
 8002774:	0800277d 	.word	0x0800277d
 8002778:	08002795 	.word	0x08002795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      break;
 8002780:	e030      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d025      	beq.n	80027da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002792:	e022      	b.n	80027da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800279c:	d11f      	bne.n	80027de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027a2:	e01c      	b.n	80027de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d903      	bls.n	80027b2 <DMA_CheckFifoParam+0xb6>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d003      	beq.n	80027b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027b0:	e018      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      break;
 80027b6:	e015      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00e      	beq.n	80027e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e00b      	b.n	80027e2 <DMA_CheckFifoParam+0xe6>
      break;
 80027ca:	bf00      	nop
 80027cc:	e00a      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e008      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027d2:	bf00      	nop
 80027d4:	e006      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027d6:	bf00      	nop
 80027d8:	e004      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
    }
  } 
  
  return status; 
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	@ 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e165      	b.n	8002adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 8154 	bne.w	8002ad6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80ae 	beq.w	8002ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b5d      	ldr	r3, [pc, #372]	@ (8002af4 <HAL_GPIO_Init+0x300>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	4a5c      	ldr	r2, [pc, #368]	@ (8002af4 <HAL_GPIO_Init+0x300>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	4b5a      	ldr	r3, [pc, #360]	@ (8002af4 <HAL_GPIO_Init+0x300>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a58      	ldr	r2, [pc, #352]	@ (8002af8 <HAL_GPIO_Init+0x304>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4f      	ldr	r2, [pc, #316]	@ (8002afc <HAL_GPIO_Init+0x308>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d025      	beq.n	8002a0e <HAL_GPIO_Init+0x21a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002b00 <HAL_GPIO_Init+0x30c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01f      	beq.n	8002a0a <HAL_GPIO_Init+0x216>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002b04 <HAL_GPIO_Init+0x310>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d019      	beq.n	8002a06 <HAL_GPIO_Init+0x212>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002b08 <HAL_GPIO_Init+0x314>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_GPIO_Init+0x20e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	@ (8002b0c <HAL_GPIO_Init+0x318>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00d      	beq.n	80029fe <HAL_GPIO_Init+0x20a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002b10 <HAL_GPIO_Init+0x31c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <HAL_GPIO_Init+0x206>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a49      	ldr	r2, [pc, #292]	@ (8002b14 <HAL_GPIO_Init+0x320>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_GPIO_Init+0x202>
 80029f2:	2306      	movs	r3, #6
 80029f4:	e00c      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00a      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e008      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a20:	4935      	ldr	r1, [pc, #212]	@ (8002af8 <HAL_GPIO_Init+0x304>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a31      	ldr	r2, [pc, #196]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b2f      	ldr	r3, [pc, #188]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a26      	ldr	r2, [pc, #152]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a82:	4b25      	ldr	r3, [pc, #148]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad0:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f ae96 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	@ 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e001      	b.n	8002b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0e1      	b.n	8002d56 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a6d      	ldr	r2, [pc, #436]	@ (8002d60 <HAL_I2S_Init+0x1e0>)
 8002baa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7fe fec9 	bl	8001944 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002bc8:	f023 030f 	bic.w	r3, r3, #15
 8002bcc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d06f      	beq.n	8002cbe <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002be6:	2310      	movs	r3, #16
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e001      	b.n	8002bf0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d802      	bhi.n	8002bfe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_I2S_Init+0x1e4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_I2S_Init+0x92>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a56      	ldr	r2, [pc, #344]	@ (8002d68 <HAL_I2S_Init+0x1e8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d104      	bne.n	8002c1c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002c12:	2001      	movs	r0, #1
 8002c14:	f000 ffe0 	bl	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	e003      	b.n	8002c24 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f000 ffdb 	bl	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c22:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2c:	d125      	bne.n	8002c7a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	461a      	mov	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	3305      	adds	r3, #5
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	e01f      	b.n	8002c98 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	3305      	adds	r3, #5
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e00e      	b.n	8002c98 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	3305      	adds	r3, #5
 8002c96:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4a34      	ldr	r2, [pc, #208]	@ (8002d6c <HAL_I2S_Init+0x1ec>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	e003      	b.n	8002cc6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d902      	bls.n	8002cd2 <HAL_I2S_Init+0x152>
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2bff      	cmp	r3, #255	@ 0xff
 8002cd0:	d907      	bls.n	8002ce2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	f043 0210 	orr.w	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e039      	b.n	8002d56 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	ea42 0103 	orr.w	r1, r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002d00:	f023 030f 	bic.w	r3, r3, #15
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6851      	ldr	r1, [r2, #4]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6892      	ldr	r2, [r2, #8]
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68d2      	ldr	r2, [r2, #12]
 8002d12:	4311      	orrs	r1, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6992      	ldr	r2, [r2, #24]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d24:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b30      	cmp	r3, #48	@ 0x30
 8002d2c:	d003      	beq.n	8002d36 <HAL_I2S_Init+0x1b6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d34:	d107      	bne.n	8002d46 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d44:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	0800323b 	.word	0x0800323b
 8002d64:	40003800 	.word	0x40003800
 8002d68:	40003c00 	.word	0x40003c00
 8002d6c:	cccccccd 	.word	0xcccccccd

08002d70 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_I2S_Transmit_DMA+0x1a>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e08a      	b.n	8002ea4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d001      	beq.n	8002d9e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e082      	b.n	8002ea4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_I2S_Transmit_DMA+0x3e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e07a      	b.n	8002ea4 <HAL_I2S_Transmit_DMA+0x134>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2203      	movs	r2, #3
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d002      	beq.n	8002de2 <HAL_I2S_Transmit_DMA+0x72>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d10a      	bne.n	8002df8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df6:	e005      	b.n	8002e04 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88fa      	ldrh	r2, [r7, #6]
 8002dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	88fa      	ldrh	r2, [r7, #6]
 8002e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	4a28      	ldr	r2, [pc, #160]	@ (8002eac <HAL_I2S_Transmit_DMA+0x13c>)
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	4a27      	ldr	r2, [pc, #156]	@ (8002eb0 <HAL_I2S_Transmit_DMA+0x140>)
 8002e12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	4a26      	ldr	r2, [pc, #152]	@ (8002eb4 <HAL_I2S_Transmit_DMA+0x144>)
 8002e1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002e24:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002e2c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002e34:	f7ff fa1c 	bl	8002270 <HAL_DMA_Start_IT>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00f      	beq.n	8002e5e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f043 0208 	orr.w	r2, r3, #8
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0202 	orr.w	r2, r2, #2
 8002e82:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ea0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	080030bb 	.word	0x080030bb
 8002eb0:	08003079 	.word	0x08003079
 8002eb4:	08003135 	.word	0x08003135

08002eb8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_I2S_Receive_DMA+0x1a>
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e09d      	b.n	8003012 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e095      	b.n	8003012 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2S_Receive_DMA+0x3e>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e08d      	b.n	8003012 <HAL_I2S_Receive_DMA+0x15a>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2204      	movs	r2, #4
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d002      	beq.n	8002f2a <HAL_I2S_Receive_DMA+0x72>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d10a      	bne.n	8002f40 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002f3e:	e005      	b.n	8002f4c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f50:	4a32      	ldr	r2, [pc, #200]	@ (800301c <HAL_I2S_Receive_DMA+0x164>)
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	4a31      	ldr	r2, [pc, #196]	@ (8003020 <HAL_I2S_Receive_DMA+0x168>)
 8002f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	4a30      	ldr	r2, [pc, #192]	@ (8003024 <HAL_I2S_Receive_DMA+0x16c>)
 8002f62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f72:	d10a      	bne.n	8002f8a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	4619      	mov	r1, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002fa0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002fa2:	f7ff f965 	bl	8002270 <HAL_DMA_Start_IT>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00f      	beq.n	8002fcc <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb0:	f043 0208 	orr.w	r2, r3, #8
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e022      	b.n	8003012 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800300e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	08003119 	.word	0x08003119
 8003020:	080030d7 	.word	0x080030d7
 8003024:	08003135 	.word	0x08003135

08003028 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10e      	bne.n	80030ac <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0202 	bic.w	r2, r2, #2
 800309c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff ffc5 	bl	800303c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff ffad 	bl	8003028 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e2:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10e      	bne.n	800310a <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7fe f8ac 	bl	8001268 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff ff92 	bl	8003050 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0203 	bic.w	r2, r2, #3
 8003150:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	f043 0208 	orr.w	r2, r3, #8
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ff76 	bl	8003064 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	881a      	ldrh	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	1c9a      	adds	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ff34 	bl	800303c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	b292      	uxth	r2, r2
 80031f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f6:	1c9a      	adds	r2, r3, #2
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10e      	bne.n	8003232 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003222:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fe f81b 	bl	8001268 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b04      	cmp	r3, #4
 8003254:	d13a      	bne.n	80032cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d109      	bne.n	8003274 <I2S_IRQHandler+0x3a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326a:	2b40      	cmp	r3, #64	@ 0x40
 800326c:	d102      	bne.n	8003274 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ffb4 	bl	80031dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327a:	2b40      	cmp	r3, #64	@ 0x40
 800327c:	d126      	bne.n	80032cc <I2S_IRQHandler+0x92>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b20      	cmp	r3, #32
 800328a:	d11f      	bne.n	80032cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800329a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f043 0202 	orr.w	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff fecc 	bl	8003064 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d136      	bne.n	8003346 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d109      	bne.n	80032f6 <I2S_IRQHandler+0xbc>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ec:	2b80      	cmp	r3, #128	@ 0x80
 80032ee:	d102      	bne.n	80032f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff45 	bl	8003180 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d122      	bne.n	8003346 <I2S_IRQHandler+0x10c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d11b      	bne.n	8003346 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800331c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	f043 0204 	orr.w	r2, r3, #4
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fe8f 	bl	8003064 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003346:	bf00      	nop
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0cc      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4b68      	ldr	r3, [pc, #416]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d90c      	bls.n	800338c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b65      	ldr	r3, [pc, #404]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b63      	ldr	r3, [pc, #396]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0b8      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a4:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a58      	ldr	r2, [pc, #352]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033bc:	4b53      	ldr	r3, [pc, #332]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a52      	ldr	r2, [pc, #328]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b50      	ldr	r3, [pc, #320]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	494d      	ldr	r1, [pc, #308]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d044      	beq.n	8003470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b47      	ldr	r3, [pc, #284]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d119      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e07f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	2b03      	cmp	r3, #3
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b3f      	ldr	r3, [pc, #252]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b3b      	ldr	r3, [pc, #236]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e067      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342e:	4b37      	ldr	r3, [pc, #220]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4934      	ldr	r1, [pc, #208]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003440:	f7fe fd26 	bl	8001e90 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fe fd22 	bl	8001e90 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	4b2b      	ldr	r3, [pc, #172]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 020c 	and.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	429a      	cmp	r2, r3
 800346e:	d1eb      	bne.n	8003448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b25      	ldr	r3, [pc, #148]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d20c      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e032      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a4:	4b19      	ldr	r3, [pc, #100]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4916      	ldr	r1, [pc, #88]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c2:	4b12      	ldr	r3, [pc, #72]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	490e      	ldr	r1, [pc, #56]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034d6:	f000 fdc9 	bl	800406c <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490a      	ldr	r1, [pc, #40]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a09      	ldr	r2, [pc, #36]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034f2:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fc86 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023c00 	.word	0x40023c00
 800350c:	40023800 	.word	0x40023800
 8003510:	080071b8 	.word	0x080071b8
 8003514:	2000000c 	.word	0x2000000c
 8003518:	20000010 	.word	0x20000010

0800351c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003520:	4b03      	ldr	r3, [pc, #12]	@ (8003530 <HAL_RCC_GetHCLKFreq+0x14>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000000c 	.word	0x2000000c

08003534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003538:	f7ff fff0 	bl	800351c <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	0a9b      	lsrs	r3, r3, #10
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4903      	ldr	r1, [pc, #12]	@ (8003558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40023800 	.word	0x40023800
 8003558:	080071c8 	.word	0x080071c8

0800355c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003560:	f7ff ffdc 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	0b5b      	lsrs	r3, r3, #13
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	@ (8003580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800
 8003580:	080071c8 	.word	0x080071c8

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08c      	sub	sp, #48	@ 0x30
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80035bc:	4b6f      	ldr	r3, [pc, #444]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035c2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ca:	496c      	ldr	r1, [pc, #432]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80035da:	2301      	movs	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d010      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80035ea:	4b64      	ldr	r3, [pc, #400]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	4960      	ldr	r1, [pc, #384]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003608:	2301      	movs	r3, #1
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d017      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003618:	4b58      	ldr	r3, [pc, #352]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800361a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800361e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	4955      	ldr	r1, [pc, #340]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003636:	d101      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003638:	2301      	movs	r3, #1
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003644:	2301      	movs	r3, #1
 8003646:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d017      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003654:	4b49      	ldr	r3, [pc, #292]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800365a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003662:	4946      	ldr	r1, [pc, #280]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003672:	d101      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003674:	2301      	movs	r3, #1
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003680:	2301      	movs	r3, #1
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 808a 	beq.w	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	4b39      	ldr	r3, [pc, #228]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	4a38      	ldr	r2, [pc, #224]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a2:	4b36      	ldr	r3, [pc, #216]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036ae:	4b34      	ldr	r3, [pc, #208]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a33      	ldr	r2, [pc, #204]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ba:	f7fe fbe9 	bl	8001e90 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fe fbe5 	bl	8001e90 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e278      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036e0:	4b26      	ldr	r3, [pc, #152]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d028      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036fe:	4b1f      	ldr	r3, [pc, #124]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003706:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003708:	4b1e      	ldr	r3, [pc, #120]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800370e:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003714:	4a19      	ldr	r2, [pc, #100]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800371a:	4b18      	ldr	r3, [pc, #96]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d114      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003726:	f7fe fbb3 	bl	8001e90 <HAL_GetTick>
 800372a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe fbaf 	bl	8001e90 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e240      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ee      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003758:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800375c:	d114      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800375e:	4b07      	ldr	r3, [pc, #28]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800376e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003772:	4902      	ldr	r1, [pc, #8]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
 8003778:	e00c      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	40007000 	.word	0x40007000
 8003784:	42470e40 	.word	0x42470e40
 8003788:	4b4a      	ldr	r3, [pc, #296]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a49      	ldr	r2, [pc, #292]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800378e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003792:	6093      	str	r3, [r2, #8]
 8003794:	4b47      	ldr	r3, [pc, #284]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003796:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	4944      	ldr	r1, [pc, #272]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80037b8:	4b3f      	ldr	r3, [pc, #252]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80037ba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80037c8:	4b3a      	ldr	r3, [pc, #232]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d6:	4937      	ldr	r1, [pc, #220]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037ea:	4b32      	ldr	r3, [pc, #200]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f8:	492e      	ldr	r1, [pc, #184]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d011      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800380c:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800380e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003812:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	4926      	ldr	r1, [pc, #152]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800382a:	d101      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800382c:	2301      	movs	r3, #1
 800382e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800383c:	4b1d      	ldr	r3, [pc, #116]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800383e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003842:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	491a      	ldr	r1, [pc, #104]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385a:	2b00      	cmp	r3, #0
 800385c:	d011      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800385e:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003864:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	4911      	ldr	r1, [pc, #68]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800387e:	2301      	movs	r3, #1
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d005      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003890:	f040 80ff 	bne.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003894:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800389a:	f7fe faf9 	bl	8001e90 <HAL_GetTick>
 800389e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038a0:	e00e      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038a2:	f7fe faf5 	bl	8001e90 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d907      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e188      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	424711e0 	.word	0x424711e0
 80038bc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c0:	4b7e      	ldr	r3, [pc, #504]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ea      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d028      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d124      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80038f4:	4b71      	ldr	r3, [pc, #452]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	3301      	adds	r3, #1
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003906:	4b6d      	ldr	r3, [pc, #436]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800390c:	0e1b      	lsrs	r3, r3, #24
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	431a      	orrs	r2, r3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	3b01      	subs	r3, #1
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	071b      	lsls	r3, r3, #28
 8003936:	4961      	ldr	r1, [pc, #388]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800395c:	2b00      	cmp	r3, #0
 800395e:	d035      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003968:	d130      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800396a:	4b54      	ldr	r3, [pc, #336]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800396c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003970:	0c1b      	lsrs	r3, r3, #16
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	3301      	adds	r3, #1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800397c:	4b4f      	ldr	r3, [pc, #316]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800397e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003982:	0f1b      	lsrs	r3, r3, #28
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	019b      	lsls	r3, r3, #6
 8003994:	431a      	orrs	r2, r3
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	3b01      	subs	r3, #1
 800399c:	041b      	lsls	r3, r3, #16
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	061b      	lsls	r3, r3, #24
 80039a6:	431a      	orrs	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	071b      	lsls	r3, r3, #28
 80039ac:	4943      	ldr	r1, [pc, #268]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039b4:	4b41      	ldr	r3, [pc, #260]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039ba:	f023 021f 	bic.w	r2, r3, #31
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c2:	3b01      	subs	r3, #1
 80039c4:	493d      	ldr	r1, [pc, #244]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d029      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e0:	d124      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039e2:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039f4:	4b31      	ldr	r3, [pc, #196]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039fa:	0f1b      	lsrs	r3, r3, #28
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	019b      	lsls	r3, r3, #6
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	3b01      	subs	r3, #1
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	071b      	lsls	r3, r3, #28
 8003a24:	4925      	ldr	r1, [pc, #148]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d016      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	071b      	lsls	r3, r3, #28
 8003a5e:	4917      	ldr	r1, [pc, #92]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a66:	4b16      	ldr	r3, [pc, #88]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7fe fa10 	bl	8001e90 <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a74:	f7fe fa0c 	bl	8001e90 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e09f      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a86:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	f040 8095 	bne.w	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe f9f6 	bl	8001e90 <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003aa6:	e00f      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003aa8:	f7fe f9f2 	bl	8001e90 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d908      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e085      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470068 	.word	0x42470068
 8003ac4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ac8:	4b41      	ldr	r3, [pc, #260]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ad4:	d0e8      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d02b      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d127      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003afe:	4b34      	ldr	r3, [pc, #208]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	4928      	ldr	r1, [pc, #160]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b34:	4b26      	ldr	r3, [pc, #152]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b3a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b42:	3b01      	subs	r3, #1
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	4922      	ldr	r1, [pc, #136]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01d      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b62:	d118      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b64:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6a:	0e1b      	lsrs	r3, r3, #24
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	019b      	lsls	r3, r3, #6
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	3b01      	subs	r3, #1
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	4910      	ldr	r1, [pc, #64]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b96:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe f978 	bl	8001e90 <HAL_GetTick>
 8003ba0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ba4:	f7fe f974 	bl	8001e90 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e007      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bb6:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc2:	d1ef      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3730      	adds	r7, #48	@ 0x30
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	42470070 	.word	0x42470070

08003bd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	@ 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	2b07      	cmp	r3, #7
 8003bfe:	f200 8224 	bhi.w	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003c02:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003e0b 	.word	0x08003e0b
 8003c0c:	08003f35 	.word	0x08003f35
 8003c10:	0800404b 	.word	0x0800404b
 8003c14:	08003c29 	.word	0x08003c29
 8003c18:	0800404b 	.word	0x0800404b
 8003c1c:	0800404b 	.word	0x0800404b
 8003c20:	0800404b 	.word	0x0800404b
 8003c24:	08003c29 	.word	0x08003c29
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003c28:	4ba8      	ldr	r3, [pc, #672]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c2e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c3e:	f000 80d6 	beq.w	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c48:	f200 80dd 	bhi.w	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c52:	f000 809f 	beq.w	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c5c:	f200 80d3 	bhi.w	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c66:	d05b      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c6e:	f200 80ca 	bhi.w	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c78:	f000 80b6 	beq.w	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c82:	f200 80c0 	bhi.w	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c8c:	f000 8082 	beq.w	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c96:	f200 80b6 	bhi.w	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca6:	d03b      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8003ca8:	e0ad      	b.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003caa:	4b88      	ldr	r3, [pc, #544]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003cb6:	4b85      	ldr	r3, [pc, #532]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc0:	4a83      	ldr	r2, [pc, #524]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e008      	b.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003cca:	4b80      	ldr	r3, [pc, #512]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	0e1b      	lsrs	r3, r3, #24
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 8003cea:	4b78      	ldr	r3, [pc, #480]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	fb03 f202 	mul.w	r2, r3, r2
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003d04:	4b71      	ldr	r3, [pc, #452]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	3301      	adds	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	61fb      	str	r3, [r7, #28]
          break;
 8003d1e:	e073      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003d20:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003d2c:	4b67      	ldr	r3, [pc, #412]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d36:	4a66      	ldr	r2, [pc, #408]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e008      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003d40:	4b62      	ldr	r3, [pc, #392]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d4a:	4a62      	ldr	r2, [pc, #392]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003d52:	4b5e      	ldr	r3, [pc, #376]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d58:	0e1b      	lsrs	r3, r3, #24
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8003d60:	4b5a      	ldr	r3, [pc, #360]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	fb03 f202 	mul.w	r2, r3, r2
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003d7a:	4b54      	ldr	r3, [pc, #336]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	3301      	adds	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	61fb      	str	r3, [r7, #28]
          break;
 8003d92:	e039      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003d94:	4b4d      	ldr	r3, [pc, #308]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003da0:	4b4a      	ldr	r3, [pc, #296]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003da8:	4a49      	ldr	r2, [pc, #292]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e007      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003db2:	4b46      	ldr	r3, [pc, #280]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dba:	4a46      	ldr	r2, [pc, #280]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003dc2:	4b42      	ldr	r3, [pc, #264]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	0f1b      	lsrs	r3, r3, #28
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 8003dce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	099b      	lsrs	r3, r3, #6
 8003dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	fb03 f202 	mul.w	r2, r3, r2
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	61fb      	str	r3, [r7, #28]
          break;
 8003de6:	e00f      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003de8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003dea:	61fb      	str	r3, [r7, #28]
          break;
 8003dec:	e00c      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003dee:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003dfa:	4b35      	ldr	r3, [pc, #212]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dfc:	61fb      	str	r3, [r7, #28]
          break;
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003e00:	4b34      	ldr	r3, [pc, #208]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003e02:	61fb      	str	r3, [r7, #28]
          break;
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003e06:	bf00      	nop
        }
      }
      break;
 8003e08:	e120      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003e0a:	4b30      	ldr	r3, [pc, #192]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e10:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003e1c:	d079      	beq.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003e24:	f200 8082 	bhi.w	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e2e:	d03c      	beq.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e36:	d879      	bhi.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d006      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e44:	d172      	bne.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e46:	4b24      	ldr	r3, [pc, #144]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003e48:	61fb      	str	r3, [r7, #28]
          break;
 8003e4a:	e072      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e58:	d109      	bne.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e64:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e008      	b.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003e6e:	4b17      	ldr	r3, [pc, #92]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e78:	4a15      	ldr	r2, [pc, #84]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e80:	4b12      	ldr	r3, [pc, #72]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e9a:	0f1b      	lsrs	r3, r3, #28
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
          break;
 8003ea8:	e043      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb6:	d111      	bne.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003eb8:	4b04      	ldr	r3, [pc, #16]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ec0:	4a04      	ldr	r2, [pc, #16]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	e010      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	007a1200 	.word	0x007a1200
 8003ed8:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003edc:	4b5f      	ldr	r3, [pc, #380]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003eec:	4b5b      	ldr	r3, [pc, #364]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003efe:	4b57      	ldr	r3, [pc, #348]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	0f1b      	lsrs	r3, r3, #28
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	61fb      	str	r3, [r7, #28]
          break;
 8003f10:	e00f      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f12:	4b52      	ldr	r3, [pc, #328]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003f20:	4b50      	ldr	r3, [pc, #320]	@ (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003f22:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003f24:	e005      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003f26:	4b4e      	ldr	r3, [pc, #312]	@ (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003f28:	61fb      	str	r3, [r7, #28]
          break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
          break;
 8003f30:	bf00      	nop
        }
      }
      break;
 8003f32:	e08b      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003f34:	4b49      	ldr	r3, [pc, #292]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f3a:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003f46:	d06f      	beq.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003f4e:	d878      	bhi.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f56:	d03c      	beq.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f5e:	d870      	bhi.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d006      	beq.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f6c:	d169      	bne.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8003f70:	61fb      	str	r3, [r7, #28]
          break;
 8003f72:	e069      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f74:	4b39      	ldr	r3, [pc, #228]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f80:	d109      	bne.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003f82:	4b36      	ldr	r3, [pc, #216]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f8c:	4a35      	ldr	r2, [pc, #212]	@ (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	e008      	b.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003f96:	4b31      	ldr	r3, [pc, #196]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa6:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fae:	099b      	lsrs	r3, r3, #6
 8003fb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003fbc:	4b27      	ldr	r3, [pc, #156]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc2:	0f1b      	lsrs	r3, r3, #28
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	61fb      	str	r3, [r7, #28]
          break;
 8003fd0:	e03a      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fd2:	4b22      	ldr	r3, [pc, #136]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fde:	d108      	bne.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	e007      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ffa:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004002:	4b16      	ldr	r3, [pc, #88]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004014:	4b11      	ldr	r3, [pc, #68]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	0f1b      	lsrs	r3, r3, #28
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	61fb      	str	r3, [r7, #28]
          break;
 8004026:	e00f      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004034:	d102      	bne.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004036:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004038:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800403a:	e005      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800403c:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800403e:	61fb      	str	r3, [r7, #28]
          break;
 8004040:	e002      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
          break;
 8004046:	bf00      	nop
        }
      }
      break;
 8004048:	e000      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 800404a:	bf00      	nop
    }
  }
  return frequency;
 800404c:	69fb      	ldr	r3, [r7, #28]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3724      	adds	r7, #36	@ 0x24
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	00f42400 	.word	0x00f42400
 8004064:	007a1200 	.word	0x007a1200
 8004068:	00bb8000 	.word	0x00bb8000

0800406c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004070:	b0ae      	sub	sp, #184	@ 0xb8
 8004072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004092:	4bcb      	ldr	r3, [pc, #812]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b0c      	cmp	r3, #12
 800409c:	f200 8206 	bhi.w	80044ac <HAL_RCC_GetSysClockFreq+0x440>
 80040a0:	a201      	add	r2, pc, #4	@ (adr r2, 80040a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080044ad 	.word	0x080044ad
 80040b0:	080044ad 	.word	0x080044ad
 80040b4:	080044ad 	.word	0x080044ad
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	080044ad 	.word	0x080044ad
 80040c0:	080044ad 	.word	0x080044ad
 80040c4:	080044ad 	.word	0x080044ad
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080044ad 	.word	0x080044ad
 80040d0:	080044ad 	.word	0x080044ad
 80040d4:	080044ad 	.word	0x080044ad
 80040d8:	080042dd 	.word	0x080042dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4bb9      	ldr	r3, [pc, #740]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80040de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040e2:	e1e7      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e4:	4bb8      	ldr	r3, [pc, #736]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ea:	e1e3      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ec:	4bb4      	ldr	r3, [pc, #720]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f8:	4bb1      	ldr	r3, [pc, #708]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d071      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004104:	4bae      	ldr	r3, [pc, #696]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004110:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800412a:	4622      	mov	r2, r4
 800412c:	462b      	mov	r3, r5
 800412e:	f04f 0000 	mov.w	r0, #0
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	0159      	lsls	r1, r3, #5
 8004138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800413c:	0150      	lsls	r0, r2, #5
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4621      	mov	r1, r4
 8004144:	1a51      	subs	r1, r2, r1
 8004146:	6439      	str	r1, [r7, #64]	@ 0x40
 8004148:	4629      	mov	r1, r5
 800414a:	eb63 0301 	sbc.w	r3, r3, r1
 800414e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800415c:	4649      	mov	r1, r9
 800415e:	018b      	lsls	r3, r1, #6
 8004160:	4641      	mov	r1, r8
 8004162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004166:	4641      	mov	r1, r8
 8004168:	018a      	lsls	r2, r1, #6
 800416a:	4641      	mov	r1, r8
 800416c:	1a51      	subs	r1, r2, r1
 800416e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004170:	4649      	mov	r1, r9
 8004172:	eb63 0301 	sbc.w	r3, r3, r1
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004184:	4649      	mov	r1, r9
 8004186:	00cb      	lsls	r3, r1, #3
 8004188:	4641      	mov	r1, r8
 800418a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418e:	4641      	mov	r1, r8
 8004190:	00ca      	lsls	r2, r1, #3
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	4603      	mov	r3, r0
 8004198:	4622      	mov	r2, r4
 800419a:	189b      	adds	r3, r3, r2
 800419c:	633b      	str	r3, [r7, #48]	@ 0x30
 800419e:	462b      	mov	r3, r5
 80041a0:	460a      	mov	r2, r1
 80041a2:	eb42 0303 	adc.w	r3, r2, r3
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041b4:	4629      	mov	r1, r5
 80041b6:	024b      	lsls	r3, r1, #9
 80041b8:	4621      	mov	r1, r4
 80041ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041be:	4621      	mov	r1, r4
 80041c0:	024a      	lsls	r2, r1, #9
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80041d8:	f7fc fd40 	bl	8000c5c <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4613      	mov	r3, r2
 80041e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041e6:	e067      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e8:	4b75      	ldr	r3, [pc, #468]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80041f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004200:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004202:	2300      	movs	r3, #0
 8004204:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004206:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	f04f 0000 	mov.w	r0, #0
 8004212:	f04f 0100 	mov.w	r1, #0
 8004216:	0159      	lsls	r1, r3, #5
 8004218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800421c:	0150      	lsls	r0, r2, #5
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4621      	mov	r1, r4
 8004224:	1a51      	subs	r1, r2, r1
 8004226:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004228:	4629      	mov	r1, r5
 800422a:	eb63 0301 	sbc.w	r3, r3, r1
 800422e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800423c:	4649      	mov	r1, r9
 800423e:	018b      	lsls	r3, r1, #6
 8004240:	4641      	mov	r1, r8
 8004242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004246:	4641      	mov	r1, r8
 8004248:	018a      	lsls	r2, r1, #6
 800424a:	4641      	mov	r1, r8
 800424c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004250:	4649      	mov	r1, r9
 8004252:	eb63 0b01 	sbc.w	fp, r3, r1
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004262:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004266:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800426a:	4692      	mov	sl, r2
 800426c:	469b      	mov	fp, r3
 800426e:	4623      	mov	r3, r4
 8004270:	eb1a 0303 	adds.w	r3, sl, r3
 8004274:	623b      	str	r3, [r7, #32]
 8004276:	462b      	mov	r3, r5
 8004278:	eb4b 0303 	adc.w	r3, fp, r3
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800428a:	4629      	mov	r1, r5
 800428c:	028b      	lsls	r3, r1, #10
 800428e:	4621      	mov	r1, r4
 8004290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004294:	4621      	mov	r1, r4
 8004296:	028a      	lsls	r2, r1, #10
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042a0:	2200      	movs	r2, #0
 80042a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80042a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80042a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80042aa:	f7fc fcd7 	bl	8000c5c <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4613      	mov	r3, r2
 80042b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042b8:	4b41      	ldr	r3, [pc, #260]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80042ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042da:	e0eb      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042dc:	4b38      	ldr	r3, [pc, #224]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e8:	4b35      	ldr	r3, [pc, #212]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d06b      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f4:	4b32      	ldr	r3, [pc, #200]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	099b      	lsrs	r3, r3, #6
 80042fa:	2200      	movs	r2, #0
 80042fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004306:	663b      	str	r3, [r7, #96]	@ 0x60
 8004308:	2300      	movs	r3, #0
 800430a:	667b      	str	r3, [r7, #100]	@ 0x64
 800430c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004310:	4622      	mov	r2, r4
 8004312:	462b      	mov	r3, r5
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	0159      	lsls	r1, r3, #5
 800431e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004322:	0150      	lsls	r0, r2, #5
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4621      	mov	r1, r4
 800432a:	1a51      	subs	r1, r2, r1
 800432c:	61b9      	str	r1, [r7, #24]
 800432e:	4629      	mov	r1, r5
 8004330:	eb63 0301 	sbc.w	r3, r3, r1
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004342:	4659      	mov	r1, fp
 8004344:	018b      	lsls	r3, r1, #6
 8004346:	4651      	mov	r1, sl
 8004348:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800434c:	4651      	mov	r1, sl
 800434e:	018a      	lsls	r2, r1, #6
 8004350:	4651      	mov	r1, sl
 8004352:	ebb2 0801 	subs.w	r8, r2, r1
 8004356:	4659      	mov	r1, fp
 8004358:	eb63 0901 	sbc.w	r9, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004368:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800436c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004370:	4690      	mov	r8, r2
 8004372:	4699      	mov	r9, r3
 8004374:	4623      	mov	r3, r4
 8004376:	eb18 0303 	adds.w	r3, r8, r3
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	462b      	mov	r3, r5
 800437e:	eb49 0303 	adc.w	r3, r9, r3
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004390:	4629      	mov	r1, r5
 8004392:	024b      	lsls	r3, r1, #9
 8004394:	4621      	mov	r1, r4
 8004396:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800439a:	4621      	mov	r1, r4
 800439c:	024a      	lsls	r2, r1, #9
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043a6:	2200      	movs	r2, #0
 80043a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80043ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043b0:	f7fc fc54 	bl	8000c5c <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4613      	mov	r3, r2
 80043ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043be:	e065      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x420>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043cc:	4b3d      	ldr	r3, [pc, #244]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	2200      	movs	r2, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	4611      	mov	r1, r2
 80043d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80043de:	2300      	movs	r3, #0
 80043e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80043e6:	4642      	mov	r2, r8
 80043e8:	464b      	mov	r3, r9
 80043ea:	f04f 0000 	mov.w	r0, #0
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	0159      	lsls	r1, r3, #5
 80043f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f8:	0150      	lsls	r0, r2, #5
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4641      	mov	r1, r8
 8004400:	1a51      	subs	r1, r2, r1
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	4649      	mov	r1, r9
 8004406:	eb63 0301 	sbc.w	r3, r3, r1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004418:	4659      	mov	r1, fp
 800441a:	018b      	lsls	r3, r1, #6
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004422:	4651      	mov	r1, sl
 8004424:	018a      	lsls	r2, r1, #6
 8004426:	4651      	mov	r1, sl
 8004428:	1a54      	subs	r4, r2, r1
 800442a:	4659      	mov	r1, fp
 800442c:	eb63 0501 	sbc.w	r5, r3, r1
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	00eb      	lsls	r3, r5, #3
 800443a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443e:	00e2      	lsls	r2, r4, #3
 8004440:	4614      	mov	r4, r2
 8004442:	461d      	mov	r5, r3
 8004444:	4643      	mov	r3, r8
 8004446:	18e3      	adds	r3, r4, r3
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	464b      	mov	r3, r9
 800444c:	eb45 0303 	adc.w	r3, r5, r3
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800445e:	4629      	mov	r1, r5
 8004460:	028b      	lsls	r3, r1, #10
 8004462:	4621      	mov	r1, r4
 8004464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004468:	4621      	mov	r1, r4
 800446a:	028a      	lsls	r2, r1, #10
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004474:	2200      	movs	r2, #0
 8004476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004478:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800447a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800447e:	f7fc fbed 	bl	8000c5c <__aeabi_uldivmod>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4613      	mov	r3, r2
 8004488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800448c:	4b0d      	ldr	r3, [pc, #52]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	0f1b      	lsrs	r3, r3, #28
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800449a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800449e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044aa:	e003      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044ac:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80044ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	37b8      	adds	r7, #184	@ 0xb8
 80044bc:	46bd      	mov	sp, r7
 80044be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800
 80044c8:	00f42400 	.word	0x00f42400

080044cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e28d      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8083 	beq.w	80045f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044ec:	4b94      	ldr	r3, [pc, #592]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d019      	beq.n	800452c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044f8:	4b91      	ldr	r3, [pc, #580]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8004500:	2b08      	cmp	r3, #8
 8004502:	d106      	bne.n	8004512 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004504:	4b8e      	ldr	r3, [pc, #568]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004510:	d00c      	beq.n	800452c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004512:	4b8b      	ldr	r3, [pc, #556]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800451a:	2b0c      	cmp	r3, #12
 800451c:	d112      	bne.n	8004544 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451e:	4b88      	ldr	r3, [pc, #544]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004526:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800452a:	d10b      	bne.n	8004544 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	4b84      	ldr	r3, [pc, #528]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d05b      	beq.n	80045f0 <HAL_RCC_OscConfig+0x124>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d157      	bne.n	80045f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e25a      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454c:	d106      	bne.n	800455c <HAL_RCC_OscConfig+0x90>
 800454e:	4b7c      	ldr	r3, [pc, #496]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7b      	ldr	r2, [pc, #492]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e01d      	b.n	8004598 <HAL_RCC_OscConfig+0xcc>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0xb4>
 8004566:	4b76      	ldr	r3, [pc, #472]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a75      	ldr	r2, [pc, #468]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 800456c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b73      	ldr	r3, [pc, #460]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a72      	ldr	r2, [pc, #456]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0xcc>
 8004580:	4b6f      	ldr	r3, [pc, #444]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6e      	ldr	r2, [pc, #440]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b6c      	ldr	r3, [pc, #432]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a6b      	ldr	r2, [pc, #428]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d013      	beq.n	80045c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd fc76 	bl	8001e90 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fd fc72 	bl	8001e90 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	@ 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e21f      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b61      	ldr	r3, [pc, #388]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0xdc>
 80045c6:	e014      	b.n	80045f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fd fc62 	bl	8001e90 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fd fc5e 	bl	8001e90 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	@ 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e20b      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e2:	4b57      	ldr	r3, [pc, #348]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x104>
 80045ee:	e000      	b.n	80045f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d06f      	beq.n	80046de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045fe:	4b50      	ldr	r3, [pc, #320]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b00      	cmp	r3, #0
 8004608:	d017      	beq.n	800463a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800460a:	4b4d      	ldr	r3, [pc, #308]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004612:	2b08      	cmp	r3, #8
 8004614:	d105      	bne.n	8004622 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004616:	4b4a      	ldr	r3, [pc, #296]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004622:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800462a:	2b0c      	cmp	r3, #12
 800462c:	d11c      	bne.n	8004668 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800462e:	4b44      	ldr	r3, [pc, #272]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d116      	bne.n	8004668 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	4b41      	ldr	r3, [pc, #260]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x186>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e1d3      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004652:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4937      	ldr	r1, [pc, #220]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	e03a      	b.n	80046de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004670:	4b34      	ldr	r3, [pc, #208]	@ (8004744 <HAL_RCC_OscConfig+0x278>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd fc0b 	bl	8001e90 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467e:	f7fd fc07 	bl	8001e90 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e1b4      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	4b2b      	ldr	r3, [pc, #172]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469c:	4b28      	ldr	r3, [pc, #160]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4925      	ldr	r1, [pc, #148]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]
 80046b0:	e015      	b.n	80046de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b2:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <HAL_RCC_OscConfig+0x278>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd fbea 	bl	8001e90 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fd fbe6 	bl	8001e90 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e193      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d036      	beq.n	8004758 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d016      	beq.n	8004720 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f2:	4b15      	ldr	r3, [pc, #84]	@ (8004748 <HAL_RCC_OscConfig+0x27c>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd fbca 	bl	8001e90 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004700:	f7fd fbc6 	bl	8001e90 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e173      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x234>
 800471e:	e01b      	b.n	8004758 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004720:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <HAL_RCC_OscConfig+0x27c>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004726:	f7fd fbb3 	bl	8001e90 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472c:	e00e      	b.n	800474c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472e:	f7fd fbaf 	bl	8001e90 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d907      	bls.n	800474c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e15c      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
 8004740:	40023800 	.word	0x40023800
 8004744:	42470000 	.word	0x42470000
 8004748:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	4b8a      	ldr	r3, [pc, #552]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800474e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ea      	bne.n	800472e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8097 	beq.w	8004894 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004766:	2300      	movs	r3, #0
 8004768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476a:	4b83      	ldr	r3, [pc, #524]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10f      	bne.n	8004796 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	4b7f      	ldr	r3, [pc, #508]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	4a7e      	ldr	r2, [pc, #504]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004784:	6413      	str	r3, [r2, #64]	@ 0x40
 8004786:	4b7c      	ldr	r3, [pc, #496]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004796:	4b79      	ldr	r3, [pc, #484]	@ (800497c <HAL_RCC_OscConfig+0x4b0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d118      	bne.n	80047d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a2:	4b76      	ldr	r3, [pc, #472]	@ (800497c <HAL_RCC_OscConfig+0x4b0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a75      	ldr	r2, [pc, #468]	@ (800497c <HAL_RCC_OscConfig+0x4b0>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ae:	f7fd fb6f 	bl	8001e90 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b6:	f7fd fb6b 	bl	8001e90 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e118      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	4b6c      	ldr	r3, [pc, #432]	@ (800497c <HAL_RCC_OscConfig+0x4b0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d106      	bne.n	80047ea <HAL_RCC_OscConfig+0x31e>
 80047dc:	4b66      	ldr	r3, [pc, #408]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 80047de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e0:	4a65      	ldr	r2, [pc, #404]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e8:	e01c      	b.n	8004824 <HAL_RCC_OscConfig+0x358>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b05      	cmp	r3, #5
 80047f0:	d10c      	bne.n	800480c <HAL_RCC_OscConfig+0x340>
 80047f2:	4b61      	ldr	r3, [pc, #388]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f6:	4a60      	ldr	r2, [pc, #384]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047fe:	4b5e      	ldr	r3, [pc, #376]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	4a5d      	ldr	r2, [pc, #372]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6713      	str	r3, [r2, #112]	@ 0x70
 800480a:	e00b      	b.n	8004824 <HAL_RCC_OscConfig+0x358>
 800480c:	4b5a      	ldr	r3, [pc, #360]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004810:	4a59      	ldr	r2, [pc, #356]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	@ 0x70
 8004818:	4b57      	ldr	r3, [pc, #348]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481c:	4a56      	ldr	r2, [pc, #344]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800481e:	f023 0304 	bic.w	r3, r3, #4
 8004822:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d015      	beq.n	8004858 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7fd fb30 	bl	8001e90 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fd fb2c 	bl	8001e90 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0d7      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484a:	4b4b      	ldr	r3, [pc, #300]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0ee      	beq.n	8004834 <HAL_RCC_OscConfig+0x368>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd fb1a 	bl	8001e90 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485e:	e00a      	b.n	8004876 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004860:	f7fd fb16 	bl	8001e90 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0c1      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004876:	4b40      	ldr	r3, [pc, #256]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1ee      	bne.n	8004860 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d105      	bne.n	8004894 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004888:	4b3b      	ldr	r3, [pc, #236]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	4a3a      	ldr	r2, [pc, #232]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004892:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80ad 	beq.w	80049f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800489e:	4b36      	ldr	r3, [pc, #216]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d060      	beq.n	800496c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d145      	bne.n	800493e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b33      	ldr	r3, [pc, #204]	@ (8004980 <HAL_RCC_OscConfig+0x4b4>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd faea 	bl	8001e90 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fd fae6 	bl	8001e90 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e093      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	4b29      	ldr	r3, [pc, #164]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	019b      	lsls	r3, r3, #6
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	3b01      	subs	r3, #1
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	491b      	ldr	r1, [pc, #108]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004910:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_RCC_OscConfig+0x4b4>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004916:	f7fd fabb 	bl	8001e90 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491e:	f7fd fab7 	bl	8001e90 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e064      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004930:	4b11      	ldr	r3, [pc, #68]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x452>
 800493c:	e05c      	b.n	80049f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493e:	4b10      	ldr	r3, [pc, #64]	@ (8004980 <HAL_RCC_OscConfig+0x4b4>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd faa4 	bl	8001e90 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494c:	f7fd faa0 	bl	8001e90 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e04d      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	4b06      	ldr	r3, [pc, #24]	@ (8004978 <HAL_RCC_OscConfig+0x4ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x480>
 800496a:	e045      	b.n	80049f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e040      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
 8004978:	40023800 	.word	0x40023800
 800497c:	40007000 	.word	0x40007000
 8004980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004984:	4b1f      	ldr	r3, [pc, #124]	@ (8004a04 <HAL_RCC_OscConfig+0x538>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d030      	beq.n	80049f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d129      	bne.n	80049f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d122      	bne.n	80049f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049b4:	4013      	ands	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049bc:	4293      	cmp	r3, r2
 80049be:	d119      	bne.n	80049f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	3b01      	subs	r3, #1
 80049ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d10f      	bne.n	80049f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800

08004a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e042      	b.n	8004aa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fd f8ca 	bl	8001bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	@ 0x24
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f973 	bl	8004d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	@ 0x28
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d175      	bne.n	8004bb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_UART_Transmit+0x2c>
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e06e      	b.n	8004bb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2221      	movs	r2, #33	@ 0x21
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae6:	f7fd f9d3 	bl	8001e90 <HAL_GetTick>
 8004aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b00:	d108      	bne.n	8004b14 <HAL_UART_Transmit+0x6c>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	e003      	b.n	8004b1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b1c:	e02e      	b.n	8004b7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2180      	movs	r1, #128	@ 0x80
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f848 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e03a      	b.n	8004bb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e007      	b.n	8004b6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1cb      	bne.n	8004b1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2140      	movs	r1, #64	@ 0x40
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f814 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e006      	b.n	8004bb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
  }
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	e03b      	b.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d037      	beq.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fd f95a 	bl	8001e90 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <UART_WaitOnFlagUntilTimeout+0x30>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e03a      	b.n	8004c68 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d023      	beq.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b80      	cmp	r3, #128	@ 0x80
 8004c04:	d020      	beq.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b40      	cmp	r3, #64	@ 0x40
 8004c0a:	d01d      	beq.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d116      	bne.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f81d 	bl	8004c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2208      	movs	r2, #8
 8004c3a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e00f      	b.n	8004c68 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d0b4      	beq.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b095      	sub	sp, #84	@ 0x54
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c98:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d119      	bne.n	8004d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f023 0310 	bic.w	r3, r3, #16
 8004cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d08:	61ba      	str	r2, [r7, #24]
 8004d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6979      	ldr	r1, [r7, #20]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	613b      	str	r3, [r7, #16]
   return(result);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e5      	bne.n	8004ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d2a:	bf00      	nop
 8004d2c:	3754      	adds	r7, #84	@ 0x54
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d3c:	b0c0      	sub	sp, #256	@ 0x100
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d54:	68d9      	ldr	r1, [r3, #12]
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	ea40 0301 	orr.w	r3, r0, r1
 8004d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d90:	f021 010c 	bic.w	r1, r1, #12
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db2:	6999      	ldr	r1, [r3, #24]
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	ea40 0301 	orr.w	r3, r0, r1
 8004dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8005004 <UART_SetConfig+0x2cc>)
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d005      	beq.n	8004dd8 <UART_SetConfig+0xa0>
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8005008 <UART_SetConfig+0x2d0>)
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d104      	bne.n	8004de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dd8:	f7fe fbc0 	bl	800355c <HAL_RCC_GetPCLK2Freq>
 8004ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004de0:	e003      	b.n	8004dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004de2:	f7fe fba7 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 8004de6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df4:	f040 810c 	bne.w	8005010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	462b      	mov	r3, r5
 8004e0e:	1891      	adds	r1, r2, r2
 8004e10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e12:	415b      	adcs	r3, r3
 8004e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	eb12 0801 	adds.w	r8, r2, r1
 8004e20:	4629      	mov	r1, r5
 8004e22:	eb43 0901 	adc.w	r9, r3, r1
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3a:	4690      	mov	r8, r2
 8004e3c:	4699      	mov	r9, r3
 8004e3e:	4623      	mov	r3, r4
 8004e40:	eb18 0303 	adds.w	r3, r8, r3
 8004e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e48:	462b      	mov	r3, r5
 8004e4a:	eb49 0303 	adc.w	r3, r9, r3
 8004e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e66:	460b      	mov	r3, r1
 8004e68:	18db      	adds	r3, r3, r3
 8004e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	eb42 0303 	adc.w	r3, r2, r3
 8004e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e7c:	f7fb feee 	bl	8000c5c <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4b61      	ldr	r3, [pc, #388]	@ (800500c <UART_SetConfig+0x2d4>)
 8004e86:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	011c      	lsls	r4, r3, #4
 8004e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ed0:	4692      	mov	sl, r2
 8004ed2:	469b      	mov	fp, r3
 8004ed4:	4643      	mov	r3, r8
 8004ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8004eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004efc:	460b      	mov	r3, r1
 8004efe:	18db      	adds	r3, r3, r3
 8004f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f02:	4613      	mov	r3, r2
 8004f04:	eb42 0303 	adc.w	r3, r2, r3
 8004f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f12:	f7fb fea3 	bl	8000c5c <__aeabi_uldivmod>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800500c <UART_SetConfig+0x2d4>)
 8004f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2264      	movs	r2, #100	@ 0x64
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	1acb      	subs	r3, r1, r3
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f32:	4b36      	ldr	r3, [pc, #216]	@ (800500c <UART_SetConfig+0x2d4>)
 8004f34:	fba3 2302 	umull	r2, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f40:	441c      	add	r4, r3
 8004f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	1891      	adds	r1, r2, r2
 8004f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f5c:	415b      	adcs	r3, r3
 8004f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f64:	4641      	mov	r1, r8
 8004f66:	1851      	adds	r1, r2, r1
 8004f68:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	414b      	adcs	r3, r1
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	00cb      	lsls	r3, r1, #3
 8004f80:	4651      	mov	r1, sl
 8004f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f86:	4651      	mov	r1, sl
 8004f88:	00ca      	lsls	r2, r1, #3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4642      	mov	r2, r8
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f98:	464b      	mov	r3, r9
 8004f9a:	460a      	mov	r2, r1
 8004f9c:	eb42 0303 	adc.w	r3, r2, r3
 8004fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fb8:	460b      	mov	r3, r1
 8004fba:	18db      	adds	r3, r3, r3
 8004fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	eb42 0303 	adc.w	r3, r2, r3
 8004fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fce:	f7fb fe45 	bl	8000c5c <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800500c <UART_SetConfig+0x2d4>)
 8004fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	2164      	movs	r1, #100	@ 0x64
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	3332      	adds	r3, #50	@ 0x32
 8004fea:	4a08      	ldr	r2, [pc, #32]	@ (800500c <UART_SetConfig+0x2d4>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	f003 0207 	and.w	r2, r3, #7
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4422      	add	r2, r4
 8004ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005000:	e106      	b.n	8005210 <UART_SetConfig+0x4d8>
 8005002:	bf00      	nop
 8005004:	40011000 	.word	0x40011000
 8005008:	40011400 	.word	0x40011400
 800500c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005014:	2200      	movs	r2, #0
 8005016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800501a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800501e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005022:	4642      	mov	r2, r8
 8005024:	464b      	mov	r3, r9
 8005026:	1891      	adds	r1, r2, r2
 8005028:	6239      	str	r1, [r7, #32]
 800502a:	415b      	adcs	r3, r3
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
 800502e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005032:	4641      	mov	r1, r8
 8005034:	1854      	adds	r4, r2, r1
 8005036:	4649      	mov	r1, r9
 8005038:	eb43 0501 	adc.w	r5, r3, r1
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	00eb      	lsls	r3, r5, #3
 8005046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504a:	00e2      	lsls	r2, r4, #3
 800504c:	4614      	mov	r4, r2
 800504e:	461d      	mov	r5, r3
 8005050:	4643      	mov	r3, r8
 8005052:	18e3      	adds	r3, r4, r3
 8005054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005058:	464b      	mov	r3, r9
 800505a:	eb45 0303 	adc.w	r3, r5, r3
 800505e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800506e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800507e:	4629      	mov	r1, r5
 8005080:	008b      	lsls	r3, r1, #2
 8005082:	4621      	mov	r1, r4
 8005084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005088:	4621      	mov	r1, r4
 800508a:	008a      	lsls	r2, r1, #2
 800508c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005090:	f7fb fde4 	bl	8000c5c <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4b60      	ldr	r3, [pc, #384]	@ (800521c <UART_SetConfig+0x4e4>)
 800509a:	fba3 2302 	umull	r2, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	011c      	lsls	r4, r3, #4
 80050a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	1891      	adds	r1, r2, r2
 80050ba:	61b9      	str	r1, [r7, #24]
 80050bc:	415b      	adcs	r3, r3
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c4:	4641      	mov	r1, r8
 80050c6:	1851      	adds	r1, r2, r1
 80050c8:	6139      	str	r1, [r7, #16]
 80050ca:	4649      	mov	r1, r9
 80050cc:	414b      	adcs	r3, r1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050dc:	4659      	mov	r1, fp
 80050de:	00cb      	lsls	r3, r1, #3
 80050e0:	4651      	mov	r1, sl
 80050e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050e6:	4651      	mov	r1, sl
 80050e8:	00ca      	lsls	r2, r1, #3
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	4642      	mov	r2, r8
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050f8:	464b      	mov	r3, r9
 80050fa:	460a      	mov	r2, r1
 80050fc:	eb42 0303 	adc.w	r3, r2, r3
 8005100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800510e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800511c:	4649      	mov	r1, r9
 800511e:	008b      	lsls	r3, r1, #2
 8005120:	4641      	mov	r1, r8
 8005122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005126:	4641      	mov	r1, r8
 8005128:	008a      	lsls	r2, r1, #2
 800512a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800512e:	f7fb fd95 	bl	8000c5c <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4611      	mov	r1, r2
 8005138:	4b38      	ldr	r3, [pc, #224]	@ (800521c <UART_SetConfig+0x4e4>)
 800513a:	fba3 2301 	umull	r2, r3, r3, r1
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2264      	movs	r2, #100	@ 0x64
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	1acb      	subs	r3, r1, r3
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	3332      	adds	r3, #50	@ 0x32
 800514c:	4a33      	ldr	r2, [pc, #204]	@ (800521c <UART_SetConfig+0x4e4>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005158:	441c      	add	r4, r3
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800515e:	2200      	movs	r2, #0
 8005160:	673b      	str	r3, [r7, #112]	@ 0x70
 8005162:	677a      	str	r2, [r7, #116]	@ 0x74
 8005164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005168:	4642      	mov	r2, r8
 800516a:	464b      	mov	r3, r9
 800516c:	1891      	adds	r1, r2, r2
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	415b      	adcs	r3, r3
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005178:	4641      	mov	r1, r8
 800517a:	1851      	adds	r1, r2, r1
 800517c:	6039      	str	r1, [r7, #0]
 800517e:	4649      	mov	r1, r9
 8005180:	414b      	adcs	r3, r1
 8005182:	607b      	str	r3, [r7, #4]
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005190:	4659      	mov	r1, fp
 8005192:	00cb      	lsls	r3, r1, #3
 8005194:	4651      	mov	r1, sl
 8005196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800519a:	4651      	mov	r1, sl
 800519c:	00ca      	lsls	r2, r1, #3
 800519e:	4610      	mov	r0, r2
 80051a0:	4619      	mov	r1, r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	4642      	mov	r2, r8
 80051a6:	189b      	adds	r3, r3, r2
 80051a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051aa:	464b      	mov	r3, r9
 80051ac:	460a      	mov	r2, r1
 80051ae:	eb42 0303 	adc.w	r3, r2, r3
 80051b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80051be:	667a      	str	r2, [r7, #100]	@ 0x64
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051cc:	4649      	mov	r1, r9
 80051ce:	008b      	lsls	r3, r1, #2
 80051d0:	4641      	mov	r1, r8
 80051d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d6:	4641      	mov	r1, r8
 80051d8:	008a      	lsls	r2, r1, #2
 80051da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051de:	f7fb fd3d 	bl	8000c5c <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <UART_SetConfig+0x4e4>)
 80051e8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	2164      	movs	r1, #100	@ 0x64
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	3332      	adds	r3, #50	@ 0x32
 80051fa:	4a08      	ldr	r2, [pc, #32]	@ (800521c <UART_SetConfig+0x4e4>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	f003 020f 	and.w	r2, r3, #15
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4422      	add	r2, r4
 800520e:	609a      	str	r2, [r3, #8]
}
 8005210:	bf00      	nop
 8005212:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005216:	46bd      	mov	sp, r7
 8005218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800521c:	51eb851f 	.word	0x51eb851f

08005220 <arm_fir_init_f32>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	9d04      	ldr	r5, [sp, #16]
 8005224:	8001      	strh	r1, [r0, #0]
 8005226:	3d01      	subs	r5, #1
 8005228:	440d      	add	r5, r1
 800522a:	6082      	str	r2, [r0, #8]
 800522c:	4604      	mov	r4, r0
 800522e:	00aa      	lsls	r2, r5, #2
 8005230:	4618      	mov	r0, r3
 8005232:	2100      	movs	r1, #0
 8005234:	f000 faaa 	bl	800578c <memset>
 8005238:	6060      	str	r0, [r4, #4]
 800523a:	bd38      	pop	{r3, r4, r5, pc}

0800523c <arm_fir_f32>:
 800523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	ed2d 8b10 	vpush	{d8-d15}
 8005244:	b08b      	sub	sp, #44	@ 0x2c
 8005246:	f8b0 c000 	ldrh.w	ip, [r0]
 800524a:	9003      	str	r0, [sp, #12]
 800524c:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8005250:	f10c 4080 	add.w	r0, ip, #1073741824	@ 0x40000000
 8005254:	3801      	subs	r0, #1
 8005256:	9304      	str	r3, [sp, #16]
 8005258:	eb09 0580 	add.w	r5, r9, r0, lsl #2
 800525c:	08db      	lsrs	r3, r3, #3
 800525e:	9402      	str	r4, [sp, #8]
 8005260:	9500      	str	r5, [sp, #0]
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	f000 81f6 	beq.w	8005654 <arm_fir_f32+0x418>
 8005268:	469e      	mov	lr, r3
 800526a:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 800526e:	4620      	mov	r0, r4
 8005270:	015e      	lsls	r6, r3, #5
 8005272:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8005276:	3020      	adds	r0, #32
 8005278:	9605      	str	r6, [sp, #20]
 800527a:	9406      	str	r4, [sp, #24]
 800527c:	f00c 0a07 	and.w	sl, ip, #7
 8005280:	9007      	str	r0, [sp, #28]
 8005282:	f109 0b1c 	add.w	fp, r9, #28
 8005286:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800528a:	e9dd 8905 	ldrd	r8, r9, [sp, #20]
 800528e:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8005292:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 8005296:	4650      	mov	r0, sl
 8005298:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800529c:	f8cd c020 	str.w	ip, [sp, #32]
 80052a0:	f101 0620 	add.w	r6, r1, #32
 80052a4:	3520      	adds	r5, #32
 80052a6:	f102 0420 	add.w	r4, r2, #32
 80052aa:	469c      	mov	ip, r3
 80052ac:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80052b0:	f845 3c20 	str.w	r3, [r5, #-32]
 80052b4:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80052b8:	f845 3c1c 	str.w	r3, [r5, #-28]
 80052bc:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80052c0:	f845 3c18 	str.w	r3, [r5, #-24]
 80052c4:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80052c8:	f845 3c14 	str.w	r3, [r5, #-20]
 80052cc:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80052d0:	f845 3c10 	str.w	r3, [r5, #-16]
 80052d4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80052d8:	f845 3c0c 	str.w	r3, [r5, #-12]
 80052dc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80052e0:	f845 3c08 	str.w	r3, [r5, #-8]
 80052e4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80052e8:	f845 3c04 	str.w	r3, [r5, #-4]
 80052ec:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 80052f0:	ed1b 1a06 	vldr	s2, [fp, #-24]	@ 0xffffffe8
 80052f4:	ed5b 0a05 	vldr	s1, [fp, #-20]	@ 0xffffffec
 80052f8:	ed1b 0a04 	vldr	s0, [fp, #-16]
 80052fc:	ed1b 8a03 	vldr	s16, [fp, #-12]
 8005300:	ed5b 1a02 	vldr	s3, [fp, #-8]
 8005304:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8005308:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8005594 <arm_fir_f32+0x358>
 800530c:	465a      	mov	r2, fp
 800530e:	f1bc 0f00 	cmp.w	ip, #0
 8005312:	f000 8207 	beq.w	8005724 <arm_fir_f32+0x4e8>
 8005316:	f10b 0120 	add.w	r1, fp, #32
 800531a:	eef0 ba66 	vmov.f32	s23, s13
 800531e:	eeb0 6a66 	vmov.f32	s12, s13
 8005322:	eeb0 9a66 	vmov.f32	s18, s13
 8005326:	eef0 9a66 	vmov.f32	s19, s13
 800532a:	eeb0 aa66 	vmov.f32	s20, s13
 800532e:	eef0 aa66 	vmov.f32	s21, s13
 8005332:	eeb0 ba66 	vmov.f32	s22, s13
 8005336:	460a      	mov	r2, r1
 8005338:	4653      	mov	r3, sl
 800533a:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800533e:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 8005342:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 8005346:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800534a:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800534e:	ed53 ca04 	vldr	s25, [r3, #-16]
 8005352:	ed53 2a03 	vldr	s5, [r3, #-12]
 8005356:	ed13 4a02 	vldr	s8, [r3, #-8]
 800535a:	ed13 5a01 	vldr	s10, [r3, #-4]
 800535e:	ee67 fa02 	vmul.f32	s31, s14, s4
 8005362:	ee27 da01 	vmul.f32	s26, s14, s2
 8005366:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800536a:	ee27 ca20 	vmul.f32	s24, s14, s1
 800536e:	ee27 3a00 	vmul.f32	s6, s14, s0
 8005372:	ee67 3a08 	vmul.f32	s7, s14, s16
 8005376:	ee67 5a21 	vmul.f32	s11, s14, s3
 800537a:	ee27 fa28 	vmul.f32	s30, s14, s17
 800537e:	ee67 7a24 	vmul.f32	s15, s14, s9
 8005382:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8005386:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800538a:	ee6e fa81 	vmul.f32	s31, s29, s2
 800538e:	ee2e daa0 	vmul.f32	s26, s29, s1
 8005392:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8005396:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800539a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800539e:	ee2e ca80 	vmul.f32	s24, s29, s0
 80053a2:	ee2e 3a88 	vmul.f32	s6, s29, s16
 80053a6:	ee33 9a89 	vadd.f32	s18, s7, s18
 80053aa:	ee35 6a86 	vadd.f32	s12, s11, s12
 80053ae:	ee6e 3aa1 	vmul.f32	s7, s29, s3
 80053b2:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 80053b6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80053ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053be:	ee24 faae 	vmul.f32	s30, s9, s29
 80053c2:	ee6e ea82 	vmul.f32	s29, s29, s4
 80053c6:	ee2e 7a20 	vmul.f32	s14, s28, s1
 80053ca:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80053ce:	ed52 0a05 	vldr	s1, [r2, #-20]	@ 0xffffffec
 80053d2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80053d6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80053da:	ee2e da00 	vmul.f32	s26, s28, s0
 80053de:	ee2e ca08 	vmul.f32	s24, s28, s16
 80053e2:	ee73 9a29 	vadd.f32	s19, s6, s19
 80053e6:	ee33 9a89 	vadd.f32	s18, s7, s18
 80053ea:	ee2e 3a21 	vmul.f32	s6, s28, s3
 80053ee:	ee6e 3a28 	vmul.f32	s7, s28, s17
 80053f2:	ee35 6a86 	vadd.f32	s12, s11, s12
 80053f6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80053fa:	ee64 5a8e 	vmul.f32	s11, s9, s28
 80053fe:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8005402:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8005406:	ee2e ea01 	vmul.f32	s28, s28, s2
 800540a:	ee6d 6a80 	vmul.f32	s13, s27, s0
 800540e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005412:	ed12 0a04 	vldr	s0, [r2, #-16]
 8005416:	ee2d da88 	vmul.f32	s26, s27, s16
 800541a:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800541e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005422:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005426:	ee2d caa1 	vmul.f32	s24, s27, s3
 800542a:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800542e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005432:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005436:	ee64 3aad 	vmul.f32	s7, s9, s27
 800543a:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800543e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8005442:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8005446:	ee21 fa2d 	vmul.f32	s30, s2, s27
 800544a:	ee6d daa0 	vmul.f32	s27, s27, s1
 800544e:	ee6c fa88 	vmul.f32	s31, s25, s16
 8005452:	ee36 ba8b 	vadd.f32	s22, s13, s22
 8005456:	ed12 8a03 	vldr	s16, [r2, #-12]
 800545a:	ee3d da2a 	vadd.f32	s26, s26, s21
 800545e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005462:	ee6c aaa1 	vmul.f32	s21, s25, s3
 8005466:	ee2c caa8 	vmul.f32	s24, s25, s17
 800546a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800546e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005472:	ee24 3aac 	vmul.f32	s6, s9, s25
 8005476:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800547a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800547e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8005482:	ee61 5a2c 	vmul.f32	s11, s2, s25
 8005486:	ee20 faac 	vmul.f32	s30, s1, s25
 800548a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800548e:	ee6c ca80 	vmul.f32	s25, s25, s0
 8005492:	ee62 eaa1 	vmul.f32	s29, s5, s3
 8005496:	ee3a da8d 	vadd.f32	s26, s21, s26
 800549a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800549e:	ee62 aaa8 	vmul.f32	s21, s5, s17
 80054a2:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80054a6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80054aa:	ee73 9a29 	vadd.f32	s19, s6, s19
 80054ae:	ee24 caa2 	vmul.f32	s24, s9, s5
 80054b2:	ee22 3a22 	vmul.f32	s6, s4, s5
 80054b6:	ee33 9a89 	vadd.f32	s18, s7, s18
 80054ba:	ee35 6a86 	vadd.f32	s12, s11, s12
 80054be:	ee61 3a22 	vmul.f32	s7, s2, s5
 80054c2:	ee60 5aa2 	vmul.f32	s11, s1, s5
 80054c6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80054ca:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 80054ce:	ee20 fa22 	vmul.f32	s30, s0, s5
 80054d2:	ee62 2a88 	vmul.f32	s5, s5, s16
 80054d6:	ee7e fa8b 	vadd.f32	s31, s29, s22
 80054da:	ee72 7aa7 	vadd.f32	s15, s5, s15
 80054de:	ee24 ba28 	vmul.f32	s22, s8, s17
 80054e2:	ee7a aa8d 	vadd.f32	s21, s21, s26
 80054e6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80054ea:	ee24 da84 	vmul.f32	s26, s9, s8
 80054ee:	ee22 ca04 	vmul.f32	s24, s4, s8
 80054f2:	ee73 9a29 	vadd.f32	s19, s6, s19
 80054f6:	ee33 9a89 	vadd.f32	s18, s7, s18
 80054fa:	ee21 3a04 	vmul.f32	s6, s2, s8
 80054fe:	ee60 3a84 	vmul.f32	s7, s1, s8
 8005502:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005506:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800550a:	ee60 5a04 	vmul.f32	s11, s0, s8
 800550e:	ee28 7a04 	vmul.f32	s14, s16, s8
 8005512:	ee64 6a21 	vmul.f32	s13, s8, s3
 8005516:	ed52 8a01 	vldr	s17, [r2, #-4]
 800551a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800551e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005522:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005526:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800552a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800552e:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8005532:	ee64 4a85 	vmul.f32	s9, s9, s10
 8005536:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800553a:	ee22 4a05 	vmul.f32	s8, s4, s10
 800553e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005542:	ee61 2a05 	vmul.f32	s5, s2, s10
 8005546:	ee20 3a85 	vmul.f32	s6, s1, s10
 800554a:	ee60 3a05 	vmul.f32	s7, s0, s10
 800554e:	ee68 5a05 	vmul.f32	s11, s16, s10
 8005552:	ee61 ba85 	vmul.f32	s23, s3, s10
 8005556:	ee65 7a28 	vmul.f32	s15, s10, s17
 800555a:	3320      	adds	r3, #32
 800555c:	429f      	cmp	r7, r3
 800555e:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8005562:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8005566:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800556a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800556e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005572:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005576:	ee7b ba87 	vadd.f32	s23, s23, s14
 800557a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800557e:	f102 0220 	add.w	r2, r2, #32
 8005582:	f47f aeda 	bne.w	800533a <arm_fir_f32+0xfe>
 8005586:	eb0b 0208 	add.w	r2, fp, r8
 800558a:	46cb      	mov	fp, r9
 800558c:	b3c0      	cbz	r0, 8005600 <arm_fir_f32+0x3c4>
 800558e:	4603      	mov	r3, r0
 8005590:	e004      	b.n	800559c <arm_fir_f32+0x360>
 8005592:	bf00      	nop
 8005594:	00000000 	.word	0x00000000
 8005598:	eef0 8a65 	vmov.f32	s17, s11
 800559c:	ecfb 7a01 	vldmia	fp!, {s15}
 80055a0:	ecf2 5a01 	vldmia	r2!, {s11}
 80055a4:	ee27 2a82 	vmul.f32	s4, s15, s4
 80055a8:	ee67 2a81 	vmul.f32	s5, s15, s2
 80055ac:	ee27 3aa0 	vmul.f32	s6, s15, s1
 80055b0:	ee67 3a80 	vmul.f32	s7, s15, s0
 80055b4:	ee27 4a88 	vmul.f32	s8, s15, s16
 80055b8:	ee67 4aa1 	vmul.f32	s9, s15, s3
 80055bc:	ee28 5aa7 	vmul.f32	s10, s17, s15
 80055c0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80055c4:	3b01      	subs	r3, #1
 80055c6:	ee3b ba02 	vadd.f32	s22, s22, s4
 80055ca:	ee7a aaa2 	vadd.f32	s21, s21, s5
 80055ce:	eeb0 2a41 	vmov.f32	s4, s2
 80055d2:	ee3a aa03 	vadd.f32	s20, s20, s6
 80055d6:	eeb0 1a60 	vmov.f32	s2, s1
 80055da:	ee79 9aa3 	vadd.f32	s19, s19, s7
 80055de:	eef0 0a40 	vmov.f32	s1, s0
 80055e2:	ee39 9a04 	vadd.f32	s18, s18, s8
 80055e6:	eeb0 0a48 	vmov.f32	s0, s16
 80055ea:	ee36 6a24 	vadd.f32	s12, s12, s9
 80055ee:	eeb0 8a61 	vmov.f32	s16, s3
 80055f2:	ee7b ba85 	vadd.f32	s23, s23, s10
 80055f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80055fa:	eef0 1a68 	vmov.f32	s3, s17
 80055fe:	d1cb      	bne.n	8005598 <arm_fir_f32+0x35c>
 8005600:	f1be 0e01 	subs.w	lr, lr, #1
 8005604:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 8005608:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800560c:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 8005610:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 8005614:	ed04 9a04 	vstr	s18, [r4, #-16]
 8005618:	ed04 6a03 	vstr	s12, [r4, #-12]
 800561c:	ed44 ba02 	vstr	s23, [r4, #-8]
 8005620:	ed44 6a01 	vstr	s13, [r4, #-4]
 8005624:	f106 0620 	add.w	r6, r6, #32
 8005628:	f105 0520 	add.w	r5, r5, #32
 800562c:	f104 0420 	add.w	r4, r4, #32
 8005630:	468b      	mov	fp, r1
 8005632:	f47f ae3b 	bne.w	80052ac <arm_fir_f32+0x70>
 8005636:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800563a:	e9dd c908 	ldrd	ip, r9, [sp, #32]
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	9800      	ldr	r0, [sp, #0]
 8005642:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8005646:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 800564a:	eb09 1943 	add.w	r9, r9, r3, lsl #5
 800564e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	9b04      	ldr	r3, [sp, #16]
 8005656:	f013 0607 	ands.w	r6, r3, #7
 800565a:	d026      	beq.n	80056aa <arm_fir_f32+0x46e>
 800565c:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8005660:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005664:	4633      	mov	r3, r6
 8005666:	9f00      	ldr	r7, [sp, #0]
 8005668:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800566c:	4666      	mov	r6, ip
 800566e:	464d      	mov	r5, r9
 8005670:	469c      	mov	ip, r3
 8005672:	f851 3b04 	ldr.w	r3, [r1], #4
 8005676:	f847 3b04 	str.w	r3, [r7], #4
 800567a:	ed1f 7a3a 	vldr	s14, [pc, #-232]	@ 8005594 <arm_fir_f32+0x358>
 800567e:	b166      	cbz	r6, 800569a <arm_fir_f32+0x45e>
 8005680:	4633      	mov	r3, r6
 8005682:	4644      	mov	r4, r8
 8005684:	4628      	mov	r0, r5
 8005686:	ecf0 7a01 	vldmia	r0!, {s15}
 800568a:	ecf4 6a01 	vldmia	r4!, {s13}
 800568e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005692:	3b01      	subs	r3, #1
 8005694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005698:	d1f5      	bne.n	8005686 <arm_fir_f32+0x44a>
 800569a:	4561      	cmp	r1, ip
 800569c:	eca2 7a01 	vstmia	r2!, {s14}
 80056a0:	f105 0504 	add.w	r5, r5, #4
 80056a4:	d1e5      	bne.n	8005672 <arm_fir_f32+0x436>
 80056a6:	46b4      	mov	ip, r6
 80056a8:	44f1      	add	r9, lr
 80056aa:	9b03      	ldr	r3, [sp, #12]
 80056ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80056b0:	ea5f 059c 	movs.w	r5, ip, lsr #2
 80056b4:	685c      	ldr	r4, [r3, #4]
 80056b6:	d01e      	beq.n	80056f6 <arm_fir_f32+0x4ba>
 80056b8:	f109 0210 	add.w	r2, r9, #16
 80056bc:	f104 0310 	add.w	r3, r4, #16
 80056c0:	4629      	mov	r1, r5
 80056c2:	f852 0c10 	ldr.w	r0, [r2, #-16]
 80056c6:	f843 0c10 	str.w	r0, [r3, #-16]
 80056ca:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 80056ce:	f843 0c0c 	str.w	r0, [r3, #-12]
 80056d2:	f852 0c08 	ldr.w	r0, [r2, #-8]
 80056d6:	f843 0c08 	str.w	r0, [r3, #-8]
 80056da:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80056de:	f843 0c04 	str.w	r0, [r3, #-4]
 80056e2:	3901      	subs	r1, #1
 80056e4:	f102 0210 	add.w	r2, r2, #16
 80056e8:	f103 0310 	add.w	r3, r3, #16
 80056ec:	d1e9      	bne.n	80056c2 <arm_fir_f32+0x486>
 80056ee:	eb09 1905 	add.w	r9, r9, r5, lsl #4
 80056f2:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80056f6:	f01c 0c03 	ands.w	ip, ip, #3
 80056fa:	d00e      	beq.n	800571a <arm_fir_f32+0x4de>
 80056fc:	f8d9 3000 	ldr.w	r3, [r9]
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	f1bc 0c01 	subs.w	ip, ip, #1
 8005706:	d008      	beq.n	800571a <arm_fir_f32+0x4de>
 8005708:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800570c:	6063      	str	r3, [r4, #4]
 800570e:	f1bc 0f01 	cmp.w	ip, #1
 8005712:	bf1c      	itt	ne
 8005714:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8005718:	60a3      	strne	r3, [r4, #8]
 800571a:	b00b      	add	sp, #44	@ 0x2c
 800571c:	ecbd 8b10 	vpop	{d8-d15}
 8005720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005724:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005728:	eef0 ba66 	vmov.f32	s23, s13
 800572c:	eeb0 6a66 	vmov.f32	s12, s13
 8005730:	eeb0 9a66 	vmov.f32	s18, s13
 8005734:	eef0 9a66 	vmov.f32	s19, s13
 8005738:	eeb0 aa66 	vmov.f32	s20, s13
 800573c:	eef0 aa66 	vmov.f32	s21, s13
 8005740:	eeb0 ba66 	vmov.f32	s22, s13
 8005744:	f102 0120 	add.w	r1, r2, #32
 8005748:	e720      	b.n	800558c <arm_fir_f32+0x350>
 800574a:	bf00      	nop

0800574c <siprintf>:
 800574c:	b40e      	push	{r1, r2, r3}
 800574e:	b500      	push	{lr}
 8005750:	b09c      	sub	sp, #112	@ 0x70
 8005752:	ab1d      	add	r3, sp, #116	@ 0x74
 8005754:	9002      	str	r0, [sp, #8]
 8005756:	9006      	str	r0, [sp, #24]
 8005758:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800575c:	4809      	ldr	r0, [pc, #36]	@ (8005784 <siprintf+0x38>)
 800575e:	9107      	str	r1, [sp, #28]
 8005760:	9104      	str	r1, [sp, #16]
 8005762:	4909      	ldr	r1, [pc, #36]	@ (8005788 <siprintf+0x3c>)
 8005764:	f853 2b04 	ldr.w	r2, [r3], #4
 8005768:	9105      	str	r1, [sp, #20]
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	a902      	add	r1, sp, #8
 8005770:	f000 f994 	bl	8005a9c <_svfiprintf_r>
 8005774:	9b02      	ldr	r3, [sp, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	b01c      	add	sp, #112	@ 0x70
 800577c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005780:	b003      	add	sp, #12
 8005782:	4770      	bx	lr
 8005784:	20000018 	.word	0x20000018
 8005788:	ffff0208 	.word	0xffff0208

0800578c <memset>:
 800578c:	4402      	add	r2, r0
 800578e:	4603      	mov	r3, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <__errno>:
 800579c:	4b01      	ldr	r3, [pc, #4]	@ (80057a4 <__errno+0x8>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000018 	.word	0x20000018

080057a8 <__libc_init_array>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	4d0d      	ldr	r5, [pc, #52]	@ (80057e0 <__libc_init_array+0x38>)
 80057ac:	4c0d      	ldr	r4, [pc, #52]	@ (80057e4 <__libc_init_array+0x3c>)
 80057ae:	1b64      	subs	r4, r4, r5
 80057b0:	10a4      	asrs	r4, r4, #2
 80057b2:	2600      	movs	r6, #0
 80057b4:	42a6      	cmp	r6, r4
 80057b6:	d109      	bne.n	80057cc <__libc_init_array+0x24>
 80057b8:	4d0b      	ldr	r5, [pc, #44]	@ (80057e8 <__libc_init_array+0x40>)
 80057ba:	4c0c      	ldr	r4, [pc, #48]	@ (80057ec <__libc_init_array+0x44>)
 80057bc:	f001 fcec 	bl	8007198 <_init>
 80057c0:	1b64      	subs	r4, r4, r5
 80057c2:	10a4      	asrs	r4, r4, #2
 80057c4:	2600      	movs	r6, #0
 80057c6:	42a6      	cmp	r6, r4
 80057c8:	d105      	bne.n	80057d6 <__libc_init_array+0x2e>
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d0:	4798      	blx	r3
 80057d2:	3601      	adds	r6, #1
 80057d4:	e7ee      	b.n	80057b4 <__libc_init_array+0xc>
 80057d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057da:	4798      	blx	r3
 80057dc:	3601      	adds	r6, #1
 80057de:	e7f2      	b.n	80057c6 <__libc_init_array+0x1e>
 80057e0:	080073f0 	.word	0x080073f0
 80057e4:	080073f0 	.word	0x080073f0
 80057e8:	080073f0 	.word	0x080073f0
 80057ec:	080073f4 	.word	0x080073f4

080057f0 <__retarget_lock_acquire_recursive>:
 80057f0:	4770      	bx	lr

080057f2 <__retarget_lock_release_recursive>:
 80057f2:	4770      	bx	lr

080057f4 <_free_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4605      	mov	r5, r0
 80057f8:	2900      	cmp	r1, #0
 80057fa:	d041      	beq.n	8005880 <_free_r+0x8c>
 80057fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005800:	1f0c      	subs	r4, r1, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	bfb8      	it	lt
 8005806:	18e4      	addlt	r4, r4, r3
 8005808:	f000 f8e0 	bl	80059cc <__malloc_lock>
 800580c:	4a1d      	ldr	r2, [pc, #116]	@ (8005884 <_free_r+0x90>)
 800580e:	6813      	ldr	r3, [r2, #0]
 8005810:	b933      	cbnz	r3, 8005820 <_free_r+0x2c>
 8005812:	6063      	str	r3, [r4, #4]
 8005814:	6014      	str	r4, [r2, #0]
 8005816:	4628      	mov	r0, r5
 8005818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800581c:	f000 b8dc 	b.w	80059d8 <__malloc_unlock>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d908      	bls.n	8005836 <_free_r+0x42>
 8005824:	6820      	ldr	r0, [r4, #0]
 8005826:	1821      	adds	r1, r4, r0
 8005828:	428b      	cmp	r3, r1
 800582a:	bf01      	itttt	eq
 800582c:	6819      	ldreq	r1, [r3, #0]
 800582e:	685b      	ldreq	r3, [r3, #4]
 8005830:	1809      	addeq	r1, r1, r0
 8005832:	6021      	streq	r1, [r4, #0]
 8005834:	e7ed      	b.n	8005812 <_free_r+0x1e>
 8005836:	461a      	mov	r2, r3
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	b10b      	cbz	r3, 8005840 <_free_r+0x4c>
 800583c:	42a3      	cmp	r3, r4
 800583e:	d9fa      	bls.n	8005836 <_free_r+0x42>
 8005840:	6811      	ldr	r1, [r2, #0]
 8005842:	1850      	adds	r0, r2, r1
 8005844:	42a0      	cmp	r0, r4
 8005846:	d10b      	bne.n	8005860 <_free_r+0x6c>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	4401      	add	r1, r0
 800584c:	1850      	adds	r0, r2, r1
 800584e:	4283      	cmp	r3, r0
 8005850:	6011      	str	r1, [r2, #0]
 8005852:	d1e0      	bne.n	8005816 <_free_r+0x22>
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	6053      	str	r3, [r2, #4]
 800585a:	4408      	add	r0, r1
 800585c:	6010      	str	r0, [r2, #0]
 800585e:	e7da      	b.n	8005816 <_free_r+0x22>
 8005860:	d902      	bls.n	8005868 <_free_r+0x74>
 8005862:	230c      	movs	r3, #12
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	e7d6      	b.n	8005816 <_free_r+0x22>
 8005868:	6820      	ldr	r0, [r4, #0]
 800586a:	1821      	adds	r1, r4, r0
 800586c:	428b      	cmp	r3, r1
 800586e:	bf04      	itt	eq
 8005870:	6819      	ldreq	r1, [r3, #0]
 8005872:	685b      	ldreq	r3, [r3, #4]
 8005874:	6063      	str	r3, [r4, #4]
 8005876:	bf04      	itt	eq
 8005878:	1809      	addeq	r1, r1, r0
 800587a:	6021      	streq	r1, [r4, #0]
 800587c:	6054      	str	r4, [r2, #4]
 800587e:	e7ca      	b.n	8005816 <_free_r+0x22>
 8005880:	bd38      	pop	{r3, r4, r5, pc}
 8005882:	bf00      	nop
 8005884:	20000490 	.word	0x20000490

08005888 <sbrk_aligned>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4e0f      	ldr	r6, [pc, #60]	@ (80058c8 <sbrk_aligned+0x40>)
 800588c:	460c      	mov	r4, r1
 800588e:	6831      	ldr	r1, [r6, #0]
 8005890:	4605      	mov	r5, r0
 8005892:	b911      	cbnz	r1, 800589a <sbrk_aligned+0x12>
 8005894:	f000 fba6 	bl	8005fe4 <_sbrk_r>
 8005898:	6030      	str	r0, [r6, #0]
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f000 fba1 	bl	8005fe4 <_sbrk_r>
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	d103      	bne.n	80058ae <sbrk_aligned+0x26>
 80058a6:	f04f 34ff 	mov.w	r4, #4294967295
 80058aa:	4620      	mov	r0, r4
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	1cc4      	adds	r4, r0, #3
 80058b0:	f024 0403 	bic.w	r4, r4, #3
 80058b4:	42a0      	cmp	r0, r4
 80058b6:	d0f8      	beq.n	80058aa <sbrk_aligned+0x22>
 80058b8:	1a21      	subs	r1, r4, r0
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 fb92 	bl	8005fe4 <_sbrk_r>
 80058c0:	3001      	adds	r0, #1
 80058c2:	d1f2      	bne.n	80058aa <sbrk_aligned+0x22>
 80058c4:	e7ef      	b.n	80058a6 <sbrk_aligned+0x1e>
 80058c6:	bf00      	nop
 80058c8:	2000048c 	.word	0x2000048c

080058cc <_malloc_r>:
 80058cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d0:	1ccd      	adds	r5, r1, #3
 80058d2:	f025 0503 	bic.w	r5, r5, #3
 80058d6:	3508      	adds	r5, #8
 80058d8:	2d0c      	cmp	r5, #12
 80058da:	bf38      	it	cc
 80058dc:	250c      	movcc	r5, #12
 80058de:	2d00      	cmp	r5, #0
 80058e0:	4606      	mov	r6, r0
 80058e2:	db01      	blt.n	80058e8 <_malloc_r+0x1c>
 80058e4:	42a9      	cmp	r1, r5
 80058e6:	d904      	bls.n	80058f2 <_malloc_r+0x26>
 80058e8:	230c      	movs	r3, #12
 80058ea:	6033      	str	r3, [r6, #0]
 80058ec:	2000      	movs	r0, #0
 80058ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059c8 <_malloc_r+0xfc>
 80058f6:	f000 f869 	bl	80059cc <__malloc_lock>
 80058fa:	f8d8 3000 	ldr.w	r3, [r8]
 80058fe:	461c      	mov	r4, r3
 8005900:	bb44      	cbnz	r4, 8005954 <_malloc_r+0x88>
 8005902:	4629      	mov	r1, r5
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff ffbf 	bl	8005888 <sbrk_aligned>
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	4604      	mov	r4, r0
 800590e:	d158      	bne.n	80059c2 <_malloc_r+0xf6>
 8005910:	f8d8 4000 	ldr.w	r4, [r8]
 8005914:	4627      	mov	r7, r4
 8005916:	2f00      	cmp	r7, #0
 8005918:	d143      	bne.n	80059a2 <_malloc_r+0xd6>
 800591a:	2c00      	cmp	r4, #0
 800591c:	d04b      	beq.n	80059b6 <_malloc_r+0xea>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	4639      	mov	r1, r7
 8005922:	4630      	mov	r0, r6
 8005924:	eb04 0903 	add.w	r9, r4, r3
 8005928:	f000 fb5c 	bl	8005fe4 <_sbrk_r>
 800592c:	4581      	cmp	r9, r0
 800592e:	d142      	bne.n	80059b6 <_malloc_r+0xea>
 8005930:	6821      	ldr	r1, [r4, #0]
 8005932:	1a6d      	subs	r5, r5, r1
 8005934:	4629      	mov	r1, r5
 8005936:	4630      	mov	r0, r6
 8005938:	f7ff ffa6 	bl	8005888 <sbrk_aligned>
 800593c:	3001      	adds	r0, #1
 800593e:	d03a      	beq.n	80059b6 <_malloc_r+0xea>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	442b      	add	r3, r5
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	f8d8 3000 	ldr.w	r3, [r8]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	bb62      	cbnz	r2, 80059a8 <_malloc_r+0xdc>
 800594e:	f8c8 7000 	str.w	r7, [r8]
 8005952:	e00f      	b.n	8005974 <_malloc_r+0xa8>
 8005954:	6822      	ldr	r2, [r4, #0]
 8005956:	1b52      	subs	r2, r2, r5
 8005958:	d420      	bmi.n	800599c <_malloc_r+0xd0>
 800595a:	2a0b      	cmp	r2, #11
 800595c:	d917      	bls.n	800598e <_malloc_r+0xc2>
 800595e:	1961      	adds	r1, r4, r5
 8005960:	42a3      	cmp	r3, r4
 8005962:	6025      	str	r5, [r4, #0]
 8005964:	bf18      	it	ne
 8005966:	6059      	strne	r1, [r3, #4]
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	bf08      	it	eq
 800596c:	f8c8 1000 	streq.w	r1, [r8]
 8005970:	5162      	str	r2, [r4, r5]
 8005972:	604b      	str	r3, [r1, #4]
 8005974:	4630      	mov	r0, r6
 8005976:	f000 f82f 	bl	80059d8 <__malloc_unlock>
 800597a:	f104 000b 	add.w	r0, r4, #11
 800597e:	1d23      	adds	r3, r4, #4
 8005980:	f020 0007 	bic.w	r0, r0, #7
 8005984:	1ac2      	subs	r2, r0, r3
 8005986:	bf1c      	itt	ne
 8005988:	1a1b      	subne	r3, r3, r0
 800598a:	50a3      	strne	r3, [r4, r2]
 800598c:	e7af      	b.n	80058ee <_malloc_r+0x22>
 800598e:	6862      	ldr	r2, [r4, #4]
 8005990:	42a3      	cmp	r3, r4
 8005992:	bf0c      	ite	eq
 8005994:	f8c8 2000 	streq.w	r2, [r8]
 8005998:	605a      	strne	r2, [r3, #4]
 800599a:	e7eb      	b.n	8005974 <_malloc_r+0xa8>
 800599c:	4623      	mov	r3, r4
 800599e:	6864      	ldr	r4, [r4, #4]
 80059a0:	e7ae      	b.n	8005900 <_malloc_r+0x34>
 80059a2:	463c      	mov	r4, r7
 80059a4:	687f      	ldr	r7, [r7, #4]
 80059a6:	e7b6      	b.n	8005916 <_malloc_r+0x4a>
 80059a8:	461a      	mov	r2, r3
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	d1fb      	bne.n	80059a8 <_malloc_r+0xdc>
 80059b0:	2300      	movs	r3, #0
 80059b2:	6053      	str	r3, [r2, #4]
 80059b4:	e7de      	b.n	8005974 <_malloc_r+0xa8>
 80059b6:	230c      	movs	r3, #12
 80059b8:	6033      	str	r3, [r6, #0]
 80059ba:	4630      	mov	r0, r6
 80059bc:	f000 f80c 	bl	80059d8 <__malloc_unlock>
 80059c0:	e794      	b.n	80058ec <_malloc_r+0x20>
 80059c2:	6005      	str	r5, [r0, #0]
 80059c4:	e7d6      	b.n	8005974 <_malloc_r+0xa8>
 80059c6:	bf00      	nop
 80059c8:	20000490 	.word	0x20000490

080059cc <__malloc_lock>:
 80059cc:	4801      	ldr	r0, [pc, #4]	@ (80059d4 <__malloc_lock+0x8>)
 80059ce:	f7ff bf0f 	b.w	80057f0 <__retarget_lock_acquire_recursive>
 80059d2:	bf00      	nop
 80059d4:	20000488 	.word	0x20000488

080059d8 <__malloc_unlock>:
 80059d8:	4801      	ldr	r0, [pc, #4]	@ (80059e0 <__malloc_unlock+0x8>)
 80059da:	f7ff bf0a 	b.w	80057f2 <__retarget_lock_release_recursive>
 80059de:	bf00      	nop
 80059e0:	20000488 	.word	0x20000488

080059e4 <__ssputs_r>:
 80059e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	688e      	ldr	r6, [r1, #8]
 80059ea:	461f      	mov	r7, r3
 80059ec:	42be      	cmp	r6, r7
 80059ee:	680b      	ldr	r3, [r1, #0]
 80059f0:	4682      	mov	sl, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	4690      	mov	r8, r2
 80059f6:	d82d      	bhi.n	8005a54 <__ssputs_r+0x70>
 80059f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a00:	d026      	beq.n	8005a50 <__ssputs_r+0x6c>
 8005a02:	6965      	ldr	r5, [r4, #20]
 8005a04:	6909      	ldr	r1, [r1, #16]
 8005a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a0a:	eba3 0901 	sub.w	r9, r3, r1
 8005a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a12:	1c7b      	adds	r3, r7, #1
 8005a14:	444b      	add	r3, r9
 8005a16:	106d      	asrs	r5, r5, #1
 8005a18:	429d      	cmp	r5, r3
 8005a1a:	bf38      	it	cc
 8005a1c:	461d      	movcc	r5, r3
 8005a1e:	0553      	lsls	r3, r2, #21
 8005a20:	d527      	bpl.n	8005a72 <__ssputs_r+0x8e>
 8005a22:	4629      	mov	r1, r5
 8005a24:	f7ff ff52 	bl	80058cc <_malloc_r>
 8005a28:	4606      	mov	r6, r0
 8005a2a:	b360      	cbz	r0, 8005a86 <__ssputs_r+0xa2>
 8005a2c:	6921      	ldr	r1, [r4, #16]
 8005a2e:	464a      	mov	r2, r9
 8005a30:	f000 fae8 	bl	8006004 <memcpy>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a3e:	81a3      	strh	r3, [r4, #12]
 8005a40:	6126      	str	r6, [r4, #16]
 8005a42:	6165      	str	r5, [r4, #20]
 8005a44:	444e      	add	r6, r9
 8005a46:	eba5 0509 	sub.w	r5, r5, r9
 8005a4a:	6026      	str	r6, [r4, #0]
 8005a4c:	60a5      	str	r5, [r4, #8]
 8005a4e:	463e      	mov	r6, r7
 8005a50:	42be      	cmp	r6, r7
 8005a52:	d900      	bls.n	8005a56 <__ssputs_r+0x72>
 8005a54:	463e      	mov	r6, r7
 8005a56:	6820      	ldr	r0, [r4, #0]
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	f000 faa8 	bl	8005fb0 <memmove>
 8005a60:	68a3      	ldr	r3, [r4, #8]
 8005a62:	1b9b      	subs	r3, r3, r6
 8005a64:	60a3      	str	r3, [r4, #8]
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	4433      	add	r3, r6
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a72:	462a      	mov	r2, r5
 8005a74:	f000 fad4 	bl	8006020 <_realloc_r>
 8005a78:	4606      	mov	r6, r0
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d1e0      	bne.n	8005a40 <__ssputs_r+0x5c>
 8005a7e:	6921      	ldr	r1, [r4, #16]
 8005a80:	4650      	mov	r0, sl
 8005a82:	f7ff feb7 	bl	80057f4 <_free_r>
 8005a86:	230c      	movs	r3, #12
 8005a88:	f8ca 3000 	str.w	r3, [sl]
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a92:	81a3      	strh	r3, [r4, #12]
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	e7e9      	b.n	8005a6e <__ssputs_r+0x8a>
	...

08005a9c <_svfiprintf_r>:
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	4698      	mov	r8, r3
 8005aa2:	898b      	ldrh	r3, [r1, #12]
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	b09d      	sub	sp, #116	@ 0x74
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	460d      	mov	r5, r1
 8005aac:	4614      	mov	r4, r2
 8005aae:	d510      	bpl.n	8005ad2 <_svfiprintf_r+0x36>
 8005ab0:	690b      	ldr	r3, [r1, #16]
 8005ab2:	b973      	cbnz	r3, 8005ad2 <_svfiprintf_r+0x36>
 8005ab4:	2140      	movs	r1, #64	@ 0x40
 8005ab6:	f7ff ff09 	bl	80058cc <_malloc_r>
 8005aba:	6028      	str	r0, [r5, #0]
 8005abc:	6128      	str	r0, [r5, #16]
 8005abe:	b930      	cbnz	r0, 8005ace <_svfiprintf_r+0x32>
 8005ac0:	230c      	movs	r3, #12
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	b01d      	add	sp, #116	@ 0x74
 8005aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ace:	2340      	movs	r3, #64	@ 0x40
 8005ad0:	616b      	str	r3, [r5, #20]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ad6:	2320      	movs	r3, #32
 8005ad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ae0:	2330      	movs	r3, #48	@ 0x30
 8005ae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c80 <_svfiprintf_r+0x1e4>
 8005ae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005aea:	f04f 0901 	mov.w	r9, #1
 8005aee:	4623      	mov	r3, r4
 8005af0:	469a      	mov	sl, r3
 8005af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005af6:	b10a      	cbz	r2, 8005afc <_svfiprintf_r+0x60>
 8005af8:	2a25      	cmp	r2, #37	@ 0x25
 8005afa:	d1f9      	bne.n	8005af0 <_svfiprintf_r+0x54>
 8005afc:	ebba 0b04 	subs.w	fp, sl, r4
 8005b00:	d00b      	beq.n	8005b1a <_svfiprintf_r+0x7e>
 8005b02:	465b      	mov	r3, fp
 8005b04:	4622      	mov	r2, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	4638      	mov	r0, r7
 8005b0a:	f7ff ff6b 	bl	80059e4 <__ssputs_r>
 8005b0e:	3001      	adds	r0, #1
 8005b10:	f000 80a7 	beq.w	8005c62 <_svfiprintf_r+0x1c6>
 8005b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b16:	445a      	add	r2, fp
 8005b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 809f 	beq.w	8005c62 <_svfiprintf_r+0x1c6>
 8005b24:	2300      	movs	r3, #0
 8005b26:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b2e:	f10a 0a01 	add.w	sl, sl, #1
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	9307      	str	r3, [sp, #28]
 8005b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b3c:	4654      	mov	r4, sl
 8005b3e:	2205      	movs	r2, #5
 8005b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b44:	484e      	ldr	r0, [pc, #312]	@ (8005c80 <_svfiprintf_r+0x1e4>)
 8005b46:	f7fa fb6b 	bl	8000220 <memchr>
 8005b4a:	9a04      	ldr	r2, [sp, #16]
 8005b4c:	b9d8      	cbnz	r0, 8005b86 <_svfiprintf_r+0xea>
 8005b4e:	06d0      	lsls	r0, r2, #27
 8005b50:	bf44      	itt	mi
 8005b52:	2320      	movmi	r3, #32
 8005b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b58:	0711      	lsls	r1, r2, #28
 8005b5a:	bf44      	itt	mi
 8005b5c:	232b      	movmi	r3, #43	@ 0x2b
 8005b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b62:	f89a 3000 	ldrb.w	r3, [sl]
 8005b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b68:	d015      	beq.n	8005b96 <_svfiprintf_r+0xfa>
 8005b6a:	9a07      	ldr	r2, [sp, #28]
 8005b6c:	4654      	mov	r4, sl
 8005b6e:	2000      	movs	r0, #0
 8005b70:	f04f 0c0a 	mov.w	ip, #10
 8005b74:	4621      	mov	r1, r4
 8005b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b7a:	3b30      	subs	r3, #48	@ 0x30
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	d94b      	bls.n	8005c18 <_svfiprintf_r+0x17c>
 8005b80:	b1b0      	cbz	r0, 8005bb0 <_svfiprintf_r+0x114>
 8005b82:	9207      	str	r2, [sp, #28]
 8005b84:	e014      	b.n	8005bb0 <_svfiprintf_r+0x114>
 8005b86:	eba0 0308 	sub.w	r3, r0, r8
 8005b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	46a2      	mov	sl, r4
 8005b94:	e7d2      	b.n	8005b3c <_svfiprintf_r+0xa0>
 8005b96:	9b03      	ldr	r3, [sp, #12]
 8005b98:	1d19      	adds	r1, r3, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	9103      	str	r1, [sp, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	bfbb      	ittet	lt
 8005ba2:	425b      	neglt	r3, r3
 8005ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ba8:	9307      	strge	r3, [sp, #28]
 8005baa:	9307      	strlt	r3, [sp, #28]
 8005bac:	bfb8      	it	lt
 8005bae:	9204      	strlt	r2, [sp, #16]
 8005bb0:	7823      	ldrb	r3, [r4, #0]
 8005bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bb4:	d10a      	bne.n	8005bcc <_svfiprintf_r+0x130>
 8005bb6:	7863      	ldrb	r3, [r4, #1]
 8005bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bba:	d132      	bne.n	8005c22 <_svfiprintf_r+0x186>
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	1d1a      	adds	r2, r3, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	9203      	str	r2, [sp, #12]
 8005bc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bc8:	3402      	adds	r4, #2
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c90 <_svfiprintf_r+0x1f4>
 8005bd0:	7821      	ldrb	r1, [r4, #0]
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	4650      	mov	r0, sl
 8005bd6:	f7fa fb23 	bl	8000220 <memchr>
 8005bda:	b138      	cbz	r0, 8005bec <_svfiprintf_r+0x150>
 8005bdc:	9b04      	ldr	r3, [sp, #16]
 8005bde:	eba0 000a 	sub.w	r0, r0, sl
 8005be2:	2240      	movs	r2, #64	@ 0x40
 8005be4:	4082      	lsls	r2, r0
 8005be6:	4313      	orrs	r3, r2
 8005be8:	3401      	adds	r4, #1
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf0:	4824      	ldr	r0, [pc, #144]	@ (8005c84 <_svfiprintf_r+0x1e8>)
 8005bf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bf6:	2206      	movs	r2, #6
 8005bf8:	f7fa fb12 	bl	8000220 <memchr>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d036      	beq.n	8005c6e <_svfiprintf_r+0x1d2>
 8005c00:	4b21      	ldr	r3, [pc, #132]	@ (8005c88 <_svfiprintf_r+0x1ec>)
 8005c02:	bb1b      	cbnz	r3, 8005c4c <_svfiprintf_r+0x1b0>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	3307      	adds	r3, #7
 8005c08:	f023 0307 	bic.w	r3, r3, #7
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	9303      	str	r3, [sp, #12]
 8005c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c12:	4433      	add	r3, r6
 8005c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c16:	e76a      	b.n	8005aee <_svfiprintf_r+0x52>
 8005c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	2001      	movs	r0, #1
 8005c20:	e7a8      	b.n	8005b74 <_svfiprintf_r+0xd8>
 8005c22:	2300      	movs	r3, #0
 8005c24:	3401      	adds	r4, #1
 8005c26:	9305      	str	r3, [sp, #20]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f04f 0c0a 	mov.w	ip, #10
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c34:	3a30      	subs	r2, #48	@ 0x30
 8005c36:	2a09      	cmp	r2, #9
 8005c38:	d903      	bls.n	8005c42 <_svfiprintf_r+0x1a6>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0c6      	beq.n	8005bcc <_svfiprintf_r+0x130>
 8005c3e:	9105      	str	r1, [sp, #20]
 8005c40:	e7c4      	b.n	8005bcc <_svfiprintf_r+0x130>
 8005c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c46:	4604      	mov	r4, r0
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e7f0      	b.n	8005c2e <_svfiprintf_r+0x192>
 8005c4c:	ab03      	add	r3, sp, #12
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	462a      	mov	r2, r5
 8005c52:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <_svfiprintf_r+0x1f0>)
 8005c54:	a904      	add	r1, sp, #16
 8005c56:	4638      	mov	r0, r7
 8005c58:	f3af 8000 	nop.w
 8005c5c:	1c42      	adds	r2, r0, #1
 8005c5e:	4606      	mov	r6, r0
 8005c60:	d1d6      	bne.n	8005c10 <_svfiprintf_r+0x174>
 8005c62:	89ab      	ldrh	r3, [r5, #12]
 8005c64:	065b      	lsls	r3, r3, #25
 8005c66:	f53f af2d 	bmi.w	8005ac4 <_svfiprintf_r+0x28>
 8005c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c6c:	e72c      	b.n	8005ac8 <_svfiprintf_r+0x2c>
 8005c6e:	ab03      	add	r3, sp, #12
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	462a      	mov	r2, r5
 8005c74:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <_svfiprintf_r+0x1f0>)
 8005c76:	a904      	add	r1, sp, #16
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f000 f879 	bl	8005d70 <_printf_i>
 8005c7e:	e7ed      	b.n	8005c5c <_svfiprintf_r+0x1c0>
 8005c80:	080071d8 	.word	0x080071d8
 8005c84:	080071e2 	.word	0x080071e2
 8005c88:	00000000 	.word	0x00000000
 8005c8c:	080059e5 	.word	0x080059e5
 8005c90:	080071de 	.word	0x080071de

08005c94 <_printf_common>:
 8005c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	4616      	mov	r6, r2
 8005c9a:	4698      	mov	r8, r3
 8005c9c:	688a      	ldr	r2, [r1, #8]
 8005c9e:	690b      	ldr	r3, [r1, #16]
 8005ca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	bfb8      	it	lt
 8005ca8:	4613      	movlt	r3, r2
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	b10a      	cbz	r2, 8005cba <_printf_common+0x26>
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	6033      	str	r3, [r6, #0]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	0699      	lsls	r1, r3, #26
 8005cbe:	bf42      	ittt	mi
 8005cc0:	6833      	ldrmi	r3, [r6, #0]
 8005cc2:	3302      	addmi	r3, #2
 8005cc4:	6033      	strmi	r3, [r6, #0]
 8005cc6:	6825      	ldr	r5, [r4, #0]
 8005cc8:	f015 0506 	ands.w	r5, r5, #6
 8005ccc:	d106      	bne.n	8005cdc <_printf_common+0x48>
 8005cce:	f104 0a19 	add.w	sl, r4, #25
 8005cd2:	68e3      	ldr	r3, [r4, #12]
 8005cd4:	6832      	ldr	r2, [r6, #0]
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	42ab      	cmp	r3, r5
 8005cda:	dc26      	bgt.n	8005d2a <_printf_common+0x96>
 8005cdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	3b00      	subs	r3, #0
 8005ce4:	bf18      	it	ne
 8005ce6:	2301      	movne	r3, #1
 8005ce8:	0692      	lsls	r2, r2, #26
 8005cea:	d42b      	bmi.n	8005d44 <_printf_common+0xb0>
 8005cec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	47c8      	blx	r9
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d01e      	beq.n	8005d38 <_printf_common+0xa4>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	6922      	ldr	r2, [r4, #16]
 8005cfe:	f003 0306 	and.w	r3, r3, #6
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	bf02      	ittt	eq
 8005d06:	68e5      	ldreq	r5, [r4, #12]
 8005d08:	6833      	ldreq	r3, [r6, #0]
 8005d0a:	1aed      	subeq	r5, r5, r3
 8005d0c:	68a3      	ldr	r3, [r4, #8]
 8005d0e:	bf0c      	ite	eq
 8005d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d14:	2500      	movne	r5, #0
 8005d16:	4293      	cmp	r3, r2
 8005d18:	bfc4      	itt	gt
 8005d1a:	1a9b      	subgt	r3, r3, r2
 8005d1c:	18ed      	addgt	r5, r5, r3
 8005d1e:	2600      	movs	r6, #0
 8005d20:	341a      	adds	r4, #26
 8005d22:	42b5      	cmp	r5, r6
 8005d24:	d11a      	bne.n	8005d5c <_printf_common+0xc8>
 8005d26:	2000      	movs	r0, #0
 8005d28:	e008      	b.n	8005d3c <_printf_common+0xa8>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4652      	mov	r2, sl
 8005d2e:	4641      	mov	r1, r8
 8005d30:	4638      	mov	r0, r7
 8005d32:	47c8      	blx	r9
 8005d34:	3001      	adds	r0, #1
 8005d36:	d103      	bne.n	8005d40 <_printf_common+0xac>
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d40:	3501      	adds	r5, #1
 8005d42:	e7c6      	b.n	8005cd2 <_printf_common+0x3e>
 8005d44:	18e1      	adds	r1, r4, r3
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	2030      	movs	r0, #48	@ 0x30
 8005d4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d4e:	4422      	add	r2, r4
 8005d50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d58:	3302      	adds	r3, #2
 8005d5a:	e7c7      	b.n	8005cec <_printf_common+0x58>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4622      	mov	r2, r4
 8005d60:	4641      	mov	r1, r8
 8005d62:	4638      	mov	r0, r7
 8005d64:	47c8      	blx	r9
 8005d66:	3001      	adds	r0, #1
 8005d68:	d0e6      	beq.n	8005d38 <_printf_common+0xa4>
 8005d6a:	3601      	adds	r6, #1
 8005d6c:	e7d9      	b.n	8005d22 <_printf_common+0x8e>
	...

08005d70 <_printf_i>:
 8005d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	7e0f      	ldrb	r7, [r1, #24]
 8005d76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d78:	2f78      	cmp	r7, #120	@ 0x78
 8005d7a:	4691      	mov	r9, r2
 8005d7c:	4680      	mov	r8, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	469a      	mov	sl, r3
 8005d82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d86:	d807      	bhi.n	8005d98 <_printf_i+0x28>
 8005d88:	2f62      	cmp	r7, #98	@ 0x62
 8005d8a:	d80a      	bhi.n	8005da2 <_printf_i+0x32>
 8005d8c:	2f00      	cmp	r7, #0
 8005d8e:	f000 80d2 	beq.w	8005f36 <_printf_i+0x1c6>
 8005d92:	2f58      	cmp	r7, #88	@ 0x58
 8005d94:	f000 80b9 	beq.w	8005f0a <_printf_i+0x19a>
 8005d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005da0:	e03a      	b.n	8005e18 <_printf_i+0xa8>
 8005da2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005da6:	2b15      	cmp	r3, #21
 8005da8:	d8f6      	bhi.n	8005d98 <_printf_i+0x28>
 8005daa:	a101      	add	r1, pc, #4	@ (adr r1, 8005db0 <_printf_i+0x40>)
 8005dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005e1d 	.word	0x08005e1d
 8005db8:	08005d99 	.word	0x08005d99
 8005dbc:	08005d99 	.word	0x08005d99
 8005dc0:	08005d99 	.word	0x08005d99
 8005dc4:	08005d99 	.word	0x08005d99
 8005dc8:	08005e1d 	.word	0x08005e1d
 8005dcc:	08005d99 	.word	0x08005d99
 8005dd0:	08005d99 	.word	0x08005d99
 8005dd4:	08005d99 	.word	0x08005d99
 8005dd8:	08005d99 	.word	0x08005d99
 8005ddc:	08005f1d 	.word	0x08005f1d
 8005de0:	08005e47 	.word	0x08005e47
 8005de4:	08005ed7 	.word	0x08005ed7
 8005de8:	08005d99 	.word	0x08005d99
 8005dec:	08005d99 	.word	0x08005d99
 8005df0:	08005f3f 	.word	0x08005f3f
 8005df4:	08005d99 	.word	0x08005d99
 8005df8:	08005e47 	.word	0x08005e47
 8005dfc:	08005d99 	.word	0x08005d99
 8005e00:	08005d99 	.word	0x08005d99
 8005e04:	08005edf 	.word	0x08005edf
 8005e08:	6833      	ldr	r3, [r6, #0]
 8005e0a:	1d1a      	adds	r2, r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6032      	str	r2, [r6, #0]
 8005e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e09d      	b.n	8005f58 <_printf_i+0x1e8>
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	6820      	ldr	r0, [r4, #0]
 8005e20:	1d19      	adds	r1, r3, #4
 8005e22:	6031      	str	r1, [r6, #0]
 8005e24:	0606      	lsls	r6, r0, #24
 8005e26:	d501      	bpl.n	8005e2c <_printf_i+0xbc>
 8005e28:	681d      	ldr	r5, [r3, #0]
 8005e2a:	e003      	b.n	8005e34 <_printf_i+0xc4>
 8005e2c:	0645      	lsls	r5, r0, #25
 8005e2e:	d5fb      	bpl.n	8005e28 <_printf_i+0xb8>
 8005e30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	da03      	bge.n	8005e40 <_printf_i+0xd0>
 8005e38:	232d      	movs	r3, #45	@ 0x2d
 8005e3a:	426d      	negs	r5, r5
 8005e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e40:	4859      	ldr	r0, [pc, #356]	@ (8005fa8 <_printf_i+0x238>)
 8005e42:	230a      	movs	r3, #10
 8005e44:	e011      	b.n	8005e6a <_printf_i+0xfa>
 8005e46:	6821      	ldr	r1, [r4, #0]
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	0608      	lsls	r0, r1, #24
 8005e4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e50:	d402      	bmi.n	8005e58 <_printf_i+0xe8>
 8005e52:	0649      	lsls	r1, r1, #25
 8005e54:	bf48      	it	mi
 8005e56:	b2ad      	uxthmi	r5, r5
 8005e58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e5a:	4853      	ldr	r0, [pc, #332]	@ (8005fa8 <_printf_i+0x238>)
 8005e5c:	6033      	str	r3, [r6, #0]
 8005e5e:	bf14      	ite	ne
 8005e60:	230a      	movne	r3, #10
 8005e62:	2308      	moveq	r3, #8
 8005e64:	2100      	movs	r1, #0
 8005e66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e6a:	6866      	ldr	r6, [r4, #4]
 8005e6c:	60a6      	str	r6, [r4, #8]
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	bfa2      	ittt	ge
 8005e72:	6821      	ldrge	r1, [r4, #0]
 8005e74:	f021 0104 	bicge.w	r1, r1, #4
 8005e78:	6021      	strge	r1, [r4, #0]
 8005e7a:	b90d      	cbnz	r5, 8005e80 <_printf_i+0x110>
 8005e7c:	2e00      	cmp	r6, #0
 8005e7e:	d04b      	beq.n	8005f18 <_printf_i+0x1a8>
 8005e80:	4616      	mov	r6, r2
 8005e82:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e86:	fb03 5711 	mls	r7, r3, r1, r5
 8005e8a:	5dc7      	ldrb	r7, [r0, r7]
 8005e8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e90:	462f      	mov	r7, r5
 8005e92:	42bb      	cmp	r3, r7
 8005e94:	460d      	mov	r5, r1
 8005e96:	d9f4      	bls.n	8005e82 <_printf_i+0x112>
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d10b      	bne.n	8005eb4 <_printf_i+0x144>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	07df      	lsls	r7, r3, #31
 8005ea0:	d508      	bpl.n	8005eb4 <_printf_i+0x144>
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	6861      	ldr	r1, [r4, #4]
 8005ea6:	4299      	cmp	r1, r3
 8005ea8:	bfde      	ittt	le
 8005eaa:	2330      	movle	r3, #48	@ 0x30
 8005eac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eb4:	1b92      	subs	r2, r2, r6
 8005eb6:	6122      	str	r2, [r4, #16]
 8005eb8:	f8cd a000 	str.w	sl, [sp]
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	aa03      	add	r2, sp, #12
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f7ff fee6 	bl	8005c94 <_printf_common>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d14a      	bne.n	8005f62 <_printf_i+0x1f2>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	b004      	add	sp, #16
 8005ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	f043 0320 	orr.w	r3, r3, #32
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	4833      	ldr	r0, [pc, #204]	@ (8005fac <_printf_i+0x23c>)
 8005ee0:	2778      	movs	r7, #120	@ 0x78
 8005ee2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	6831      	ldr	r1, [r6, #0]
 8005eea:	061f      	lsls	r7, r3, #24
 8005eec:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ef0:	d402      	bmi.n	8005ef8 <_printf_i+0x188>
 8005ef2:	065f      	lsls	r7, r3, #25
 8005ef4:	bf48      	it	mi
 8005ef6:	b2ad      	uxthmi	r5, r5
 8005ef8:	6031      	str	r1, [r6, #0]
 8005efa:	07d9      	lsls	r1, r3, #31
 8005efc:	bf44      	itt	mi
 8005efe:	f043 0320 	orrmi.w	r3, r3, #32
 8005f02:	6023      	strmi	r3, [r4, #0]
 8005f04:	b11d      	cbz	r5, 8005f0e <_printf_i+0x19e>
 8005f06:	2310      	movs	r3, #16
 8005f08:	e7ac      	b.n	8005e64 <_printf_i+0xf4>
 8005f0a:	4827      	ldr	r0, [pc, #156]	@ (8005fa8 <_printf_i+0x238>)
 8005f0c:	e7e9      	b.n	8005ee2 <_printf_i+0x172>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	f023 0320 	bic.w	r3, r3, #32
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	e7f6      	b.n	8005f06 <_printf_i+0x196>
 8005f18:	4616      	mov	r6, r2
 8005f1a:	e7bd      	b.n	8005e98 <_printf_i+0x128>
 8005f1c:	6833      	ldr	r3, [r6, #0]
 8005f1e:	6825      	ldr	r5, [r4, #0]
 8005f20:	6961      	ldr	r1, [r4, #20]
 8005f22:	1d18      	adds	r0, r3, #4
 8005f24:	6030      	str	r0, [r6, #0]
 8005f26:	062e      	lsls	r6, r5, #24
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	d501      	bpl.n	8005f30 <_printf_i+0x1c0>
 8005f2c:	6019      	str	r1, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <_printf_i+0x1c6>
 8005f30:	0668      	lsls	r0, r5, #25
 8005f32:	d5fb      	bpl.n	8005f2c <_printf_i+0x1bc>
 8005f34:	8019      	strh	r1, [r3, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	4616      	mov	r6, r2
 8005f3c:	e7bc      	b.n	8005eb8 <_printf_i+0x148>
 8005f3e:	6833      	ldr	r3, [r6, #0]
 8005f40:	1d1a      	adds	r2, r3, #4
 8005f42:	6032      	str	r2, [r6, #0]
 8005f44:	681e      	ldr	r6, [r3, #0]
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f7fa f968 	bl	8000220 <memchr>
 8005f50:	b108      	cbz	r0, 8005f56 <_printf_i+0x1e6>
 8005f52:	1b80      	subs	r0, r0, r6
 8005f54:	6060      	str	r0, [r4, #4]
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f60:	e7aa      	b.n	8005eb8 <_printf_i+0x148>
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	4632      	mov	r2, r6
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	47d0      	blx	sl
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d0ad      	beq.n	8005ecc <_printf_i+0x15c>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	079b      	lsls	r3, r3, #30
 8005f74:	d413      	bmi.n	8005f9e <_printf_i+0x22e>
 8005f76:	68e0      	ldr	r0, [r4, #12]
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	4298      	cmp	r0, r3
 8005f7c:	bfb8      	it	lt
 8005f7e:	4618      	movlt	r0, r3
 8005f80:	e7a6      	b.n	8005ed0 <_printf_i+0x160>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4632      	mov	r2, r6
 8005f86:	4649      	mov	r1, r9
 8005f88:	4640      	mov	r0, r8
 8005f8a:	47d0      	blx	sl
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d09d      	beq.n	8005ecc <_printf_i+0x15c>
 8005f90:	3501      	adds	r5, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	9903      	ldr	r1, [sp, #12]
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	dcf2      	bgt.n	8005f82 <_printf_i+0x212>
 8005f9c:	e7eb      	b.n	8005f76 <_printf_i+0x206>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	f104 0619 	add.w	r6, r4, #25
 8005fa4:	e7f5      	b.n	8005f92 <_printf_i+0x222>
 8005fa6:	bf00      	nop
 8005fa8:	080071e9 	.word	0x080071e9
 8005fac:	080071fa 	.word	0x080071fa

08005fb0 <memmove>:
 8005fb0:	4288      	cmp	r0, r1
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	eb01 0402 	add.w	r4, r1, r2
 8005fb8:	d902      	bls.n	8005fc0 <memmove+0x10>
 8005fba:	4284      	cmp	r4, r0
 8005fbc:	4623      	mov	r3, r4
 8005fbe:	d807      	bhi.n	8005fd0 <memmove+0x20>
 8005fc0:	1e43      	subs	r3, r0, #1
 8005fc2:	42a1      	cmp	r1, r4
 8005fc4:	d008      	beq.n	8005fd8 <memmove+0x28>
 8005fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fce:	e7f8      	b.n	8005fc2 <memmove+0x12>
 8005fd0:	4402      	add	r2, r0
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	428a      	cmp	r2, r1
 8005fd6:	d100      	bne.n	8005fda <memmove+0x2a>
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fe2:	e7f7      	b.n	8005fd4 <memmove+0x24>

08005fe4 <_sbrk_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d06      	ldr	r5, [pc, #24]	@ (8006000 <_sbrk_r+0x1c>)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	f7fb fe76 	bl	8001ce0 <_sbrk>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_sbrk_r+0x1a>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_sbrk_r+0x1a>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000484 	.word	0x20000484

08006004 <memcpy>:
 8006004:	440a      	add	r2, r1
 8006006:	4291      	cmp	r1, r2
 8006008:	f100 33ff 	add.w	r3, r0, #4294967295
 800600c:	d100      	bne.n	8006010 <memcpy+0xc>
 800600e:	4770      	bx	lr
 8006010:	b510      	push	{r4, lr}
 8006012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800601a:	4291      	cmp	r1, r2
 800601c:	d1f9      	bne.n	8006012 <memcpy+0xe>
 800601e:	bd10      	pop	{r4, pc}

08006020 <_realloc_r>:
 8006020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006024:	4680      	mov	r8, r0
 8006026:	4615      	mov	r5, r2
 8006028:	460c      	mov	r4, r1
 800602a:	b921      	cbnz	r1, 8006036 <_realloc_r+0x16>
 800602c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006030:	4611      	mov	r1, r2
 8006032:	f7ff bc4b 	b.w	80058cc <_malloc_r>
 8006036:	b92a      	cbnz	r2, 8006044 <_realloc_r+0x24>
 8006038:	f7ff fbdc 	bl	80057f4 <_free_r>
 800603c:	2400      	movs	r4, #0
 800603e:	4620      	mov	r0, r4
 8006040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006044:	f000 f81a 	bl	800607c <_malloc_usable_size_r>
 8006048:	4285      	cmp	r5, r0
 800604a:	4606      	mov	r6, r0
 800604c:	d802      	bhi.n	8006054 <_realloc_r+0x34>
 800604e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006052:	d8f4      	bhi.n	800603e <_realloc_r+0x1e>
 8006054:	4629      	mov	r1, r5
 8006056:	4640      	mov	r0, r8
 8006058:	f7ff fc38 	bl	80058cc <_malloc_r>
 800605c:	4607      	mov	r7, r0
 800605e:	2800      	cmp	r0, #0
 8006060:	d0ec      	beq.n	800603c <_realloc_r+0x1c>
 8006062:	42b5      	cmp	r5, r6
 8006064:	462a      	mov	r2, r5
 8006066:	4621      	mov	r1, r4
 8006068:	bf28      	it	cs
 800606a:	4632      	movcs	r2, r6
 800606c:	f7ff ffca 	bl	8006004 <memcpy>
 8006070:	4621      	mov	r1, r4
 8006072:	4640      	mov	r0, r8
 8006074:	f7ff fbbe 	bl	80057f4 <_free_r>
 8006078:	463c      	mov	r4, r7
 800607a:	e7e0      	b.n	800603e <_realloc_r+0x1e>

0800607c <_malloc_usable_size_r>:
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f18      	subs	r0, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfbc      	itt	lt
 8006086:	580b      	ldrlt	r3, [r1, r0]
 8006088:	18c0      	addlt	r0, r0, r3
 800608a:	4770      	bx	lr
 800608c:	0000      	movs	r0, r0
	...

08006090 <cos>:
 8006090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006092:	ec53 2b10 	vmov	r2, r3, d0
 8006096:	4826      	ldr	r0, [pc, #152]	@ (8006130 <cos+0xa0>)
 8006098:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800609c:	4281      	cmp	r1, r0
 800609e:	d806      	bhi.n	80060ae <cos+0x1e>
 80060a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006128 <cos+0x98>
 80060a4:	b005      	add	sp, #20
 80060a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80060aa:	f000 b899 	b.w	80061e0 <__kernel_cos>
 80060ae:	4821      	ldr	r0, [pc, #132]	@ (8006134 <cos+0xa4>)
 80060b0:	4281      	cmp	r1, r0
 80060b2:	d908      	bls.n	80060c6 <cos+0x36>
 80060b4:	4610      	mov	r0, r2
 80060b6:	4619      	mov	r1, r3
 80060b8:	f7fa f906 	bl	80002c8 <__aeabi_dsub>
 80060bc:	ec41 0b10 	vmov	d0, r0, r1
 80060c0:	b005      	add	sp, #20
 80060c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80060c6:	4668      	mov	r0, sp
 80060c8:	f000 fa0e 	bl	80064e8 <__ieee754_rem_pio2>
 80060cc:	f000 0003 	and.w	r0, r0, #3
 80060d0:	2801      	cmp	r0, #1
 80060d2:	d00b      	beq.n	80060ec <cos+0x5c>
 80060d4:	2802      	cmp	r0, #2
 80060d6:	d015      	beq.n	8006104 <cos+0x74>
 80060d8:	b9d8      	cbnz	r0, 8006112 <cos+0x82>
 80060da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060de:	ed9d 0b00 	vldr	d0, [sp]
 80060e2:	f000 f87d 	bl	80061e0 <__kernel_cos>
 80060e6:	ec51 0b10 	vmov	r0, r1, d0
 80060ea:	e7e7      	b.n	80060bc <cos+0x2c>
 80060ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060f0:	ed9d 0b00 	vldr	d0, [sp]
 80060f4:	f000 f93c 	bl	8006370 <__kernel_sin>
 80060f8:	ec53 2b10 	vmov	r2, r3, d0
 80060fc:	4610      	mov	r0, r2
 80060fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006102:	e7db      	b.n	80060bc <cos+0x2c>
 8006104:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006108:	ed9d 0b00 	vldr	d0, [sp]
 800610c:	f000 f868 	bl	80061e0 <__kernel_cos>
 8006110:	e7f2      	b.n	80060f8 <cos+0x68>
 8006112:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006116:	ed9d 0b00 	vldr	d0, [sp]
 800611a:	2001      	movs	r0, #1
 800611c:	f000 f928 	bl	8006370 <__kernel_sin>
 8006120:	e7e1      	b.n	80060e6 <cos+0x56>
 8006122:	bf00      	nop
 8006124:	f3af 8000 	nop.w
	...
 8006130:	3fe921fb 	.word	0x3fe921fb
 8006134:	7fefffff 	.word	0x7fefffff

08006138 <sin>:
 8006138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800613a:	ec53 2b10 	vmov	r2, r3, d0
 800613e:	4826      	ldr	r0, [pc, #152]	@ (80061d8 <sin+0xa0>)
 8006140:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006144:	4281      	cmp	r1, r0
 8006146:	d807      	bhi.n	8006158 <sin+0x20>
 8006148:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80061d0 <sin+0x98>
 800614c:	2000      	movs	r0, #0
 800614e:	b005      	add	sp, #20
 8006150:	f85d eb04 	ldr.w	lr, [sp], #4
 8006154:	f000 b90c 	b.w	8006370 <__kernel_sin>
 8006158:	4820      	ldr	r0, [pc, #128]	@ (80061dc <sin+0xa4>)
 800615a:	4281      	cmp	r1, r0
 800615c:	d908      	bls.n	8006170 <sin+0x38>
 800615e:	4610      	mov	r0, r2
 8006160:	4619      	mov	r1, r3
 8006162:	f7fa f8b1 	bl	80002c8 <__aeabi_dsub>
 8006166:	ec41 0b10 	vmov	d0, r0, r1
 800616a:	b005      	add	sp, #20
 800616c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006170:	4668      	mov	r0, sp
 8006172:	f000 f9b9 	bl	80064e8 <__ieee754_rem_pio2>
 8006176:	f000 0003 	and.w	r0, r0, #3
 800617a:	2801      	cmp	r0, #1
 800617c:	d00c      	beq.n	8006198 <sin+0x60>
 800617e:	2802      	cmp	r0, #2
 8006180:	d011      	beq.n	80061a6 <sin+0x6e>
 8006182:	b9e8      	cbnz	r0, 80061c0 <sin+0x88>
 8006184:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006188:	ed9d 0b00 	vldr	d0, [sp]
 800618c:	2001      	movs	r0, #1
 800618e:	f000 f8ef 	bl	8006370 <__kernel_sin>
 8006192:	ec51 0b10 	vmov	r0, r1, d0
 8006196:	e7e6      	b.n	8006166 <sin+0x2e>
 8006198:	ed9d 1b02 	vldr	d1, [sp, #8]
 800619c:	ed9d 0b00 	vldr	d0, [sp]
 80061a0:	f000 f81e 	bl	80061e0 <__kernel_cos>
 80061a4:	e7f5      	b.n	8006192 <sin+0x5a>
 80061a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061aa:	ed9d 0b00 	vldr	d0, [sp]
 80061ae:	2001      	movs	r0, #1
 80061b0:	f000 f8de 	bl	8006370 <__kernel_sin>
 80061b4:	ec53 2b10 	vmov	r2, r3, d0
 80061b8:	4610      	mov	r0, r2
 80061ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80061be:	e7d2      	b.n	8006166 <sin+0x2e>
 80061c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061c4:	ed9d 0b00 	vldr	d0, [sp]
 80061c8:	f000 f80a 	bl	80061e0 <__kernel_cos>
 80061cc:	e7f2      	b.n	80061b4 <sin+0x7c>
 80061ce:	bf00      	nop
	...
 80061d8:	3fe921fb 	.word	0x3fe921fb
 80061dc:	7fefffff 	.word	0x7fefffff

080061e0 <__kernel_cos>:
 80061e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	ec57 6b10 	vmov	r6, r7, d0
 80061e8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80061ec:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80061f0:	ed8d 1b00 	vstr	d1, [sp]
 80061f4:	d206      	bcs.n	8006204 <__kernel_cos+0x24>
 80061f6:	4630      	mov	r0, r6
 80061f8:	4639      	mov	r1, r7
 80061fa:	f7fa fcb7 	bl	8000b6c <__aeabi_d2iz>
 80061fe:	2800      	cmp	r0, #0
 8006200:	f000 8088 	beq.w	8006314 <__kernel_cos+0x134>
 8006204:	4632      	mov	r2, r6
 8006206:	463b      	mov	r3, r7
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	f7fa fa14 	bl	8000638 <__aeabi_dmul>
 8006210:	4b51      	ldr	r3, [pc, #324]	@ (8006358 <__kernel_cos+0x178>)
 8006212:	2200      	movs	r2, #0
 8006214:	4604      	mov	r4, r0
 8006216:	460d      	mov	r5, r1
 8006218:	f7fa fa0e 	bl	8000638 <__aeabi_dmul>
 800621c:	a340      	add	r3, pc, #256	@ (adr r3, 8006320 <__kernel_cos+0x140>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	4682      	mov	sl, r0
 8006224:	468b      	mov	fp, r1
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7fa fa05 	bl	8000638 <__aeabi_dmul>
 800622e:	a33e      	add	r3, pc, #248	@ (adr r3, 8006328 <__kernel_cos+0x148>)
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f7fa f84a 	bl	80002cc <__adddf3>
 8006238:	4622      	mov	r2, r4
 800623a:	462b      	mov	r3, r5
 800623c:	f7fa f9fc 	bl	8000638 <__aeabi_dmul>
 8006240:	a33b      	add	r3, pc, #236	@ (adr r3, 8006330 <__kernel_cos+0x150>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f83f 	bl	80002c8 <__aeabi_dsub>
 800624a:	4622      	mov	r2, r4
 800624c:	462b      	mov	r3, r5
 800624e:	f7fa f9f3 	bl	8000638 <__aeabi_dmul>
 8006252:	a339      	add	r3, pc, #228	@ (adr r3, 8006338 <__kernel_cos+0x158>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f7fa f838 	bl	80002cc <__adddf3>
 800625c:	4622      	mov	r2, r4
 800625e:	462b      	mov	r3, r5
 8006260:	f7fa f9ea 	bl	8000638 <__aeabi_dmul>
 8006264:	a336      	add	r3, pc, #216	@ (adr r3, 8006340 <__kernel_cos+0x160>)
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f7fa f82d 	bl	80002c8 <__aeabi_dsub>
 800626e:	4622      	mov	r2, r4
 8006270:	462b      	mov	r3, r5
 8006272:	f7fa f9e1 	bl	8000638 <__aeabi_dmul>
 8006276:	a334      	add	r3, pc, #208	@ (adr r3, 8006348 <__kernel_cos+0x168>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f826 	bl	80002cc <__adddf3>
 8006280:	4622      	mov	r2, r4
 8006282:	462b      	mov	r3, r5
 8006284:	f7fa f9d8 	bl	8000638 <__aeabi_dmul>
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	f7fa f9d4 	bl	8000638 <__aeabi_dmul>
 8006290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006294:	4604      	mov	r4, r0
 8006296:	460d      	mov	r5, r1
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa f9cc 	bl	8000638 <__aeabi_dmul>
 80062a0:	460b      	mov	r3, r1
 80062a2:	4602      	mov	r2, r0
 80062a4:	4629      	mov	r1, r5
 80062a6:	4620      	mov	r0, r4
 80062a8:	f7fa f80e 	bl	80002c8 <__aeabi_dsub>
 80062ac:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <__kernel_cos+0x17c>)
 80062ae:	4598      	cmp	r8, r3
 80062b0:	4606      	mov	r6, r0
 80062b2:	460f      	mov	r7, r1
 80062b4:	d810      	bhi.n	80062d8 <__kernel_cos+0xf8>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4650      	mov	r0, sl
 80062bc:	4659      	mov	r1, fp
 80062be:	f7fa f803 	bl	80002c8 <__aeabi_dsub>
 80062c2:	460b      	mov	r3, r1
 80062c4:	4926      	ldr	r1, [pc, #152]	@ (8006360 <__kernel_cos+0x180>)
 80062c6:	4602      	mov	r2, r0
 80062c8:	2000      	movs	r0, #0
 80062ca:	f7f9 fffd 	bl	80002c8 <__aeabi_dsub>
 80062ce:	ec41 0b10 	vmov	d0, r0, r1
 80062d2:	b003      	add	sp, #12
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	4b22      	ldr	r3, [pc, #136]	@ (8006364 <__kernel_cos+0x184>)
 80062da:	4921      	ldr	r1, [pc, #132]	@ (8006360 <__kernel_cos+0x180>)
 80062dc:	4598      	cmp	r8, r3
 80062de:	bf8c      	ite	hi
 80062e0:	4d21      	ldrhi	r5, [pc, #132]	@ (8006368 <__kernel_cos+0x188>)
 80062e2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80062e6:	2400      	movs	r4, #0
 80062e8:	4622      	mov	r2, r4
 80062ea:	462b      	mov	r3, r5
 80062ec:	2000      	movs	r0, #0
 80062ee:	f7f9 ffeb 	bl	80002c8 <__aeabi_dsub>
 80062f2:	4622      	mov	r2, r4
 80062f4:	4680      	mov	r8, r0
 80062f6:	4689      	mov	r9, r1
 80062f8:	462b      	mov	r3, r5
 80062fa:	4650      	mov	r0, sl
 80062fc:	4659      	mov	r1, fp
 80062fe:	f7f9 ffe3 	bl	80002c8 <__aeabi_dsub>
 8006302:	4632      	mov	r2, r6
 8006304:	463b      	mov	r3, r7
 8006306:	f7f9 ffdf 	bl	80002c8 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	e7da      	b.n	80062ca <__kernel_cos+0xea>
 8006314:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006350 <__kernel_cos+0x170>
 8006318:	e7db      	b.n	80062d2 <__kernel_cos+0xf2>
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w
 8006320:	be8838d4 	.word	0xbe8838d4
 8006324:	bda8fae9 	.word	0xbda8fae9
 8006328:	bdb4b1c4 	.word	0xbdb4b1c4
 800632c:	3e21ee9e 	.word	0x3e21ee9e
 8006330:	809c52ad 	.word	0x809c52ad
 8006334:	3e927e4f 	.word	0x3e927e4f
 8006338:	19cb1590 	.word	0x19cb1590
 800633c:	3efa01a0 	.word	0x3efa01a0
 8006340:	16c15177 	.word	0x16c15177
 8006344:	3f56c16c 	.word	0x3f56c16c
 8006348:	5555554c 	.word	0x5555554c
 800634c:	3fa55555 	.word	0x3fa55555
 8006350:	00000000 	.word	0x00000000
 8006354:	3ff00000 	.word	0x3ff00000
 8006358:	3fe00000 	.word	0x3fe00000
 800635c:	3fd33332 	.word	0x3fd33332
 8006360:	3ff00000 	.word	0x3ff00000
 8006364:	3fe90000 	.word	0x3fe90000
 8006368:	3fd20000 	.word	0x3fd20000
 800636c:	00000000 	.word	0x00000000

08006370 <__kernel_sin>:
 8006370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	ec55 4b10 	vmov	r4, r5, d0
 8006378:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800637c:	b085      	sub	sp, #20
 800637e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006382:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006386:	4680      	mov	r8, r0
 8006388:	d205      	bcs.n	8006396 <__kernel_sin+0x26>
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa fbed 	bl	8000b6c <__aeabi_d2iz>
 8006392:	2800      	cmp	r0, #0
 8006394:	d052      	beq.n	800643c <__kernel_sin+0xcc>
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	f7fa f94b 	bl	8000638 <__aeabi_dmul>
 80063a2:	4682      	mov	sl, r0
 80063a4:	468b      	mov	fp, r1
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fa f943 	bl	8000638 <__aeabi_dmul>
 80063b2:	a342      	add	r3, pc, #264	@ (adr r3, 80064bc <__kernel_sin+0x14c>)
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	e9cd 0100 	strd	r0, r1, [sp]
 80063bc:	4650      	mov	r0, sl
 80063be:	4659      	mov	r1, fp
 80063c0:	f7fa f93a 	bl	8000638 <__aeabi_dmul>
 80063c4:	a33f      	add	r3, pc, #252	@ (adr r3, 80064c4 <__kernel_sin+0x154>)
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	f7f9 ff7d 	bl	80002c8 <__aeabi_dsub>
 80063ce:	4652      	mov	r2, sl
 80063d0:	465b      	mov	r3, fp
 80063d2:	f7fa f931 	bl	8000638 <__aeabi_dmul>
 80063d6:	a33d      	add	r3, pc, #244	@ (adr r3, 80064cc <__kernel_sin+0x15c>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f7f9 ff76 	bl	80002cc <__adddf3>
 80063e0:	4652      	mov	r2, sl
 80063e2:	465b      	mov	r3, fp
 80063e4:	f7fa f928 	bl	8000638 <__aeabi_dmul>
 80063e8:	a33a      	add	r3, pc, #232	@ (adr r3, 80064d4 <__kernel_sin+0x164>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7f9 ff6b 	bl	80002c8 <__aeabi_dsub>
 80063f2:	4652      	mov	r2, sl
 80063f4:	465b      	mov	r3, fp
 80063f6:	f7fa f91f 	bl	8000638 <__aeabi_dmul>
 80063fa:	a338      	add	r3, pc, #224	@ (adr r3, 80064dc <__kernel_sin+0x16c>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f7f9 ff64 	bl	80002cc <__adddf3>
 8006404:	4606      	mov	r6, r0
 8006406:	460f      	mov	r7, r1
 8006408:	f1b8 0f00 	cmp.w	r8, #0
 800640c:	d11b      	bne.n	8006446 <__kernel_sin+0xd6>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4650      	mov	r0, sl
 8006414:	4659      	mov	r1, fp
 8006416:	f7fa f90f 	bl	8000638 <__aeabi_dmul>
 800641a:	a325      	add	r3, pc, #148	@ (adr r3, 80064b0 <__kernel_sin+0x140>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f7f9 ff52 	bl	80002c8 <__aeabi_dsub>
 8006424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006428:	f7fa f906 	bl	8000638 <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4620      	mov	r0, r4
 8006432:	4629      	mov	r1, r5
 8006434:	f7f9 ff4a 	bl	80002cc <__adddf3>
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	ec45 4b10 	vmov	d0, r4, r5
 8006440:	b005      	add	sp, #20
 8006442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644a:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <__kernel_sin+0x148>)
 800644c:	2200      	movs	r2, #0
 800644e:	f7fa f8f3 	bl	8000638 <__aeabi_dmul>
 8006452:	4632      	mov	r2, r6
 8006454:	4680      	mov	r8, r0
 8006456:	4689      	mov	r9, r1
 8006458:	463b      	mov	r3, r7
 800645a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800645e:	f7fa f8eb 	bl	8000638 <__aeabi_dmul>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4640      	mov	r0, r8
 8006468:	4649      	mov	r1, r9
 800646a:	f7f9 ff2d 	bl	80002c8 <__aeabi_dsub>
 800646e:	4652      	mov	r2, sl
 8006470:	465b      	mov	r3, fp
 8006472:	f7fa f8e1 	bl	8000638 <__aeabi_dmul>
 8006476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800647a:	f7f9 ff25 	bl	80002c8 <__aeabi_dsub>
 800647e:	a30c      	add	r3, pc, #48	@ (adr r3, 80064b0 <__kernel_sin+0x140>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800648c:	f7fa f8d4 	bl	8000638 <__aeabi_dmul>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4630      	mov	r0, r6
 8006496:	4639      	mov	r1, r7
 8006498:	f7f9 ff18 	bl	80002cc <__adddf3>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7f9 ff10 	bl	80002c8 <__aeabi_dsub>
 80064a8:	e7c6      	b.n	8006438 <__kernel_sin+0xc8>
 80064aa:	bf00      	nop
 80064ac:	f3af 8000 	nop.w
 80064b0:	55555549 	.word	0x55555549
 80064b4:	3fc55555 	.word	0x3fc55555
 80064b8:	3fe00000 	.word	0x3fe00000
 80064bc:	5acfd57c 	.word	0x5acfd57c
 80064c0:	3de5d93a 	.word	0x3de5d93a
 80064c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80064c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80064cc:	57b1fe7d 	.word	0x57b1fe7d
 80064d0:	3ec71de3 	.word	0x3ec71de3
 80064d4:	19c161d5 	.word	0x19c161d5
 80064d8:	3f2a01a0 	.word	0x3f2a01a0
 80064dc:	1110f8a6 	.word	0x1110f8a6
 80064e0:	3f811111 	.word	0x3f811111
 80064e4:	00000000 	.word	0x00000000

080064e8 <__ieee754_rem_pio2>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	ec57 6b10 	vmov	r6, r7, d0
 80064f0:	4bc5      	ldr	r3, [pc, #788]	@ (8006808 <__ieee754_rem_pio2+0x320>)
 80064f2:	b08d      	sub	sp, #52	@ 0x34
 80064f4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80064f8:	4598      	cmp	r8, r3
 80064fa:	4604      	mov	r4, r0
 80064fc:	9704      	str	r7, [sp, #16]
 80064fe:	d807      	bhi.n	8006510 <__ieee754_rem_pio2+0x28>
 8006500:	2200      	movs	r2, #0
 8006502:	2300      	movs	r3, #0
 8006504:	ed80 0b00 	vstr	d0, [r0]
 8006508:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800650c:	2500      	movs	r5, #0
 800650e:	e028      	b.n	8006562 <__ieee754_rem_pio2+0x7a>
 8006510:	4bbe      	ldr	r3, [pc, #760]	@ (800680c <__ieee754_rem_pio2+0x324>)
 8006512:	4598      	cmp	r8, r3
 8006514:	d878      	bhi.n	8006608 <__ieee754_rem_pio2+0x120>
 8006516:	9b04      	ldr	r3, [sp, #16]
 8006518:	4dbd      	ldr	r5, [pc, #756]	@ (8006810 <__ieee754_rem_pio2+0x328>)
 800651a:	2b00      	cmp	r3, #0
 800651c:	4630      	mov	r0, r6
 800651e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80067d0 <__ieee754_rem_pio2+0x2e8>)
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	4639      	mov	r1, r7
 8006526:	dd38      	ble.n	800659a <__ieee754_rem_pio2+0xb2>
 8006528:	f7f9 fece 	bl	80002c8 <__aeabi_dsub>
 800652c:	45a8      	cmp	r8, r5
 800652e:	4606      	mov	r6, r0
 8006530:	460f      	mov	r7, r1
 8006532:	d01a      	beq.n	800656a <__ieee754_rem_pio2+0x82>
 8006534:	a3a8      	add	r3, pc, #672	@ (adr r3, 80067d8 <__ieee754_rem_pio2+0x2f0>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7f9 fec5 	bl	80002c8 <__aeabi_dsub>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4680      	mov	r8, r0
 8006544:	4689      	mov	r9, r1
 8006546:	4630      	mov	r0, r6
 8006548:	4639      	mov	r1, r7
 800654a:	f7f9 febd 	bl	80002c8 <__aeabi_dsub>
 800654e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80067d8 <__ieee754_rem_pio2+0x2f0>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 feb8 	bl	80002c8 <__aeabi_dsub>
 8006558:	e9c4 8900 	strd	r8, r9, [r4]
 800655c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006560:	2501      	movs	r5, #1
 8006562:	4628      	mov	r0, r5
 8006564:	b00d      	add	sp, #52	@ 0x34
 8006566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656a:	a39d      	add	r3, pc, #628	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x2f8>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7f9 feaa 	bl	80002c8 <__aeabi_dsub>
 8006574:	a39c      	add	r3, pc, #624	@ (adr r3, 80067e8 <__ieee754_rem_pio2+0x300>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	4606      	mov	r6, r0
 800657c:	460f      	mov	r7, r1
 800657e:	f7f9 fea3 	bl	80002c8 <__aeabi_dsub>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4680      	mov	r8, r0
 8006588:	4689      	mov	r9, r1
 800658a:	4630      	mov	r0, r6
 800658c:	4639      	mov	r1, r7
 800658e:	f7f9 fe9b 	bl	80002c8 <__aeabi_dsub>
 8006592:	a395      	add	r3, pc, #596	@ (adr r3, 80067e8 <__ieee754_rem_pio2+0x300>)
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	e7dc      	b.n	8006554 <__ieee754_rem_pio2+0x6c>
 800659a:	f7f9 fe97 	bl	80002cc <__adddf3>
 800659e:	45a8      	cmp	r8, r5
 80065a0:	4606      	mov	r6, r0
 80065a2:	460f      	mov	r7, r1
 80065a4:	d018      	beq.n	80065d8 <__ieee754_rem_pio2+0xf0>
 80065a6:	a38c      	add	r3, pc, #560	@ (adr r3, 80067d8 <__ieee754_rem_pio2+0x2f0>)
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f7f9 fe8e 	bl	80002cc <__adddf3>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4680      	mov	r8, r0
 80065b6:	4689      	mov	r9, r1
 80065b8:	4630      	mov	r0, r6
 80065ba:	4639      	mov	r1, r7
 80065bc:	f7f9 fe84 	bl	80002c8 <__aeabi_dsub>
 80065c0:	a385      	add	r3, pc, #532	@ (adr r3, 80067d8 <__ieee754_rem_pio2+0x2f0>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7f9 fe81 	bl	80002cc <__adddf3>
 80065ca:	f04f 35ff 	mov.w	r5, #4294967295
 80065ce:	e9c4 8900 	strd	r8, r9, [r4]
 80065d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80065d6:	e7c4      	b.n	8006562 <__ieee754_rem_pio2+0x7a>
 80065d8:	a381      	add	r3, pc, #516	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x2f8>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7f9 fe75 	bl	80002cc <__adddf3>
 80065e2:	a381      	add	r3, pc, #516	@ (adr r3, 80067e8 <__ieee754_rem_pio2+0x300>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	4606      	mov	r6, r0
 80065ea:	460f      	mov	r7, r1
 80065ec:	f7f9 fe6e 	bl	80002cc <__adddf3>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4680      	mov	r8, r0
 80065f6:	4689      	mov	r9, r1
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7f9 fe64 	bl	80002c8 <__aeabi_dsub>
 8006600:	a379      	add	r3, pc, #484	@ (adr r3, 80067e8 <__ieee754_rem_pio2+0x300>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	e7de      	b.n	80065c6 <__ieee754_rem_pio2+0xde>
 8006608:	4b82      	ldr	r3, [pc, #520]	@ (8006814 <__ieee754_rem_pio2+0x32c>)
 800660a:	4598      	cmp	r8, r3
 800660c:	f200 80d1 	bhi.w	80067b2 <__ieee754_rem_pio2+0x2ca>
 8006610:	f000 f966 	bl	80068e0 <fabs>
 8006614:	ec57 6b10 	vmov	r6, r7, d0
 8006618:	a375      	add	r3, pc, #468	@ (adr r3, 80067f0 <__ieee754_rem_pio2+0x308>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	4630      	mov	r0, r6
 8006620:	4639      	mov	r1, r7
 8006622:	f7fa f809 	bl	8000638 <__aeabi_dmul>
 8006626:	4b7c      	ldr	r3, [pc, #496]	@ (8006818 <__ieee754_rem_pio2+0x330>)
 8006628:	2200      	movs	r2, #0
 800662a:	f7f9 fe4f 	bl	80002cc <__adddf3>
 800662e:	f7fa fa9d 	bl	8000b6c <__aeabi_d2iz>
 8006632:	4605      	mov	r5, r0
 8006634:	f7f9 ff96 	bl	8000564 <__aeabi_i2d>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006640:	a363      	add	r3, pc, #396	@ (adr r3, 80067d0 <__ieee754_rem_pio2+0x2e8>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 fff7 	bl	8000638 <__aeabi_dmul>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	f7f9 fe39 	bl	80002c8 <__aeabi_dsub>
 8006656:	a360      	add	r3, pc, #384	@ (adr r3, 80067d8 <__ieee754_rem_pio2+0x2f0>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	4682      	mov	sl, r0
 800665e:	468b      	mov	fp, r1
 8006660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006664:	f7f9 ffe8 	bl	8000638 <__aeabi_dmul>
 8006668:	2d1f      	cmp	r5, #31
 800666a:	4606      	mov	r6, r0
 800666c:	460f      	mov	r7, r1
 800666e:	dc0c      	bgt.n	800668a <__ieee754_rem_pio2+0x1a2>
 8006670:	4b6a      	ldr	r3, [pc, #424]	@ (800681c <__ieee754_rem_pio2+0x334>)
 8006672:	1e6a      	subs	r2, r5, #1
 8006674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006678:	4543      	cmp	r3, r8
 800667a:	d006      	beq.n	800668a <__ieee754_rem_pio2+0x1a2>
 800667c:	4632      	mov	r2, r6
 800667e:	463b      	mov	r3, r7
 8006680:	4650      	mov	r0, sl
 8006682:	4659      	mov	r1, fp
 8006684:	f7f9 fe20 	bl	80002c8 <__aeabi_dsub>
 8006688:	e00e      	b.n	80066a8 <__ieee754_rem_pio2+0x1c0>
 800668a:	463b      	mov	r3, r7
 800668c:	4632      	mov	r2, r6
 800668e:	4650      	mov	r0, sl
 8006690:	4659      	mov	r1, fp
 8006692:	f7f9 fe19 	bl	80002c8 <__aeabi_dsub>
 8006696:	ea4f 5328 	mov.w	r3, r8, asr #20
 800669a:	9305      	str	r3, [sp, #20]
 800669c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066a0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	dc02      	bgt.n	80066ae <__ieee754_rem_pio2+0x1c6>
 80066a8:	e9c4 0100 	strd	r0, r1, [r4]
 80066ac:	e039      	b.n	8006722 <__ieee754_rem_pio2+0x23a>
 80066ae:	a34c      	add	r3, pc, #304	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x2f8>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066b8:	f7f9 ffbe 	bl	8000638 <__aeabi_dmul>
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4650      	mov	r0, sl
 80066c6:	4659      	mov	r1, fp
 80066c8:	f7f9 fdfe 	bl	80002c8 <__aeabi_dsub>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4680      	mov	r8, r0
 80066d2:	4689      	mov	r9, r1
 80066d4:	4650      	mov	r0, sl
 80066d6:	4659      	mov	r1, fp
 80066d8:	f7f9 fdf6 	bl	80002c8 <__aeabi_dsub>
 80066dc:	4632      	mov	r2, r6
 80066de:	463b      	mov	r3, r7
 80066e0:	f7f9 fdf2 	bl	80002c8 <__aeabi_dsub>
 80066e4:	a340      	add	r3, pc, #256	@ (adr r3, 80067e8 <__ieee754_rem_pio2+0x300>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	4606      	mov	r6, r0
 80066ec:	460f      	mov	r7, r1
 80066ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f2:	f7f9 ffa1 	bl	8000638 <__aeabi_dmul>
 80066f6:	4632      	mov	r2, r6
 80066f8:	463b      	mov	r3, r7
 80066fa:	f7f9 fde5 	bl	80002c8 <__aeabi_dsub>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4606      	mov	r6, r0
 8006704:	460f      	mov	r7, r1
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f7f9 fddd 	bl	80002c8 <__aeabi_dsub>
 800670e:	9a05      	ldr	r2, [sp, #20]
 8006710:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b31      	cmp	r3, #49	@ 0x31
 8006718:	dc20      	bgt.n	800675c <__ieee754_rem_pio2+0x274>
 800671a:	e9c4 0100 	strd	r0, r1, [r4]
 800671e:	46c2      	mov	sl, r8
 8006720:	46cb      	mov	fp, r9
 8006722:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006726:	4650      	mov	r0, sl
 8006728:	4642      	mov	r2, r8
 800672a:	464b      	mov	r3, r9
 800672c:	4659      	mov	r1, fp
 800672e:	f7f9 fdcb 	bl	80002c8 <__aeabi_dsub>
 8006732:	463b      	mov	r3, r7
 8006734:	4632      	mov	r2, r6
 8006736:	f7f9 fdc7 	bl	80002c8 <__aeabi_dsub>
 800673a:	9b04      	ldr	r3, [sp, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006742:	f6bf af0e 	bge.w	8006562 <__ieee754_rem_pio2+0x7a>
 8006746:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006750:	f8c4 8000 	str.w	r8, [r4]
 8006754:	60a0      	str	r0, [r4, #8]
 8006756:	60e3      	str	r3, [r4, #12]
 8006758:	426d      	negs	r5, r5
 800675a:	e702      	b.n	8006562 <__ieee754_rem_pio2+0x7a>
 800675c:	a326      	add	r3, pc, #152	@ (adr r3, 80067f8 <__ieee754_rem_pio2+0x310>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006766:	f7f9 ff67 	bl	8000638 <__aeabi_dmul>
 800676a:	4606      	mov	r6, r0
 800676c:	460f      	mov	r7, r1
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4640      	mov	r0, r8
 8006774:	4649      	mov	r1, r9
 8006776:	f7f9 fda7 	bl	80002c8 <__aeabi_dsub>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4682      	mov	sl, r0
 8006780:	468b      	mov	fp, r1
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f7f9 fd9f 	bl	80002c8 <__aeabi_dsub>
 800678a:	4632      	mov	r2, r6
 800678c:	463b      	mov	r3, r7
 800678e:	f7f9 fd9b 	bl	80002c8 <__aeabi_dsub>
 8006792:	a31b      	add	r3, pc, #108	@ (adr r3, 8006800 <__ieee754_rem_pio2+0x318>)
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	4606      	mov	r6, r0
 800679a:	460f      	mov	r7, r1
 800679c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a0:	f7f9 ff4a 	bl	8000638 <__aeabi_dmul>
 80067a4:	4632      	mov	r2, r6
 80067a6:	463b      	mov	r3, r7
 80067a8:	f7f9 fd8e 	bl	80002c8 <__aeabi_dsub>
 80067ac:	4606      	mov	r6, r0
 80067ae:	460f      	mov	r7, r1
 80067b0:	e764      	b.n	800667c <__ieee754_rem_pio2+0x194>
 80067b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006820 <__ieee754_rem_pio2+0x338>)
 80067b4:	4598      	cmp	r8, r3
 80067b6:	d935      	bls.n	8006824 <__ieee754_rem_pio2+0x33c>
 80067b8:	4632      	mov	r2, r6
 80067ba:	463b      	mov	r3, r7
 80067bc:	4630      	mov	r0, r6
 80067be:	4639      	mov	r1, r7
 80067c0:	f7f9 fd82 	bl	80002c8 <__aeabi_dsub>
 80067c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067c8:	e9c4 0100 	strd	r0, r1, [r4]
 80067cc:	e69e      	b.n	800650c <__ieee754_rem_pio2+0x24>
 80067ce:	bf00      	nop
 80067d0:	54400000 	.word	0x54400000
 80067d4:	3ff921fb 	.word	0x3ff921fb
 80067d8:	1a626331 	.word	0x1a626331
 80067dc:	3dd0b461 	.word	0x3dd0b461
 80067e0:	1a600000 	.word	0x1a600000
 80067e4:	3dd0b461 	.word	0x3dd0b461
 80067e8:	2e037073 	.word	0x2e037073
 80067ec:	3ba3198a 	.word	0x3ba3198a
 80067f0:	6dc9c883 	.word	0x6dc9c883
 80067f4:	3fe45f30 	.word	0x3fe45f30
 80067f8:	2e000000 	.word	0x2e000000
 80067fc:	3ba3198a 	.word	0x3ba3198a
 8006800:	252049c1 	.word	0x252049c1
 8006804:	397b839a 	.word	0x397b839a
 8006808:	3fe921fb 	.word	0x3fe921fb
 800680c:	4002d97b 	.word	0x4002d97b
 8006810:	3ff921fb 	.word	0x3ff921fb
 8006814:	413921fb 	.word	0x413921fb
 8006818:	3fe00000 	.word	0x3fe00000
 800681c:	0800720c 	.word	0x0800720c
 8006820:	7fefffff 	.word	0x7fefffff
 8006824:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006828:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800682c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006830:	4630      	mov	r0, r6
 8006832:	460f      	mov	r7, r1
 8006834:	f7fa f99a 	bl	8000b6c <__aeabi_d2iz>
 8006838:	f7f9 fe94 	bl	8000564 <__aeabi_i2d>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006848:	f7f9 fd3e 	bl	80002c8 <__aeabi_dsub>
 800684c:	4b22      	ldr	r3, [pc, #136]	@ (80068d8 <__ieee754_rem_pio2+0x3f0>)
 800684e:	2200      	movs	r2, #0
 8006850:	f7f9 fef2 	bl	8000638 <__aeabi_dmul>
 8006854:	460f      	mov	r7, r1
 8006856:	4606      	mov	r6, r0
 8006858:	f7fa f988 	bl	8000b6c <__aeabi_d2iz>
 800685c:	f7f9 fe82 	bl	8000564 <__aeabi_i2d>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4630      	mov	r0, r6
 8006866:	4639      	mov	r1, r7
 8006868:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800686c:	f7f9 fd2c 	bl	80002c8 <__aeabi_dsub>
 8006870:	4b19      	ldr	r3, [pc, #100]	@ (80068d8 <__ieee754_rem_pio2+0x3f0>)
 8006872:	2200      	movs	r2, #0
 8006874:	f7f9 fee0 	bl	8000638 <__aeabi_dmul>
 8006878:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800687c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006880:	f04f 0803 	mov.w	r8, #3
 8006884:	2600      	movs	r6, #0
 8006886:	2700      	movs	r7, #0
 8006888:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800688c:	4632      	mov	r2, r6
 800688e:	463b      	mov	r3, r7
 8006890:	46c2      	mov	sl, r8
 8006892:	f108 38ff 	add.w	r8, r8, #4294967295
 8006896:	f7fa f937 	bl	8000b08 <__aeabi_dcmpeq>
 800689a:	2800      	cmp	r0, #0
 800689c:	d1f4      	bne.n	8006888 <__ieee754_rem_pio2+0x3a0>
 800689e:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <__ieee754_rem_pio2+0x3f4>)
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	2302      	movs	r3, #2
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	462a      	mov	r2, r5
 80068a8:	4653      	mov	r3, sl
 80068aa:	4621      	mov	r1, r4
 80068ac:	a806      	add	r0, sp, #24
 80068ae:	f000 f81f 	bl	80068f0 <__kernel_rem_pio2>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	4605      	mov	r5, r0
 80068b8:	f6bf ae53 	bge.w	8006562 <__ieee754_rem_pio2+0x7a>
 80068bc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80068c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068c4:	e9c4 2300 	strd	r2, r3, [r4]
 80068c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80068cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80068d4:	e740      	b.n	8006758 <__ieee754_rem_pio2+0x270>
 80068d6:	bf00      	nop
 80068d8:	41700000 	.word	0x41700000
 80068dc:	0800728c 	.word	0x0800728c

080068e0 <fabs>:
 80068e0:	ec51 0b10 	vmov	r0, r1, d0
 80068e4:	4602      	mov	r2, r0
 80068e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80068ea:	ec43 2b10 	vmov	d0, r2, r3
 80068ee:	4770      	bx	lr

080068f0 <__kernel_rem_pio2>:
 80068f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	ed2d 8b02 	vpush	{d8}
 80068f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80068fc:	f112 0f14 	cmn.w	r2, #20
 8006900:	9306      	str	r3, [sp, #24]
 8006902:	9104      	str	r1, [sp, #16]
 8006904:	4bbe      	ldr	r3, [pc, #760]	@ (8006c00 <__kernel_rem_pio2+0x310>)
 8006906:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006908:	9008      	str	r0, [sp, #32]
 800690a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	9b06      	ldr	r3, [sp, #24]
 8006912:	f103 33ff 	add.w	r3, r3, #4294967295
 8006916:	bfa8      	it	ge
 8006918:	1ed4      	subge	r4, r2, #3
 800691a:	9305      	str	r3, [sp, #20]
 800691c:	bfb2      	itee	lt
 800691e:	2400      	movlt	r4, #0
 8006920:	2318      	movge	r3, #24
 8006922:	fb94 f4f3 	sdivge	r4, r4, r3
 8006926:	f06f 0317 	mvn.w	r3, #23
 800692a:	fb04 3303 	mla	r3, r4, r3, r3
 800692e:	eb03 0b02 	add.w	fp, r3, r2
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	9a05      	ldr	r2, [sp, #20]
 8006936:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006bf0 <__kernel_rem_pio2+0x300>
 800693a:	eb03 0802 	add.w	r8, r3, r2
 800693e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006940:	1aa7      	subs	r7, r4, r2
 8006942:	ae20      	add	r6, sp, #128	@ 0x80
 8006944:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006948:	2500      	movs	r5, #0
 800694a:	4545      	cmp	r5, r8
 800694c:	dd13      	ble.n	8006976 <__kernel_rem_pio2+0x86>
 800694e:	9b06      	ldr	r3, [sp, #24]
 8006950:	aa20      	add	r2, sp, #128	@ 0x80
 8006952:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006956:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	9b00      	ldr	r3, [sp, #0]
 8006960:	4598      	cmp	r8, r3
 8006962:	dc31      	bgt.n	80069c8 <__kernel_rem_pio2+0xd8>
 8006964:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006bf0 <__kernel_rem_pio2+0x300>
 8006968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800696c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006970:	462f      	mov	r7, r5
 8006972:	2600      	movs	r6, #0
 8006974:	e01b      	b.n	80069ae <__kernel_rem_pio2+0xbe>
 8006976:	42ef      	cmn	r7, r5
 8006978:	d407      	bmi.n	800698a <__kernel_rem_pio2+0x9a>
 800697a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800697e:	f7f9 fdf1 	bl	8000564 <__aeabi_i2d>
 8006982:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006986:	3501      	adds	r5, #1
 8006988:	e7df      	b.n	800694a <__kernel_rem_pio2+0x5a>
 800698a:	ec51 0b18 	vmov	r0, r1, d8
 800698e:	e7f8      	b.n	8006982 <__kernel_rem_pio2+0x92>
 8006990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006994:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006998:	f7f9 fe4e 	bl	8000638 <__aeabi_dmul>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a4:	f7f9 fc92 	bl	80002cc <__adddf3>
 80069a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069ac:	3601      	adds	r6, #1
 80069ae:	9b05      	ldr	r3, [sp, #20]
 80069b0:	429e      	cmp	r6, r3
 80069b2:	f1a7 0708 	sub.w	r7, r7, #8
 80069b6:	ddeb      	ble.n	8006990 <__kernel_rem_pio2+0xa0>
 80069b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069bc:	f108 0801 	add.w	r8, r8, #1
 80069c0:	ecaa 7b02 	vstmia	sl!, {d7}
 80069c4:	3508      	adds	r5, #8
 80069c6:	e7ca      	b.n	800695e <__kernel_rem_pio2+0x6e>
 80069c8:	9b00      	ldr	r3, [sp, #0]
 80069ca:	f8dd 8000 	ldr.w	r8, [sp]
 80069ce:	aa0c      	add	r2, sp, #48	@ 0x30
 80069d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80069d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80069dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069de:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80069e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069e4:	ab98      	add	r3, sp, #608	@ 0x260
 80069e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069ea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80069ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069f2:	ac0c      	add	r4, sp, #48	@ 0x30
 80069f4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80069f6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80069fa:	46a1      	mov	r9, r4
 80069fc:	46c2      	mov	sl, r8
 80069fe:	f1ba 0f00 	cmp.w	sl, #0
 8006a02:	f1a5 0508 	sub.w	r5, r5, #8
 8006a06:	dc77      	bgt.n	8006af8 <__kernel_rem_pio2+0x208>
 8006a08:	4658      	mov	r0, fp
 8006a0a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006a0e:	f000 fac7 	bl	8006fa0 <scalbn>
 8006a12:	ec57 6b10 	vmov	r6, r7, d0
 8006a16:	2200      	movs	r2, #0
 8006a18:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f7f9 fe0a 	bl	8000638 <__aeabi_dmul>
 8006a24:	ec41 0b10 	vmov	d0, r0, r1
 8006a28:	f000 fb3a 	bl	80070a0 <floor>
 8006a2c:	4b75      	ldr	r3, [pc, #468]	@ (8006c04 <__kernel_rem_pio2+0x314>)
 8006a2e:	ec51 0b10 	vmov	r0, r1, d0
 8006a32:	2200      	movs	r2, #0
 8006a34:	f7f9 fe00 	bl	8000638 <__aeabi_dmul>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	4639      	mov	r1, r7
 8006a40:	f7f9 fc42 	bl	80002c8 <__aeabi_dsub>
 8006a44:	460f      	mov	r7, r1
 8006a46:	4606      	mov	r6, r0
 8006a48:	f7fa f890 	bl	8000b6c <__aeabi_d2iz>
 8006a4c:	9002      	str	r0, [sp, #8]
 8006a4e:	f7f9 fd89 	bl	8000564 <__aeabi_i2d>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4630      	mov	r0, r6
 8006a58:	4639      	mov	r1, r7
 8006a5a:	f7f9 fc35 	bl	80002c8 <__aeabi_dsub>
 8006a5e:	f1bb 0f00 	cmp.w	fp, #0
 8006a62:	4606      	mov	r6, r0
 8006a64:	460f      	mov	r7, r1
 8006a66:	dd6c      	ble.n	8006b42 <__kernel_rem_pio2+0x252>
 8006a68:	f108 31ff 	add.w	r1, r8, #4294967295
 8006a6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a6e:	9d02      	ldr	r5, [sp, #8]
 8006a70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a74:	f1cb 0018 	rsb	r0, fp, #24
 8006a78:	fa43 f200 	asr.w	r2, r3, r0
 8006a7c:	4415      	add	r5, r2
 8006a7e:	4082      	lsls	r2, r0
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	aa0c      	add	r2, sp, #48	@ 0x30
 8006a84:	9502      	str	r5, [sp, #8]
 8006a86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006a8a:	f1cb 0217 	rsb	r2, fp, #23
 8006a8e:	fa43 f902 	asr.w	r9, r3, r2
 8006a92:	f1b9 0f00 	cmp.w	r9, #0
 8006a96:	dd64      	ble.n	8006b62 <__kernel_rem_pio2+0x272>
 8006a98:	9b02      	ldr	r3, [sp, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	9302      	str	r3, [sp, #8]
 8006aa0:	4615      	mov	r5, r2
 8006aa2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006aa6:	4590      	cmp	r8, r2
 8006aa8:	f300 80b8 	bgt.w	8006c1c <__kernel_rem_pio2+0x32c>
 8006aac:	f1bb 0f00 	cmp.w	fp, #0
 8006ab0:	dd07      	ble.n	8006ac2 <__kernel_rem_pio2+0x1d2>
 8006ab2:	f1bb 0f01 	cmp.w	fp, #1
 8006ab6:	f000 80bf 	beq.w	8006c38 <__kernel_rem_pio2+0x348>
 8006aba:	f1bb 0f02 	cmp.w	fp, #2
 8006abe:	f000 80c6 	beq.w	8006c4e <__kernel_rem_pio2+0x35e>
 8006ac2:	f1b9 0f02 	cmp.w	r9, #2
 8006ac6:	d14c      	bne.n	8006b62 <__kernel_rem_pio2+0x272>
 8006ac8:	4632      	mov	r2, r6
 8006aca:	463b      	mov	r3, r7
 8006acc:	494e      	ldr	r1, [pc, #312]	@ (8006c08 <__kernel_rem_pio2+0x318>)
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f7f9 fbfa 	bl	80002c8 <__aeabi_dsub>
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	d042      	beq.n	8006b62 <__kernel_rem_pio2+0x272>
 8006adc:	4658      	mov	r0, fp
 8006ade:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006bf8 <__kernel_rem_pio2+0x308>
 8006ae2:	f000 fa5d 	bl	8006fa0 <scalbn>
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	ec53 2b10 	vmov	r2, r3, d0
 8006aee:	f7f9 fbeb 	bl	80002c8 <__aeabi_dsub>
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	e034      	b.n	8006b62 <__kernel_rem_pio2+0x272>
 8006af8:	4b44      	ldr	r3, [pc, #272]	@ (8006c0c <__kernel_rem_pio2+0x31c>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b00:	f7f9 fd9a 	bl	8000638 <__aeabi_dmul>
 8006b04:	f7fa f832 	bl	8000b6c <__aeabi_d2iz>
 8006b08:	f7f9 fd2c 	bl	8000564 <__aeabi_i2d>
 8006b0c:	4b40      	ldr	r3, [pc, #256]	@ (8006c10 <__kernel_rem_pio2+0x320>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4606      	mov	r6, r0
 8006b12:	460f      	mov	r7, r1
 8006b14:	f7f9 fd90 	bl	8000638 <__aeabi_dmul>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b20:	f7f9 fbd2 	bl	80002c8 <__aeabi_dsub>
 8006b24:	f7fa f822 	bl	8000b6c <__aeabi_d2iz>
 8006b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b2c:	f849 0b04 	str.w	r0, [r9], #4
 8006b30:	4639      	mov	r1, r7
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7f9 fbca 	bl	80002cc <__adddf3>
 8006b38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b40:	e75d      	b.n	80069fe <__kernel_rem_pio2+0x10e>
 8006b42:	d107      	bne.n	8006b54 <__kernel_rem_pio2+0x264>
 8006b44:	f108 33ff 	add.w	r3, r8, #4294967295
 8006b48:	aa0c      	add	r2, sp, #48	@ 0x30
 8006b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006b52:	e79e      	b.n	8006a92 <__kernel_rem_pio2+0x1a2>
 8006b54:	4b2f      	ldr	r3, [pc, #188]	@ (8006c14 <__kernel_rem_pio2+0x324>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	f7f9 fff4 	bl	8000b44 <__aeabi_dcmpge>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d143      	bne.n	8006be8 <__kernel_rem_pio2+0x2f8>
 8006b60:	4681      	mov	r9, r0
 8006b62:	2200      	movs	r2, #0
 8006b64:	2300      	movs	r3, #0
 8006b66:	4630      	mov	r0, r6
 8006b68:	4639      	mov	r1, r7
 8006b6a:	f7f9 ffcd 	bl	8000b08 <__aeabi_dcmpeq>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f000 80bf 	beq.w	8006cf2 <__kernel_rem_pio2+0x402>
 8006b74:	f108 33ff 	add.w	r3, r8, #4294967295
 8006b78:	2200      	movs	r2, #0
 8006b7a:	9900      	ldr	r1, [sp, #0]
 8006b7c:	428b      	cmp	r3, r1
 8006b7e:	da6e      	bge.n	8006c5e <__kernel_rem_pio2+0x36e>
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	f000 8089 	beq.w	8006c98 <__kernel_rem_pio2+0x3a8>
 8006b86:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b8c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006b90:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f6      	beq.n	8006b86 <__kernel_rem_pio2+0x296>
 8006b98:	4658      	mov	r0, fp
 8006b9a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006bf8 <__kernel_rem_pio2+0x308>
 8006b9e:	f000 f9ff 	bl	8006fa0 <scalbn>
 8006ba2:	f108 0301 	add.w	r3, r8, #1
 8006ba6:	00da      	lsls	r2, r3, #3
 8006ba8:	9205      	str	r2, [sp, #20]
 8006baa:	ec55 4b10 	vmov	r4, r5, d0
 8006bae:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006bb0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006c0c <__kernel_rem_pio2+0x31c>
 8006bb4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006bb8:	4646      	mov	r6, r8
 8006bba:	f04f 0a00 	mov.w	sl, #0
 8006bbe:	2e00      	cmp	r6, #0
 8006bc0:	f280 80cf 	bge.w	8006d62 <__kernel_rem_pio2+0x472>
 8006bc4:	4644      	mov	r4, r8
 8006bc6:	2c00      	cmp	r4, #0
 8006bc8:	f2c0 80fd 	blt.w	8006dc6 <__kernel_rem_pio2+0x4d6>
 8006bcc:	4b12      	ldr	r3, [pc, #72]	@ (8006c18 <__kernel_rem_pio2+0x328>)
 8006bce:	461f      	mov	r7, r3
 8006bd0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006bd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bd6:	9306      	str	r3, [sp, #24]
 8006bd8:	f04f 0a00 	mov.w	sl, #0
 8006bdc:	f04f 0b00 	mov.w	fp, #0
 8006be0:	2600      	movs	r6, #0
 8006be2:	eba8 0504 	sub.w	r5, r8, r4
 8006be6:	e0e2      	b.n	8006dae <__kernel_rem_pio2+0x4be>
 8006be8:	f04f 0902 	mov.w	r9, #2
 8006bec:	e754      	b.n	8006a98 <__kernel_rem_pio2+0x1a8>
 8006bee:	bf00      	nop
	...
 8006bfc:	3ff00000 	.word	0x3ff00000
 8006c00:	080073d8 	.word	0x080073d8
 8006c04:	40200000 	.word	0x40200000
 8006c08:	3ff00000 	.word	0x3ff00000
 8006c0c:	3e700000 	.word	0x3e700000
 8006c10:	41700000 	.word	0x41700000
 8006c14:	3fe00000 	.word	0x3fe00000
 8006c18:	08007398 	.word	0x08007398
 8006c1c:	f854 3b04 	ldr.w	r3, [r4], #4
 8006c20:	b945      	cbnz	r5, 8006c34 <__kernel_rem_pio2+0x344>
 8006c22:	b123      	cbz	r3, 8006c2e <__kernel_rem_pio2+0x33e>
 8006c24:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006c28:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	3201      	adds	r2, #1
 8006c30:	461d      	mov	r5, r3
 8006c32:	e738      	b.n	8006aa6 <__kernel_rem_pio2+0x1b6>
 8006c34:	1acb      	subs	r3, r1, r3
 8006c36:	e7f7      	b.n	8006c28 <__kernel_rem_pio2+0x338>
 8006c38:	f108 32ff 	add.w	r2, r8, #4294967295
 8006c3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c42:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006c46:	a90c      	add	r1, sp, #48	@ 0x30
 8006c48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006c4c:	e739      	b.n	8006ac2 <__kernel_rem_pio2+0x1d2>
 8006c4e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006c52:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006c5c:	e7f3      	b.n	8006c46 <__kernel_rem_pio2+0x356>
 8006c5e:	a90c      	add	r1, sp, #48	@ 0x30
 8006c60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	430a      	orrs	r2, r1
 8006c68:	e787      	b.n	8006b7a <__kernel_rem_pio2+0x28a>
 8006c6a:	3401      	adds	r4, #1
 8006c6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	d0fa      	beq.n	8006c6a <__kernel_rem_pio2+0x37a>
 8006c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006c7a:	eb0d 0503 	add.w	r5, sp, r3
 8006c7e:	9b06      	ldr	r3, [sp, #24]
 8006c80:	aa20      	add	r2, sp, #128	@ 0x80
 8006c82:	4443      	add	r3, r8
 8006c84:	f108 0701 	add.w	r7, r8, #1
 8006c88:	3d98      	subs	r5, #152	@ 0x98
 8006c8a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006c8e:	4444      	add	r4, r8
 8006c90:	42bc      	cmp	r4, r7
 8006c92:	da04      	bge.n	8006c9e <__kernel_rem_pio2+0x3ae>
 8006c94:	46a0      	mov	r8, r4
 8006c96:	e6a2      	b.n	80069de <__kernel_rem_pio2+0xee>
 8006c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c9a:	2401      	movs	r4, #1
 8006c9c:	e7e6      	b.n	8006c6c <__kernel_rem_pio2+0x37c>
 8006c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006ca4:	f7f9 fc5e 	bl	8000564 <__aeabi_i2d>
 8006ca8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006f70 <__kernel_rem_pio2+0x680>
 8006cac:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006cb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cb8:	46b2      	mov	sl, r6
 8006cba:	f04f 0800 	mov.w	r8, #0
 8006cbe:	9b05      	ldr	r3, [sp, #20]
 8006cc0:	4598      	cmp	r8, r3
 8006cc2:	dd05      	ble.n	8006cd0 <__kernel_rem_pio2+0x3e0>
 8006cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cc8:	3701      	adds	r7, #1
 8006cca:	eca5 7b02 	vstmia	r5!, {d7}
 8006cce:	e7df      	b.n	8006c90 <__kernel_rem_pio2+0x3a0>
 8006cd0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006cd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006cd8:	f7f9 fcae 	bl	8000638 <__aeabi_dmul>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce4:	f7f9 faf2 	bl	80002cc <__adddf3>
 8006ce8:	f108 0801 	add.w	r8, r8, #1
 8006cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cf0:	e7e5      	b.n	8006cbe <__kernel_rem_pio2+0x3ce>
 8006cf2:	f1cb 0000 	rsb	r0, fp, #0
 8006cf6:	ec47 6b10 	vmov	d0, r6, r7
 8006cfa:	f000 f951 	bl	8006fa0 <scalbn>
 8006cfe:	ec55 4b10 	vmov	r4, r5, d0
 8006d02:	4b9d      	ldr	r3, [pc, #628]	@ (8006f78 <__kernel_rem_pio2+0x688>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	4620      	mov	r0, r4
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 ff1b 	bl	8000b44 <__aeabi_dcmpge>
 8006d0e:	b300      	cbz	r0, 8006d52 <__kernel_rem_pio2+0x462>
 8006d10:	4b9a      	ldr	r3, [pc, #616]	@ (8006f7c <__kernel_rem_pio2+0x68c>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 fc8e 	bl	8000638 <__aeabi_dmul>
 8006d1c:	f7f9 ff26 	bl	8000b6c <__aeabi_d2iz>
 8006d20:	4606      	mov	r6, r0
 8006d22:	f7f9 fc1f 	bl	8000564 <__aeabi_i2d>
 8006d26:	4b94      	ldr	r3, [pc, #592]	@ (8006f78 <__kernel_rem_pio2+0x688>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f7f9 fc85 	bl	8000638 <__aeabi_dmul>
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4602      	mov	r2, r0
 8006d32:	4629      	mov	r1, r5
 8006d34:	4620      	mov	r0, r4
 8006d36:	f7f9 fac7 	bl	80002c8 <__aeabi_dsub>
 8006d3a:	f7f9 ff17 	bl	8000b6c <__aeabi_d2iz>
 8006d3e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d40:	f10b 0b18 	add.w	fp, fp, #24
 8006d44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006d48:	f108 0801 	add.w	r8, r8, #1
 8006d4c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006d50:	e722      	b.n	8006b98 <__kernel_rem_pio2+0x2a8>
 8006d52:	4620      	mov	r0, r4
 8006d54:	4629      	mov	r1, r5
 8006d56:	f7f9 ff09 	bl	8000b6c <__aeabi_d2iz>
 8006d5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d5c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006d60:	e71a      	b.n	8006b98 <__kernel_rem_pio2+0x2a8>
 8006d62:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d68:	f7f9 fbfc 	bl	8000564 <__aeabi_i2d>
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	462b      	mov	r3, r5
 8006d70:	f7f9 fc62 	bl	8000638 <__aeabi_dmul>
 8006d74:	4652      	mov	r2, sl
 8006d76:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fc5a 	bl	8000638 <__aeabi_dmul>
 8006d84:	3e01      	subs	r6, #1
 8006d86:	4604      	mov	r4, r0
 8006d88:	460d      	mov	r5, r1
 8006d8a:	e718      	b.n	8006bbe <__kernel_rem_pio2+0x2ce>
 8006d8c:	9906      	ldr	r1, [sp, #24]
 8006d8e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006d92:	9106      	str	r1, [sp, #24]
 8006d94:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006d98:	f7f9 fc4e 	bl	8000638 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4650      	mov	r0, sl
 8006da2:	4659      	mov	r1, fp
 8006da4:	f7f9 fa92 	bl	80002cc <__adddf3>
 8006da8:	3601      	adds	r6, #1
 8006daa:	4682      	mov	sl, r0
 8006dac:	468b      	mov	fp, r1
 8006dae:	9b00      	ldr	r3, [sp, #0]
 8006db0:	429e      	cmp	r6, r3
 8006db2:	dc01      	bgt.n	8006db8 <__kernel_rem_pio2+0x4c8>
 8006db4:	42b5      	cmp	r5, r6
 8006db6:	dae9      	bge.n	8006d8c <__kernel_rem_pio2+0x49c>
 8006db8:	ab48      	add	r3, sp, #288	@ 0x120
 8006dba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006dbe:	e9c5 ab00 	strd	sl, fp, [r5]
 8006dc2:	3c01      	subs	r4, #1
 8006dc4:	e6ff      	b.n	8006bc6 <__kernel_rem_pio2+0x2d6>
 8006dc6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	dc0b      	bgt.n	8006de4 <__kernel_rem_pio2+0x4f4>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dc39      	bgt.n	8006e44 <__kernel_rem_pio2+0x554>
 8006dd0:	d05d      	beq.n	8006e8e <__kernel_rem_pio2+0x59e>
 8006dd2:	9b02      	ldr	r3, [sp, #8]
 8006dd4:	f003 0007 	and.w	r0, r3, #7
 8006dd8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006ddc:	ecbd 8b02 	vpop	{d8}
 8006de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d1f3      	bne.n	8006dd2 <__kernel_rem_pio2+0x4e2>
 8006dea:	9b05      	ldr	r3, [sp, #20]
 8006dec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006df0:	eb0d 0403 	add.w	r4, sp, r3
 8006df4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006df8:	4625      	mov	r5, r4
 8006dfa:	46c2      	mov	sl, r8
 8006dfc:	f1ba 0f00 	cmp.w	sl, #0
 8006e00:	f1a5 0508 	sub.w	r5, r5, #8
 8006e04:	dc6b      	bgt.n	8006ede <__kernel_rem_pio2+0x5ee>
 8006e06:	4645      	mov	r5, r8
 8006e08:	2d01      	cmp	r5, #1
 8006e0a:	f1a4 0408 	sub.w	r4, r4, #8
 8006e0e:	f300 8087 	bgt.w	8006f20 <__kernel_rem_pio2+0x630>
 8006e12:	9c05      	ldr	r4, [sp, #20]
 8006e14:	ab48      	add	r3, sp, #288	@ 0x120
 8006e16:	441c      	add	r4, r3
 8006e18:	2000      	movs	r0, #0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	f1b8 0f01 	cmp.w	r8, #1
 8006e20:	f300 809c 	bgt.w	8006f5c <__kernel_rem_pio2+0x66c>
 8006e24:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006e28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006e2c:	f1b9 0f00 	cmp.w	r9, #0
 8006e30:	f040 80a6 	bne.w	8006f80 <__kernel_rem_pio2+0x690>
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	e9c3 7800 	strd	r7, r8, [r3]
 8006e3a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006e3e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006e42:	e7c6      	b.n	8006dd2 <__kernel_rem_pio2+0x4e2>
 8006e44:	9d05      	ldr	r5, [sp, #20]
 8006e46:	ab48      	add	r3, sp, #288	@ 0x120
 8006e48:	441d      	add	r5, r3
 8006e4a:	4644      	mov	r4, r8
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	2c00      	cmp	r4, #0
 8006e52:	da35      	bge.n	8006ec0 <__kernel_rem_pio2+0x5d0>
 8006e54:	f1b9 0f00 	cmp.w	r9, #0
 8006e58:	d038      	beq.n	8006ecc <__kernel_rem_pio2+0x5dc>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e60:	9c04      	ldr	r4, [sp, #16]
 8006e62:	e9c4 2300 	strd	r2, r3, [r4]
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006e6e:	f7f9 fa2b 	bl	80002c8 <__aeabi_dsub>
 8006e72:	ad4a      	add	r5, sp, #296	@ 0x128
 8006e74:	2401      	movs	r4, #1
 8006e76:	45a0      	cmp	r8, r4
 8006e78:	da2b      	bge.n	8006ed2 <__kernel_rem_pio2+0x5e2>
 8006e7a:	f1b9 0f00 	cmp.w	r9, #0
 8006e7e:	d002      	beq.n	8006e86 <__kernel_rem_pio2+0x596>
 8006e80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e84:	4619      	mov	r1, r3
 8006e86:	9b04      	ldr	r3, [sp, #16]
 8006e88:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e8c:	e7a1      	b.n	8006dd2 <__kernel_rem_pio2+0x4e2>
 8006e8e:	9c05      	ldr	r4, [sp, #20]
 8006e90:	ab48      	add	r3, sp, #288	@ 0x120
 8006e92:	441c      	add	r4, r3
 8006e94:	2000      	movs	r0, #0
 8006e96:	2100      	movs	r1, #0
 8006e98:	f1b8 0f00 	cmp.w	r8, #0
 8006e9c:	da09      	bge.n	8006eb2 <__kernel_rem_pio2+0x5c2>
 8006e9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ea2:	d002      	beq.n	8006eaa <__kernel_rem_pio2+0x5ba>
 8006ea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	9b04      	ldr	r3, [sp, #16]
 8006eac:	e9c3 0100 	strd	r0, r1, [r3]
 8006eb0:	e78f      	b.n	8006dd2 <__kernel_rem_pio2+0x4e2>
 8006eb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006eb6:	f7f9 fa09 	bl	80002cc <__adddf3>
 8006eba:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ebe:	e7eb      	b.n	8006e98 <__kernel_rem_pio2+0x5a8>
 8006ec0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006ec4:	f7f9 fa02 	bl	80002cc <__adddf3>
 8006ec8:	3c01      	subs	r4, #1
 8006eca:	e7c1      	b.n	8006e50 <__kernel_rem_pio2+0x560>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	e7c6      	b.n	8006e60 <__kernel_rem_pio2+0x570>
 8006ed2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006ed6:	f7f9 f9f9 	bl	80002cc <__adddf3>
 8006eda:	3401      	adds	r4, #1
 8006edc:	e7cb      	b.n	8006e76 <__kernel_rem_pio2+0x586>
 8006ede:	ed95 7b00 	vldr	d7, [r5]
 8006ee2:	ed8d 7b00 	vstr	d7, [sp]
 8006ee6:	ed95 7b02 	vldr	d7, [r5, #8]
 8006eea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eee:	ec53 2b17 	vmov	r2, r3, d7
 8006ef2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ef6:	f7f9 f9e9 	bl	80002cc <__adddf3>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f06:	f7f9 f9df 	bl	80002c8 <__aeabi_dsub>
 8006f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f0e:	f7f9 f9dd 	bl	80002cc <__adddf3>
 8006f12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f16:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006f1a:	e9c5 6700 	strd	r6, r7, [r5]
 8006f1e:	e76d      	b.n	8006dfc <__kernel_rem_pio2+0x50c>
 8006f20:	ed94 7b00 	vldr	d7, [r4]
 8006f24:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006f28:	ec51 0b17 	vmov	r0, r1, d7
 8006f2c:	4652      	mov	r2, sl
 8006f2e:	465b      	mov	r3, fp
 8006f30:	ed8d 7b00 	vstr	d7, [sp]
 8006f34:	f7f9 f9ca 	bl	80002cc <__adddf3>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	460f      	mov	r7, r1
 8006f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f44:	f7f9 f9c0 	bl	80002c8 <__aeabi_dsub>
 8006f48:	4652      	mov	r2, sl
 8006f4a:	465b      	mov	r3, fp
 8006f4c:	f7f9 f9be 	bl	80002cc <__adddf3>
 8006f50:	3d01      	subs	r5, #1
 8006f52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f56:	e9c4 6700 	strd	r6, r7, [r4]
 8006f5a:	e755      	b.n	8006e08 <__kernel_rem_pio2+0x518>
 8006f5c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006f60:	f7f9 f9b4 	bl	80002cc <__adddf3>
 8006f64:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f68:	e758      	b.n	8006e1c <__kernel_rem_pio2+0x52c>
 8006f6a:	bf00      	nop
 8006f6c:	f3af 8000 	nop.w
	...
 8006f78:	41700000 	.word	0x41700000
 8006f7c:	3e700000 	.word	0x3e700000
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	9a04      	ldr	r2, [sp, #16]
 8006f84:	601f      	str	r7, [r3, #0]
 8006f86:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006f8a:	605c      	str	r4, [r3, #4]
 8006f8c:	609d      	str	r5, [r3, #8]
 8006f8e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f92:	60d3      	str	r3, [r2, #12]
 8006f94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f98:	6110      	str	r0, [r2, #16]
 8006f9a:	6153      	str	r3, [r2, #20]
 8006f9c:	e719      	b.n	8006dd2 <__kernel_rem_pio2+0x4e2>
 8006f9e:	bf00      	nop

08006fa0 <scalbn>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	ec55 4b10 	vmov	r4, r5, d0
 8006fa6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006faa:	4606      	mov	r6, r0
 8006fac:	462b      	mov	r3, r5
 8006fae:	b991      	cbnz	r1, 8006fd6 <scalbn+0x36>
 8006fb0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006fb4:	4323      	orrs	r3, r4
 8006fb6:	d03d      	beq.n	8007034 <scalbn+0x94>
 8006fb8:	4b35      	ldr	r3, [pc, #212]	@ (8007090 <scalbn+0xf0>)
 8006fba:	4620      	mov	r0, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f7f9 fb3a 	bl	8000638 <__aeabi_dmul>
 8006fc4:	4b33      	ldr	r3, [pc, #204]	@ (8007094 <scalbn+0xf4>)
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	4604      	mov	r4, r0
 8006fca:	460d      	mov	r5, r1
 8006fcc:	da0f      	bge.n	8006fee <scalbn+0x4e>
 8006fce:	a328      	add	r3, pc, #160	@ (adr r3, 8007070 <scalbn+0xd0>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	e01e      	b.n	8007014 <scalbn+0x74>
 8006fd6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006fda:	4291      	cmp	r1, r2
 8006fdc:	d10b      	bne.n	8006ff6 <scalbn+0x56>
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f7f9 f972 	bl	80002cc <__adddf3>
 8006fe8:	4604      	mov	r4, r0
 8006fea:	460d      	mov	r5, r1
 8006fec:	e022      	b.n	8007034 <scalbn+0x94>
 8006fee:	460b      	mov	r3, r1
 8006ff0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006ff4:	3936      	subs	r1, #54	@ 0x36
 8006ff6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006ffa:	4296      	cmp	r6, r2
 8006ffc:	dd0d      	ble.n	800701a <scalbn+0x7a>
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	a11d      	add	r1, pc, #116	@ (adr r1, 8007078 <scalbn+0xd8>)
 8007002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007006:	da02      	bge.n	800700e <scalbn+0x6e>
 8007008:	a11d      	add	r1, pc, #116	@ (adr r1, 8007080 <scalbn+0xe0>)
 800700a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800700e:	a31a      	add	r3, pc, #104	@ (adr r3, 8007078 <scalbn+0xd8>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 fb10 	bl	8000638 <__aeabi_dmul>
 8007018:	e7e6      	b.n	8006fe8 <scalbn+0x48>
 800701a:	1872      	adds	r2, r6, r1
 800701c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007020:	428a      	cmp	r2, r1
 8007022:	dcec      	bgt.n	8006ffe <scalbn+0x5e>
 8007024:	2a00      	cmp	r2, #0
 8007026:	dd08      	ble.n	800703a <scalbn+0x9a>
 8007028:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800702c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007030:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007034:	ec45 4b10 	vmov	d0, r4, r5
 8007038:	bd70      	pop	{r4, r5, r6, pc}
 800703a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800703e:	da08      	bge.n	8007052 <scalbn+0xb2>
 8007040:	2d00      	cmp	r5, #0
 8007042:	a10b      	add	r1, pc, #44	@ (adr r1, 8007070 <scalbn+0xd0>)
 8007044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007048:	dac1      	bge.n	8006fce <scalbn+0x2e>
 800704a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007088 <scalbn+0xe8>)
 800704c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007050:	e7bd      	b.n	8006fce <scalbn+0x2e>
 8007052:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007056:	3236      	adds	r2, #54	@ 0x36
 8007058:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800705c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007060:	4620      	mov	r0, r4
 8007062:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <scalbn+0xf8>)
 8007064:	4629      	mov	r1, r5
 8007066:	2200      	movs	r2, #0
 8007068:	e7d4      	b.n	8007014 <scalbn+0x74>
 800706a:	bf00      	nop
 800706c:	f3af 8000 	nop.w
 8007070:	c2f8f359 	.word	0xc2f8f359
 8007074:	01a56e1f 	.word	0x01a56e1f
 8007078:	8800759c 	.word	0x8800759c
 800707c:	7e37e43c 	.word	0x7e37e43c
 8007080:	8800759c 	.word	0x8800759c
 8007084:	fe37e43c 	.word	0xfe37e43c
 8007088:	c2f8f359 	.word	0xc2f8f359
 800708c:	81a56e1f 	.word	0x81a56e1f
 8007090:	43500000 	.word	0x43500000
 8007094:	ffff3cb0 	.word	0xffff3cb0
 8007098:	3c900000 	.word	0x3c900000
 800709c:	00000000 	.word	0x00000000

080070a0 <floor>:
 80070a0:	ec51 0b10 	vmov	r0, r1, d0
 80070a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80070a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80070b0:	2e13      	cmp	r6, #19
 80070b2:	460c      	mov	r4, r1
 80070b4:	4605      	mov	r5, r0
 80070b6:	4680      	mov	r8, r0
 80070b8:	dc34      	bgt.n	8007124 <floor+0x84>
 80070ba:	2e00      	cmp	r6, #0
 80070bc:	da17      	bge.n	80070ee <floor+0x4e>
 80070be:	a332      	add	r3, pc, #200	@ (adr r3, 8007188 <floor+0xe8>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f7f9 f902 	bl	80002cc <__adddf3>
 80070c8:	2200      	movs	r2, #0
 80070ca:	2300      	movs	r3, #0
 80070cc:	f7f9 fd44 	bl	8000b58 <__aeabi_dcmpgt>
 80070d0:	b150      	cbz	r0, 80070e8 <floor+0x48>
 80070d2:	2c00      	cmp	r4, #0
 80070d4:	da55      	bge.n	8007182 <floor+0xe2>
 80070d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80070da:	432c      	orrs	r4, r5
 80070dc:	2500      	movs	r5, #0
 80070de:	42ac      	cmp	r4, r5
 80070e0:	4c2b      	ldr	r4, [pc, #172]	@ (8007190 <floor+0xf0>)
 80070e2:	bf08      	it	eq
 80070e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	e023      	b.n	8007136 <floor+0x96>
 80070ee:	4f29      	ldr	r7, [pc, #164]	@ (8007194 <floor+0xf4>)
 80070f0:	4137      	asrs	r7, r6
 80070f2:	ea01 0307 	and.w	r3, r1, r7
 80070f6:	4303      	orrs	r3, r0
 80070f8:	d01d      	beq.n	8007136 <floor+0x96>
 80070fa:	a323      	add	r3, pc, #140	@ (adr r3, 8007188 <floor+0xe8>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f7f9 f8e4 	bl	80002cc <__adddf3>
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	f7f9 fd26 	bl	8000b58 <__aeabi_dcmpgt>
 800710c:	2800      	cmp	r0, #0
 800710e:	d0eb      	beq.n	80070e8 <floor+0x48>
 8007110:	2c00      	cmp	r4, #0
 8007112:	bfbe      	ittt	lt
 8007114:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007118:	4133      	asrlt	r3, r6
 800711a:	18e4      	addlt	r4, r4, r3
 800711c:	ea24 0407 	bic.w	r4, r4, r7
 8007120:	2500      	movs	r5, #0
 8007122:	e7e1      	b.n	80070e8 <floor+0x48>
 8007124:	2e33      	cmp	r6, #51	@ 0x33
 8007126:	dd0a      	ble.n	800713e <floor+0x9e>
 8007128:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800712c:	d103      	bne.n	8007136 <floor+0x96>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	f7f9 f8cb 	bl	80002cc <__adddf3>
 8007136:	ec41 0b10 	vmov	d0, r0, r1
 800713a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800713e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007142:	f04f 37ff 	mov.w	r7, #4294967295
 8007146:	40df      	lsrs	r7, r3
 8007148:	4207      	tst	r7, r0
 800714a:	d0f4      	beq.n	8007136 <floor+0x96>
 800714c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007188 <floor+0xe8>)
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	f7f9 f8bb 	bl	80002cc <__adddf3>
 8007156:	2200      	movs	r2, #0
 8007158:	2300      	movs	r3, #0
 800715a:	f7f9 fcfd 	bl	8000b58 <__aeabi_dcmpgt>
 800715e:	2800      	cmp	r0, #0
 8007160:	d0c2      	beq.n	80070e8 <floor+0x48>
 8007162:	2c00      	cmp	r4, #0
 8007164:	da0a      	bge.n	800717c <floor+0xdc>
 8007166:	2e14      	cmp	r6, #20
 8007168:	d101      	bne.n	800716e <floor+0xce>
 800716a:	3401      	adds	r4, #1
 800716c:	e006      	b.n	800717c <floor+0xdc>
 800716e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007172:	2301      	movs	r3, #1
 8007174:	40b3      	lsls	r3, r6
 8007176:	441d      	add	r5, r3
 8007178:	4545      	cmp	r5, r8
 800717a:	d3f6      	bcc.n	800716a <floor+0xca>
 800717c:	ea25 0507 	bic.w	r5, r5, r7
 8007180:	e7b2      	b.n	80070e8 <floor+0x48>
 8007182:	2500      	movs	r5, #0
 8007184:	462c      	mov	r4, r5
 8007186:	e7af      	b.n	80070e8 <floor+0x48>
 8007188:	8800759c 	.word	0x8800759c
 800718c:	7e37e43c 	.word	0x7e37e43c
 8007190:	bff00000 	.word	0xbff00000
 8007194:	000fffff 	.word	0x000fffff

08007198 <_init>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr

080071a4 <_fini>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr
