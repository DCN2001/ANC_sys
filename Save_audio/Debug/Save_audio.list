
Save_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006568  08006568  00007568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006760  08006760  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  08006760  08006760  00007760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006768  08006768  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006768  08006768  00007768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006770  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000018  08006788  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08006788  00008280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be0b  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002032  00000000  00000000  00013e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00015e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ab  00000000  00000000  00016778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a66  00000000  00000000  00016e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0cc  00000000  00000000  00038889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbb90  00000000  00000000  00044955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  001104e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c8  00000000  00000000  001105a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00112d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d95  00000000  00000000  00112dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00113b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006550 	.word	0x08006550

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08006550 	.word	0x08006550

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <check_s1_pressed>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool check_s1_pressed()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    uint32_t current_time = HAL_GetTick(); // ?  ?? 當??  ?  ??
 8000e9a:	f000 ff4d 	bl	8001d38 <HAL_GetTick>
 8000e9e:	6038      	str	r0, [r7, #0]

    //  ?活第 ?行 ? R1 ?
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // 設置 R1 ?  高電 ?
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2140      	movs	r1, #64	@ 0x40
 8000ea4:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <check_s1_pressed+0x54>)
 8000ea6:	f001 fd81 	bl	80029ac <HAL_GPIO_WritePin>

    // 檢測 C1（GPIOA_PIN_8）是?  ?  高電 ?
    bool pressed = false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 8000eae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eb2:	480e      	ldr	r0, [pc, #56]	@ (8000eec <check_s1_pressed+0x58>)
 8000eb4:	f001 fd62 	bl	800297c <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d10a      	bne.n	8000ed4 <check_s1_pressed+0x40>
    {
        if (current_time - last_press_time > 200) // 200ms 消 ??
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <check_s1_pressed+0x5c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ec8:	d904      	bls.n	8000ed4 <check_s1_pressed+0x40>
        {
            pressed = true; // 設 ? 為??  ??
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
            last_press_time = current_time; // ?  ?  ??後 ?  ?  ?  ?  ??
 8000ece:	4a08      	ldr	r2, [pc, #32]	@ (8000ef0 <check_s1_pressed+0x5c>)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	6013      	str	r3, [r2, #0]
        }
    }

    //  ? R1 ?  復為低電 ?
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2140      	movs	r1, #64	@ 0x40
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <check_s1_pressed+0x54>)
 8000eda:	f001 fd67 	bl	80029ac <HAL_GPIO_WritePin>

    return pressed;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	20000274 	.word	0x20000274

08000ef4 <check_specific_button_pressed>:

bool check_specific_button_pressed(int button_id)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    int row, col;

    // Map button_id to row and column
    map_button_to_row_col(button_id, &row, &col);
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f830 	bl	8000f6c <map_button_to_row_col>

    // Activate the specific row (R1~R4 -> PC6~PC9)
    HAL_GPIO_WritePin(GPIOC, 1 << (row + 6), GPIO_PIN_SET); // Set the corresponding row high
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	3306      	adds	r3, #6
 8000f10:	2201      	movs	r2, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <check_specific_button_pressed+0x70>)
 8000f1e:	f001 fd45 	bl	80029ac <HAL_GPIO_WritePin>

    // Check if the corresponding column (C1~C4 -> PA8~PA11) is high
    bool pressed = HAL_GPIO_ReadPin(GPIOA, 1 << (col + 8)) == GPIO_PIN_SET;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3308      	adds	r3, #8
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <check_specific_button_pressed+0x74>)
 8000f32:	f001 fd23 	bl	800297c <HAL_GPIO_ReadPin>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]

    // Reset the row to low
    HAL_GPIO_WritePin(GPIOC, 1 << (row + 6), GPIO_PIN_RESET);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	3306      	adds	r3, #6
 8000f46:	2201      	movs	r2, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <check_specific_button_pressed+0x70>)
 8000f54:	f001 fd2a 	bl	80029ac <HAL_GPIO_WritePin>

    return pressed;
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020000 	.word	0x40020000

08000f6c <map_button_to_row_col>:

// Function to map a button ID to row and column
void map_button_to_row_col(int button_id, int *row, int *col)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
    *row = (button_id - 1) / 4; // Calculate row (0 to 3)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da00      	bge.n	8000f82 <map_button_to_row_col+0x16>
 8000f80:	3303      	adds	r3, #3
 8000f82:	109b      	asrs	r3, r3, #2
 8000f84:	461a      	mov	r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	601a      	str	r2, [r3, #0]
    *col = (button_id - 1) % 4; // Calculate column (0 to 3)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	425a      	negs	r2, r3
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	bf58      	it	pl
 8000f9a:	4253      	negpl	r3, r2
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	0000      	movs	r0, r0
	...

08000fb0 <lowpass_fir>:
        }
    }
}

void lowpass_fir(float32_t* coeffs, int num_taps, float cutoff)
{
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	ed87 0a01 	vstr	s0, [r7, #4]
    int M = num_taps - 1;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
    for (int n = 0; n < num_taps; n++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e09f      	b.n	800110a <lowpass_fir+0x15a>
    {
        if (n == M / 2)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	0fda      	lsrs	r2, r3, #31
 8000fce:	4413      	add	r3, r2
 8000fd0:	105b      	asrs	r3, r3, #1
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d10a      	bne.n	8000ff0 <lowpass_fir+0x40>
        {
            coeffs[n] = 2 * cutoff;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fea:	edc3 7a00 	vstr	s15, [r3]
 8000fee:	e089      	b.n	8001104 <lowpass_fir+0x154>
        }
        else
        {
            coeffs[n] = sin(2 * PI * cutoff * (n - M / 2)) / (PI * (n - M / 2));
 8000ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff4:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001130 <lowpass_fir+0x180>
 8000ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	0fda      	lsrs	r2, r3, #31
 8001000:	4413      	add	r3, r2
 8001002:	105b      	asrs	r3, r3, #1
 8001004:	425b      	negs	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4413      	add	r3, r2
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff fa58 	bl	80004d0 <__aeabi_f2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	ec43 2b10 	vmov	d0, r2, r3
 8001028:	f004 fa62 	bl	80054f0 <sin>
 800102c:	ec55 4b10 	vmov	r4, r5, d0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	0fda      	lsrs	r2, r3, #31
 8001034:	4413      	add	r3, r2
 8001036:	105b      	asrs	r3, r3, #1
 8001038:	425b      	negs	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	4413      	add	r3, r2
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001048:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001134 <lowpass_fir+0x184>
 800104c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001050:	ee17 0a90 	vmov	r0, s15
 8001054:	f7ff fa3c 	bl	80004d0 <__aeabi_f2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff fbb8 	bl	80007d4 <__aeabi_ddiv>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	18d4      	adds	r4, r2, r3
 8001074:	f7ff fd46 	bl	8000b04 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	6023      	str	r3, [r4, #0]
            coeffs[n] *= (0.54 - 0.46 * cos(2 * PI * n / M));  // 使用 Hamming  ?
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa22 	bl	80004d0 <__aeabi_f2d>
 800108c:	4604      	mov	r4, r0
 800108e:	460d      	mov	r5, r1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001130 <lowpass_fir+0x180>
 800109e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010b0:	ee16 0a90 	vmov	r0, s13
 80010b4:	f7ff fa0c 	bl	80004d0 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b10 	vmov	d0, r2, r3
 80010c0:	f004 f9c2 	bl	8005448 <cos>
 80010c4:	ec51 0b10 	vmov	r0, r1, d0
 80010c8:	a315      	add	r3, pc, #84	@ (adr r3, 8001120 <lowpass_fir+0x170>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fa57 	bl	8000580 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	a114      	add	r1, pc, #80	@ (adr r1, 8001128 <lowpass_fir+0x178>)
 80010d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010dc:	f7ff f898 	bl	8000210 <__aeabi_dsub>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fa4a 	bl	8000580 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	18d4      	adds	r4, r2, r3
 80010fc:	f7ff fd02 	bl	8000b04 <__aeabi_d2f>
 8001100:	4603      	mov	r3, r0
 8001102:	6023      	str	r3, [r4, #0]
    for (int n = 0; n < num_taps; n++)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	429a      	cmp	r2, r3
 8001110:	f6ff af5b 	blt.w	8000fca <lowpass_fir+0x1a>
        }
    }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bdb0      	pop	{r4, r5, r7, pc}
 800111e:	bf00      	nop
 8001120:	d70a3d71 	.word	0xd70a3d71
 8001124:	3fdd70a3 	.word	0x3fdd70a3
 8001128:	147ae148 	.word	0x147ae148
 800112c:	3fe147ae 	.word	0x3fe147ae
 8001130:	40c90fdb 	.word	0x40c90fdb
 8001134:	40490fdb 	.word	0x40490fdb

08001138 <init_filter>:

void init_filter()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af02      	add	r7, sp, #8
	LOW_CUTOFF = low_cutoff / 16000.0f;
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <init_filter+0x58>)
 8001140:	ed93 7a00 	vldr	s14, [r3]
 8001144:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001194 <init_filter+0x5c>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <init_filter+0x60>)
 800114e:	edc3 7a00 	vstr	s15, [r3]
	HIGH_CUTOFF = high_cutoff / 16000.0f;							//If using lowpass filter
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <init_filter+0x64>)
 8001154:	ed93 7a00 	vldr	s14, [r3]
 8001158:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001194 <init_filter+0x5c>
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <init_filter+0x68>)
 8001162:	edc3 7a00 	vstr	s15, [r3]
    //bandpass_fir(firCoeffs, NUM_TAPS, LOW_CUTOFF, HIGH_CUTOFF);   //If using bandpass filter
	lowpass_fir(firCoeffs, NUM_TAPS, HIGH_CUTOFF);
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <init_filter+0x68>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	2110      	movs	r1, #16
 8001172:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <init_filter+0x6c>)
 8001174:	f7ff ff1c 	bl	8000fb0 <lowpass_fir>
	arm_fir_init_f32(&S, NUM_TAPS, firCoeffs, firState, BLOCK_SIZE);
 8001178:	2301      	movs	r3, #1
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <init_filter+0x70>)
 800117e:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <init_filter+0x6c>)
 8001180:	2110      	movs	r1, #16
 8001182:	480a      	ldr	r0, [pc, #40]	@ (80011ac <init_filter+0x74>)
 8001184:	f003 fe9e 	bl	8004ec4 <arm_fir_init_f32>
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000034 	.word	0x20000034
 8001194:	467a0000 	.word	0x467a0000
 8001198:	20000038 	.word	0x20000038
 800119c:	20000000 	.word	0x20000000
 80011a0:	2000003c 	.word	0x2000003c
 80011a4:	200001e8 	.word	0x200001e8
 80011a8:	20000228 	.word	0x20000228
 80011ac:	200001dc 	.word	0x200001dc

080011b0 <HAL_I2S_RxCpltCallback>:

char buffer[16];
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    //Check whether press blue button
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) // If pressed
 80011b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011bc:	4884      	ldr	r0, [pc, #528]	@ (80013d0 <HAL_I2S_RxCpltCallback+0x220>)
 80011be:	f001 fbdd 	bl	800297c <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d127      	bne.n	8001218 <HAL_I2S_RxCpltCallback+0x68>
    {
    	if (!mode_button_pressed) // If mode_button_pressed = false
 80011c8:	4b82      	ldr	r3, [pc, #520]	@ (80013d4 <HAL_I2S_RxCpltCallback+0x224>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d023      	beq.n	800121e <HAL_I2S_RxCpltCallback+0x6e>
    	        {
					active_mode_select = !active_mode_select; // Mode change
 80011d6:	4b80      	ldr	r3, [pc, #512]	@ (80013d8 <HAL_I2S_RxCpltCallback+0x228>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b79      	ldr	r3, [pc, #484]	@ (80013d8 <HAL_I2S_RxCpltCallback+0x228>)
 80011f2:	701a      	strb	r2, [r3, #0]
					if (active_mode_select){
 80011f4:	4b78      	ldr	r3, [pc, #480]	@ (80013d8 <HAL_I2S_RxCpltCallback+0x228>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_I2S_RxCpltCallback+0x56>
						high_cutoff = phase_change;
 80011fc:	4b77      	ldr	r3, [pc, #476]	@ (80013dc <HAL_I2S_RxCpltCallback+0x22c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a77      	ldr	r2, [pc, #476]	@ (80013e0 <HAL_I2S_RxCpltCallback+0x230>)
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e002      	b.n	800120c <HAL_I2S_RxCpltCallback+0x5c>
					}else{
						high_cutoff = 10000.0f;
 8001206:	4b76      	ldr	r3, [pc, #472]	@ (80013e0 <HAL_I2S_RxCpltCallback+0x230>)
 8001208:	4a76      	ldr	r2, [pc, #472]	@ (80013e4 <HAL_I2S_RxCpltCallback+0x234>)
 800120a:	601a      	str	r2, [r3, #0]
					}
					init_filter();
 800120c:	f7ff ff94 	bl	8001138 <init_filter>
					mode_button_pressed = true;      // Button pressed
 8001210:	4b70      	ldr	r3, [pc, #448]	@ (80013d4 <HAL_I2S_RxCpltCallback+0x224>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	e002      	b.n	800121e <HAL_I2S_RxCpltCallback+0x6e>
    	        }
    }else{
    	mode_button_pressed= false;
 8001218:	4b6e      	ldr	r3, [pc, #440]	@ (80013d4 <HAL_I2S_RxCpltCallback+0x224>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
    }

    //Check S1 button
    if (check_s1_pressed()){
 800121e:	f7ff fe39 	bl	8000e94 <check_s1_pressed>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d019      	beq.n	800125c <HAL_I2S_RxCpltCallback+0xac>
		if (!setting_button_pressed) // Debouncing
 8001228:	4b6f      	ldr	r3, [pc, #444]	@ (80013e8 <HAL_I2S_RxCpltCallback+0x238>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f083 0301 	eor.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d015      	beq.n	8001262 <HAL_I2S_RxCpltCallback+0xb2>
		{
			setting_mode_select = !setting_mode_select;    // Switch Setting Mode
 8001236:	4b6d      	ldr	r3, [pc, #436]	@ (80013ec <HAL_I2S_RxCpltCallback+0x23c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b66      	ldr	r3, [pc, #408]	@ (80013ec <HAL_I2S_RxCpltCallback+0x23c>)
 8001252:	701a      	strb	r2, [r3, #0]
			setting_button_pressed = true;
 8001254:	4b64      	ldr	r3, [pc, #400]	@ (80013e8 <HAL_I2S_RxCpltCallback+0x238>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e002      	b.n	8001262 <HAL_I2S_RxCpltCallback+0xb2>
		}
	}else{
		setting_button_pressed = false;
 800125c:	4b62      	ldr	r3, [pc, #392]	@ (80013e8 <HAL_I2S_RxCpltCallback+0x238>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	}

    //Set mode or work mode(monitor or active)
    if (setting_mode_select==false){
 8001262:	4b62      	ldr	r3, [pc, #392]	@ (80013ec <HAL_I2S_RxCpltCallback+0x23c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d028      	beq.n	80012c2 <HAL_I2S_RxCpltCallback+0x112>
    	//Apply DSP Filter
    	filter_input = (float32_t)toReceive; // Transfer to float type
 8001270:	4b5f      	ldr	r3, [pc, #380]	@ (80013f0 <HAL_I2S_RxCpltCallback+0x240>)
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_I2S_RxCpltCallback+0x244>)
 8001280:	edc3 7a00 	vstr	s15, [r3]
    	arm_fir_f32(&S, &filter_input, &filter_output, BLOCK_SIZE);
 8001284:	2301      	movs	r3, #1
 8001286:	4a5c      	ldr	r2, [pc, #368]	@ (80013f8 <HAL_I2S_RxCpltCallback+0x248>)
 8001288:	495a      	ldr	r1, [pc, #360]	@ (80013f4 <HAL_I2S_RxCpltCallback+0x244>)
 800128a:	485c      	ldr	r0, [pc, #368]	@ (80013fc <HAL_I2S_RxCpltCallback+0x24c>)
 800128c:	f003 fe28 	bl	8004ee0 <arm_fir_f32>
		//filter_output = toReceive;    // IF no filter apply

    	// Mode select
		if (active_mode_select)
 8001290:	4b51      	ldr	r3, [pc, #324]	@ (80013d8 <HAL_I2S_RxCpltCallback+0x228>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 8081 	beq.w	800139c <HAL_I2S_RxCpltCallback+0x1ec>
		{
			//toWrite = toReceive * (-1);
			toWrite = (int16_t)(filter_output)* -(VOLUME);    //after bandpass filter
 800129a:	4b57      	ldr	r3, [pc, #348]	@ (80013f8 <HAL_I2S_RxCpltCallback+0x248>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <HAL_I2S_RxCpltCallback+0x250>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	425b      	negs	r3, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	fb12 f303 	smulbb	r3, r2, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b51      	ldr	r3, [pc, #324]	@ (8001404 <HAL_I2S_RxCpltCallback+0x254>)
 80012be:	801a      	strh	r2, [r3, #0]
 80012c0:	e06c      	b.n	800139c <HAL_I2S_RxCpltCallback+0x1ec>
			//HAL_I2S_Transmit_DMA(&hi2s2, &toWrite, 1);
		}
    }else{
    	filter_output = 0;
 80012c2:	4b4d      	ldr	r3, [pc, #308]	@ (80013f8 <HAL_I2S_RxCpltCallback+0x248>)
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
    	// Adjust parameter
		static uint32_t last_adjust_time = 0;
		uint32_t current_time = HAL_GetTick();
 80012ca:	f000 fd35 	bl	8001d38 <HAL_GetTick>
 80012ce:	60f8      	str	r0, [r7, #12]
		if (current_time - last_adjust_time > 200){    //Adjust every 200 ms
 80012d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001408 <HAL_I2S_RxCpltCallback+0x258>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80012da:	d95f      	bls.n	800139c <HAL_I2S_RxCpltCallback+0x1ec>
			//Adjusting volume
			if (check_specific_button_pressed(9)){   //Increase volume
 80012dc:	2009      	movs	r0, #9
 80012de:	f7ff fe09 	bl	8000ef4 <check_specific_button_pressed>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_I2S_RxCpltCallback+0x144>
				VOLUME++;}
 80012e8:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <HAL_I2S_RxCpltCallback+0x250>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a44      	ldr	r2, [pc, #272]	@ (8001400 <HAL_I2S_RxCpltCallback+0x250>)
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e04e      	b.n	8001392 <HAL_I2S_RxCpltCallback+0x1e2>
			else if (check_specific_button_pressed(13)){  //Decrease volume
 80012f4:	200d      	movs	r0, #13
 80012f6:	f7ff fdfd 	bl	8000ef4 <check_specific_button_pressed>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_I2S_RxCpltCallback+0x15c>
				VOLUME--;}
 8001300:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <HAL_I2S_RxCpltCallback+0x250>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	4a3e      	ldr	r2, [pc, #248]	@ (8001400 <HAL_I2S_RxCpltCallback+0x250>)
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e042      	b.n	8001392 <HAL_I2S_RxCpltCallback+0x1e2>
			//Adjusting frequency band
			else if (check_specific_button_pressed(11)){  // Increase lower cutoff frequency
 800130c:	200b      	movs	r0, #11
 800130e:	f7ff fdf1 	bl	8000ef4 <check_specific_button_pressed>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00a      	beq.n	800132e <HAL_I2S_RxCpltCallback+0x17e>
				low_cutoff += 100.0f;}
 8001318:	4b3c      	ldr	r3, [pc, #240]	@ (800140c <HAL_I2S_RxCpltCallback+0x25c>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001410 <HAL_I2S_RxCpltCallback+0x260>
 8001322:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001326:	4b39      	ldr	r3, [pc, #228]	@ (800140c <HAL_I2S_RxCpltCallback+0x25c>)
 8001328:	edc3 7a00 	vstr	s15, [r3]
 800132c:	e031      	b.n	8001392 <HAL_I2S_RxCpltCallback+0x1e2>
			else if (check_specific_button_pressed(15)){  // Decrease lower cutoff frequency
 800132e:	200f      	movs	r0, #15
 8001330:	f7ff fde0 	bl	8000ef4 <check_specific_button_pressed>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00a      	beq.n	8001350 <HAL_I2S_RxCpltCallback+0x1a0>
				low_cutoff -= 100.0f;}
 800133a:	4b34      	ldr	r3, [pc, #208]	@ (800140c <HAL_I2S_RxCpltCallback+0x25c>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001410 <HAL_I2S_RxCpltCallback+0x260>
 8001344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001348:	4b30      	ldr	r3, [pc, #192]	@ (800140c <HAL_I2S_RxCpltCallback+0x25c>)
 800134a:	edc3 7a00 	vstr	s15, [r3]
 800134e:	e020      	b.n	8001392 <HAL_I2S_RxCpltCallback+0x1e2>
			else if (check_specific_button_pressed(12)){  // Increase higher cutoff frequency
 8001350:	200c      	movs	r0, #12
 8001352:	f7ff fdcf 	bl	8000ef4 <check_specific_button_pressed>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <HAL_I2S_RxCpltCallback+0x1c2>
				high_cutoff += 100.0f;}
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_I2S_RxCpltCallback+0x230>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001410 <HAL_I2S_RxCpltCallback+0x260>
 8001366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_I2S_RxCpltCallback+0x230>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
 8001370:	e00f      	b.n	8001392 <HAL_I2S_RxCpltCallback+0x1e2>
			else if (check_specific_button_pressed(16)){  // Decrease higher cutoff frequency
 8001372:	2010      	movs	r0, #16
 8001374:	f7ff fdbe 	bl	8000ef4 <check_specific_button_pressed>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_I2S_RxCpltCallback+0x1e2>
				high_cutoff -= 100.0f;}
 800137e:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <HAL_I2S_RxCpltCallback+0x230>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001410 <HAL_I2S_RxCpltCallback+0x260>
 8001388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_I2S_RxCpltCallback+0x230>)
 800138e:	edc3 7a00 	vstr	s15, [r3]
			init_filter();
 8001392:	f7ff fed1 	bl	8001138 <init_filter>
			last_adjust_time = current_time; // Update last adjustment time
 8001396:	4a1c      	ldr	r2, [pc, #112]	@ (8001408 <HAL_I2S_RxCpltCallback+0x258>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6013      	str	r3, [r2, #0]
		}
    }
    int16_t transform_output = (int16_t)(filter_output);
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <HAL_I2S_RxCpltCallback+0x248>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a6:	ee17 3a90 	vmov	r3, s15
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	817b      	strh	r3, [r7, #10]
    HAL_UART_Transmit(&huart2, (uint8_t *)&transform_output, sizeof(transform_output), HAL_MAX_DELAY);
 80013ae:	f107 010a 	add.w	r1, r7, #10
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	2202      	movs	r2, #2
 80013b8:	4816      	ldr	r0, [pc, #88]	@ (8001414 <HAL_I2S_RxCpltCallback+0x264>)
 80013ba:	f003 f9c7 	bl	800474c <HAL_UART_Transmit>
    HAL_I2S_Receive_DMA(hi2s, &toReceive, 1);
 80013be:	2201      	movs	r2, #1
 80013c0:	490b      	ldr	r1, [pc, #44]	@ (80013f0 <HAL_I2S_RxCpltCallback+0x240>)
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f001 fc04 	bl	8002bd0 <HAL_I2S_Receive_DMA>
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020800 	.word	0x40020800
 80013d4:	20000272 	.word	0x20000272
 80013d8:	20000270 	.word	0x20000270
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000000 	.word	0x20000000
 80013e4:	461c4000 	.word	0x461c4000
 80013e8:	20000273 	.word	0x20000273
 80013ec:	20000271 	.word	0x20000271
 80013f0:	200001d8 	.word	0x200001d8
 80013f4:	20000268 	.word	0x20000268
 80013f8:	2000026c 	.word	0x2000026c
 80013fc:	200001dc 	.word	0x200001dc
 8001400:	20000004 	.word	0x20000004
 8001404:	200001da 	.word	0x200001da
 8001408:	20000278 	.word	0x20000278
 800140c:	20000034 	.word	0x20000034
 8001410:	42c80000 	.word	0x42c80000
 8001414:	20000190 	.word	0x20000190

08001418 <main>:

char str[120];
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  HAL_Init();
 800141c:	f000 fc26 	bl	8001c6c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001420:	f000 f81a 	bl	8001458 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001424:	f000 f886 	bl	8001534 <PeriphCommonClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 f958 	bl	80016dc <MX_GPIO_Init>
  MX_DMA_Init();
 800142c:	f000 f92e 	bl	800168c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001430:	f000 f902 	bl	8001638 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 8001434:	f000 f8a4 	bl	8001580 <MX_I2S2_Init>
  MX_I2S3_Init();
 8001438:	f000 f8d0 	bl	80015dc <MX_I2S3_Init>
  init_filter();
 800143c:	f7ff fe7c 	bl	8001138 <init_filter>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s3, &toReceive, 1);
 8001440:	2201      	movs	r2, #1
 8001442:	4903      	ldr	r1, [pc, #12]	@ (8001450 <main+0x38>)
 8001444:	4803      	ldr	r0, [pc, #12]	@ (8001454 <main+0x3c>)
 8001446:	f001 fbc3 	bl	8002bd0 <HAL_I2S_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800144a:	bf00      	nop
 800144c:	e7fd      	b.n	800144a <main+0x32>
 800144e:	bf00      	nop
 8001450:	200001d8 	.word	0x200001d8
 8001454:	20000088 	.word	0x20000088

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	@ 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2234      	movs	r2, #52	@ 0x34
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f003 ffc2 	bl	80053f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <SystemClock_Config+0xd4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	4a29      	ldr	r2, [pc, #164]	@ (800152c <SystemClock_Config+0xd4>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	@ 0x40
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <SystemClock_Config+0xd4>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <SystemClock_Config+0xd8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014a4:	4a22      	ldr	r2, [pc, #136]	@ (8001530 <SystemClock_Config+0xd8>)
 80014a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <SystemClock_Config+0xd8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014cc:	2310      	movs	r3, #16
 80014ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d6:	2304      	movs	r3, #4
 80014d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014de:	2302      	movs	r3, #2
 80014e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fe42 	bl	8004170 <HAL_RCC_OscConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014f2:	f000 f983 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	230f      	movs	r3, #15
 80014f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001506:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	2102      	movs	r1, #2
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fd6e 	bl	8002ff4 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800151e:	f000 f96d 	bl	80017fc <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3750      	adds	r7, #80	@ 0x50
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b098      	sub	sp, #96	@ 0x60
 8001538:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	225c      	movs	r2, #92	@ 0x5c
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f003 ff55 	bl	80053f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8001546:	2301      	movs	r3, #1
 8001548:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800154a:	23c0      	movs	r3, #192	@ 0xc0
 800154c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001552:	2310      	movs	r3, #16
 8001554:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800155a:	2302      	movs	r3, #2
 800155c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001562:	2300      	movs	r3, #0
 8001564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fe5d 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <PeriphCommonClock_Config+0x44>
  {
    Error_Handler();
 8001574:	f000 f942 	bl	80017fc <Error_Handler>
  }
}
 8001578:	bf00      	nop
 800157a:	3760      	adds	r7, #96	@ 0x60
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <MX_I2S2_Init+0x54>)
 8001586:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <MX_I2S2_Init+0x58>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_I2S2_Init+0x54>)
 800158c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001590:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <MX_I2S2_Init+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <MX_I2S2_Init+0x54>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <MX_I2S2_Init+0x54>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <MX_I2S2_Init+0x54>)
 80015a6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80015aa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_I2S2_Init+0x54>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <MX_I2S2_Init+0x54>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_I2S2_Init+0x54>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_I2S2_Init+0x54>)
 80015c0:	f001 fa0e 	bl	80029e0 <HAL_I2S_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80015ca:	f000 f917 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000040 	.word	0x20000040
 80015d8:	40003800 	.word	0x40003800

080015dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  hi2s3.Instance = SPI3;
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <MX_I2S3_Init+0x54>)
 80015e2:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <MX_I2S3_Init+0x58>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80015e6:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_I2S3_Init+0x54>)
 80015e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <MX_I2S3_Init+0x54>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_I2S3_Init+0x54>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <MX_I2S3_Init+0x54>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_I2S3_Init+0x54>)
 8001602:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001606:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_I2S3_Init+0x54>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_I2S3_Init+0x54>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_I2S3_Init+0x54>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_I2S3_Init+0x54>)
 800161c:	f001 f9e0 	bl	80029e0 <HAL_I2S_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001626:	f000 f8e9 	bl	80017fc <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000088 	.word	0x20000088
 8001634:	40003c00 	.word	0x40003c00

08001638 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;//115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f003 f81c 	bl	80046ac <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f000 f8bf 	bl	80017fc <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000190 	.word	0x20000190
 8001688:	40004400 	.word	0x40004400

0800168c <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_DMA_Init+0x4c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <MX_DMA_Init+0x4c>)
 800169c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <MX_DMA_Init+0x4c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f000 fc27 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f000 fc40 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 fc1f 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80016c8:	200f      	movs	r0, #15
 80016ca:	f000 fc38 	bl	8001f3e <HAL_NVIC_EnableIRQ>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b3e      	ldr	r3, [pc, #248]	@ (80017f0 <MX_GPIO_Init+0x114>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a3d      	ldr	r2, [pc, #244]	@ (80017f0 <MX_GPIO_Init+0x114>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <MX_GPIO_Init+0x114>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <MX_GPIO_Init+0x114>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a36      	ldr	r2, [pc, #216]	@ (80017f0 <MX_GPIO_Init+0x114>)
 8001718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <MX_GPIO_Init+0x114>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <MX_GPIO_Init+0x114>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a2f      	ldr	r2, [pc, #188]	@ (80017f0 <MX_GPIO_Init+0x114>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <MX_GPIO_Init+0x114>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <MX_GPIO_Init+0x114>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a28      	ldr	r2, [pc, #160]	@ (80017f0 <MX_GPIO_Init+0x114>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <MX_GPIO_Init+0x114>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2120      	movs	r1, #32
 8001766:	4823      	ldr	r0, [pc, #140]	@ (80017f4 <MX_GPIO_Init+0x118>)
 8001768:	f001 f920 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8001772:	4821      	ldr	r0, [pc, #132]	@ (80017f8 <MX_GPIO_Init+0x11c>)
 8001774:	f001 f91a 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001778:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	481a      	ldr	r0, [pc, #104]	@ (80017f8 <MX_GPIO_Init+0x11c>)
 8001790:	f000 ff60 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001794:	2320      	movs	r3, #32
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	4812      	ldr	r0, [pc, #72]	@ (80017f4 <MX_GPIO_Init+0x118>)
 80017ac:	f000 ff52 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80017b0:	f44f 7358 	mov.w	r3, #864	@ 0x360
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <MX_GPIO_Init+0x11c>)
 80017ca:	f000 ff43 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80017ce:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017d8:	2302      	movs	r3, #2
 80017da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_GPIO_Init+0x118>)
 80017e4:	f000 ff36 	bl	8002654 <HAL_GPIO_Init>
}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	@ 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020800 	.word	0x40020800

080017fc <Error_Handler>:

void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <Error_Handler+0x8>

08001808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <HAL_MspInit+0x4c>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181c:	6453      	str	r3, [r2, #68]	@ 0x44
 800181e:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <HAL_MspInit+0x4c>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	@ 0x40
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001846:	2007      	movs	r0, #7
 8001848:	f000 fb52 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08e      	sub	sp, #56	@ 0x38
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a8f      	ldr	r2, [pc, #572]	@ (8001ab4 <HAL_I2S_MspInit+0x25c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d17a      	bne.n	8001970 <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	4b8e      	ldr	r3, [pc, #568]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4a8d      	ldr	r2, [pc, #564]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001888:	6413      	str	r3, [r2, #64]	@ 0x40
 800188a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001892:	623b      	str	r3, [r7, #32]
 8001894:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	4b87      	ldr	r3, [pc, #540]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a86      	ldr	r2, [pc, #536]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b84      	ldr	r3, [pc, #528]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	4b80      	ldr	r3, [pc, #512]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a7f      	ldr	r2, [pc, #508]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ce:	2302      	movs	r3, #2
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80018de:	2307      	movs	r3, #7
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4874      	ldr	r0, [pc, #464]	@ (8001abc <HAL_I2S_MspInit+0x264>)
 80018ea:	f000 feb3 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80018ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001900:	2305      	movs	r3, #5
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	486d      	ldr	r0, [pc, #436]	@ (8001ac0 <HAL_I2S_MspInit+0x268>)
 800190c:	f000 fea2 	bl	8002654 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001910:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 8001912:	4a6d      	ldr	r2, [pc, #436]	@ (8001ac8 <HAL_I2S_MspInit+0x270>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001916:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191c:	4b69      	ldr	r3, [pc, #420]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 800191e:	2240      	movs	r2, #64	@ 0x40
 8001920:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b68      	ldr	r3, [pc, #416]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b66      	ldr	r3, [pc, #408]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 800192a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800192e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001930:	4b64      	ldr	r3, [pc, #400]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 8001932:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001936:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001938:	4b62      	ldr	r3, [pc, #392]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 800193a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800193e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001940:	4b60      	ldr	r3, [pc, #384]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001946:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800194c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001952:	485c      	ldr	r0, [pc, #368]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 8001954:	f000 fb0e 	bl	8001f74 <HAL_DMA_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2S_MspInit+0x10a>
    {
      Error_Handler();
 800195e:	f7ff ff4d 	bl	80017fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a57      	ldr	r2, [pc, #348]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 8001966:	639a      	str	r2, [r3, #56]	@ 0x38
 8001968:	4a56      	ldr	r2, [pc, #344]	@ (8001ac4 <HAL_I2S_MspInit+0x26c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800196e:	e09d      	b.n	8001aac <HAL_I2S_MspInit+0x254>
  else if(hi2s->Instance==SPI3)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a55      	ldr	r2, [pc, #340]	@ (8001acc <HAL_I2S_MspInit+0x274>)
 8001976:	4293      	cmp	r3, r2
 8001978:	f040 8098 	bne.w	8001aac <HAL_I2S_MspInit+0x254>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 8001986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800198a:	6413      	str	r3, [r2, #64]	@ 0x40
 800198c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	4b46      	ldr	r3, [pc, #280]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a0:	4a45      	ldr	r2, [pc, #276]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a8:	4b43      	ldr	r3, [pc, #268]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	4a37      	ldr	r2, [pc, #220]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e0:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <HAL_I2S_MspInit+0x260>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ec:	2310      	movs	r3, #16
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019fc:	2306      	movs	r3, #6
 80019fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4832      	ldr	r0, [pc, #200]	@ (8001ad0 <HAL_I2S_MspInit+0x278>)
 8001a08:	f000 fe24 	bl	8002654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	4826      	ldr	r0, [pc, #152]	@ (8001ac0 <HAL_I2S_MspInit+0x268>)
 8001a28:	f000 fe14 	bl	8002654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a3e:	2306      	movs	r3, #6
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	481c      	ldr	r0, [pc, #112]	@ (8001abc <HAL_I2S_MspInit+0x264>)
 8001a4a:	f000 fe03 	bl	8002654 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a50:	4a21      	ldr	r2, [pc, #132]	@ (8001ad8 <HAL_I2S_MspInit+0x280>)
 8001a52:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a6c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a74:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a7c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001a90:	4810      	ldr	r0, [pc, #64]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001a92:	f000 fa6f 	bl	8001f74 <HAL_DMA_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2S_MspInit+0x248>
      Error_Handler();
 8001a9c:	f7ff feae 	bl	80017fc <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <HAL_I2S_MspInit+0x27c>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001aac:	bf00      	nop
 8001aae:	3738      	adds	r7, #56	@ 0x38
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40003800 	.word	0x40003800
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	200000d0 	.word	0x200000d0
 8001ac8:	40026070 	.word	0x40026070
 8001acc:	40003c00 	.word	0x40003c00
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	20000130 	.word	0x20000130
 8001ad8:	40026010 	.word	0x40026010

08001adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_UART_MspInit+0x84>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d12b      	bne.n	8001b56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_UART_MspInit+0x88>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a17      	ldr	r2, [pc, #92]	@ (8001b64 <HAL_UART_MspInit+0x88>)
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_UART_MspInit+0x88>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_UART_MspInit+0x88>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a10      	ldr	r2, [pc, #64]	@ (8001b64 <HAL_UART_MspInit+0x88>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_UART_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b36:	230c      	movs	r3, #12
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b46:	2307      	movs	r3, #7
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <HAL_UART_MspInit+0x8c>)
 8001b52:	f000 fd7f 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	@ 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40004400 	.word	0x40004400
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <NMI_Handler+0x4>

08001b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <MemManage_Handler+0x4>

08001b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f000 f8a5 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <DMA1_Stream0_IRQHandler+0x10>)
 8001bd2:	f000 fad5 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000130 	.word	0x20000130

08001be0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <DMA1_Stream4_IRQHandler+0x10>)
 8001be6:	f000 facb 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200000d0 	.word	0x200000d0

08001bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <SystemInit+0x20>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bfe:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <SystemInit+0x20>)
 8001c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c1c:	f7ff ffea 	bl	8001bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c20:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c22:	490d      	ldr	r1, [pc, #52]	@ (8001c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c24:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c38:	4c0a      	ldr	r4, [pc, #40]	@ (8001c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c46:	f003 fbdb 	bl	8005400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4a:	f7ff fbe5 	bl	8001418 <main>
  bx  lr    
 8001c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c58:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001c5c:	08006770 	.word	0x08006770
  ldr r2, =_sbss
 8001c60:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001c64:	20000280 	.word	0x20000280

08001c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC_IRQHandler>
	...

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c70:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <HAL_Init+0x40>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <HAL_Init+0x40>)
 8001c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <HAL_Init+0x40>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f000 f92b 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 f808 	bl	8001cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca0:	f7ff fdb2 	bl	8001808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_InitTick+0x54>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_InitTick+0x58>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f943 	bl	8001f5a <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 f90b 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	@ (8001d0c <HAL_InitTick+0x5c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	20000014 	.word	0x20000014
 8001d0c:	20000010 	.word	0x20000010

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000014 	.word	0x20000014
 8001d34:	2000027c 	.word	0x2000027c

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2000027c 	.word	0x2000027c

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	@ (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	@ (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff feda 	bl	8001d38 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e099      	b.n	80020c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb0:	e00f      	b.n	8001fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb2:	f7ff fec1 	bl	8001d38 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d908      	bls.n	8001fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e078      	b.n	80020c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e8      	bne.n	8001fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <HAL_DMA_Init+0x158>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	2b04      	cmp	r3, #4
 800202a:	d107      	bne.n	800203c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4313      	orrs	r3, r2
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	2b04      	cmp	r3, #4
 8002064:	d117      	bne.n	8002096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fa6f 	bl	800255c <DMA_CheckFifoParam>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2240      	movs	r2, #64	@ 0x40
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002092:	2301      	movs	r3, #1
 8002094:	e016      	b.n	80020c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa26 	bl	80024f0 <DMA_CalcBaseAndBitshift>
 80020a4:	4603      	mov	r3, r0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ac:	223f      	movs	r2, #63	@ 0x3f
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	f010803f 	.word	0xf010803f

080020d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_DMA_Start_IT+0x26>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e040      	b.n	8002178 <HAL_DMA_Start_IT+0xa8>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d12f      	bne.n	800216a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f9b8 	bl	8002494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002128:	223f      	movs	r2, #63	@ 0x3f
 800212a:	409a      	lsls	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0216 	orr.w	r2, r2, #22
 800213e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0208 	orr.w	r2, r2, #8
 8002156:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e005      	b.n	8002176 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002176:	7dfb      	ldrb	r3, [r7, #23]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800218c:	4b8e      	ldr	r3, [pc, #568]	@ (80023c8 <HAL_DMA_IRQHandler+0x248>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a8e      	ldr	r2, [pc, #568]	@ (80023cc <HAL_DMA_IRQHandler+0x24c>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0a9b      	lsrs	r3, r3, #10
 8002198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021aa:	2208      	movs	r2, #8
 80021ac:	409a      	lsls	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01a      	beq.n	80021ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0204 	bic.w	r2, r2, #4
 80021d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	2208      	movs	r2, #8
 80021da:	409a      	lsls	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	2201      	movs	r2, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	2201      	movs	r2, #1
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221a:	f043 0202 	orr.w	r2, r3, #2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	2204      	movs	r2, #4
 8002228:	409a      	lsls	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d012      	beq.n	8002258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00b      	beq.n	8002258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002244:	2204      	movs	r2, #4
 8002246:	409a      	lsls	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	f043 0204 	orr.w	r2, r3, #4
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	2210      	movs	r2, #16
 800225e:	409a      	lsls	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d043      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03c      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	2210      	movs	r2, #16
 800227c:	409a      	lsls	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d108      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d024      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
 80022ae:	e01f      	b.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e016      	b.n	80022f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0208 	bic.w	r2, r2, #8
 80022de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	2220      	movs	r2, #32
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 808f 	beq.w	8002420 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8087 	beq.w	8002420 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002316:	2220      	movs	r2, #32
 8002318:	409a      	lsls	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b05      	cmp	r3, #5
 8002328:	d136      	bne.n	8002398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0216 	bic.w	r2, r2, #22
 8002338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_DMA_IRQHandler+0x1da>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0208 	bic.w	r2, r2, #8
 8002368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	223f      	movs	r2, #63	@ 0x3f
 8002370:	409a      	lsls	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800238a:	2b00      	cmp	r3, #0
 800238c:	d07e      	beq.n	800248c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
        }
        return;
 8002396:	e079      	b.n	800248c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01d      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d031      	beq.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e02c      	b.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
 80023c6:	bf00      	nop
 80023c8:	2000000c 	.word	0x2000000c
 80023cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
 80023e0:	e01e      	b.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10f      	bne.n	8002410 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0210 	bic.w	r2, r2, #16
 80023fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	2b00      	cmp	r3, #0
 8002426:	d032      	beq.n	800248e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d022      	beq.n	800247a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2205      	movs	r2, #5
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	3301      	adds	r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	d307      	bcc.n	8002468 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f2      	bne.n	800244c <HAL_DMA_IRQHandler+0x2cc>
 8002466:	e000      	b.n	800246a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002468:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
 800248a:	e000      	b.n	800248e <HAL_DMA_IRQHandler+0x30e>
        return;
 800248c:	bf00      	nop
    }
  }
}
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b40      	cmp	r3, #64	@ 0x40
 80024c0:	d108      	bne.n	80024d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024d2:	e007      	b.n	80024e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3b10      	subs	r3, #16
 8002500:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <DMA_CalcBaseAndBitshift+0x64>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800250a:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <DMA_CalcBaseAndBitshift+0x68>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d909      	bls.n	8002532 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002526:	f023 0303 	bic.w	r3, r3, #3
 800252a:	1d1a      	adds	r2, r3, #4
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002530:	e007      	b.n	8002542 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	aaaaaaab 	.word	0xaaaaaaab
 8002558:	08006580 	.word	0x08006580

0800255c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11f      	bne.n	80025b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d856      	bhi.n	800262a <DMA_CheckFifoParam+0xce>
 800257c:	a201      	add	r2, pc, #4	@ (adr r2, 8002584 <DMA_CheckFifoParam+0x28>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	08002595 	.word	0x08002595
 8002588:	080025a7 	.word	0x080025a7
 800258c:	08002595 	.word	0x08002595
 8002590:	0800262b 	.word	0x0800262b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d046      	beq.n	800262e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a4:	e043      	b.n	800262e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ae:	d140      	bne.n	8002632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e03d      	b.n	8002632 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025be:	d121      	bne.n	8002604 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d837      	bhi.n	8002636 <DMA_CheckFifoParam+0xda>
 80025c6:	a201      	add	r2, pc, #4	@ (adr r2, 80025cc <DMA_CheckFifoParam+0x70>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	080025dd 	.word	0x080025dd
 80025d0:	080025e3 	.word	0x080025e3
 80025d4:	080025dd 	.word	0x080025dd
 80025d8:	080025f5 	.word	0x080025f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      break;
 80025e0:	e030      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d025      	beq.n	800263a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f2:	e022      	b.n	800263a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025fc:	d11f      	bne.n	800263e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002602:	e01c      	b.n	800263e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d903      	bls.n	8002612 <DMA_CheckFifoParam+0xb6>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d003      	beq.n	8002618 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002610:	e018      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      break;
 8002616:	e015      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00e      	beq.n	8002642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e00b      	b.n	8002642 <DMA_CheckFifoParam+0xe6>
      break;
 800262a:	bf00      	nop
 800262c:	e00a      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e008      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e006      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
 8002638:	e004      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;   
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
    }
  } 
  
  return status; 
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e165      	b.n	800293c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8154 	bne.w	8002936 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80ae 	beq.w	8002936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b5d      	ldr	r3, [pc, #372]	@ (8002954 <HAL_GPIO_Init+0x300>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002954 <HAL_GPIO_Init+0x300>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002954 <HAL_GPIO_Init+0x300>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f6:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_GPIO_Init+0x304>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4f      	ldr	r2, [pc, #316]	@ (800295c <HAL_GPIO_Init+0x308>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d025      	beq.n	800286e <HAL_GPIO_Init+0x21a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4e      	ldr	r2, [pc, #312]	@ (8002960 <HAL_GPIO_Init+0x30c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01f      	beq.n	800286a <HAL_GPIO_Init+0x216>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4d      	ldr	r2, [pc, #308]	@ (8002964 <HAL_GPIO_Init+0x310>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x212>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4c      	ldr	r2, [pc, #304]	@ (8002968 <HAL_GPIO_Init+0x314>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x20e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4b      	ldr	r2, [pc, #300]	@ (800296c <HAL_GPIO_Init+0x318>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x20a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4a      	ldr	r2, [pc, #296]	@ (8002970 <HAL_GPIO_Init+0x31c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x206>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a49      	ldr	r2, [pc, #292]	@ (8002974 <HAL_GPIO_Init+0x320>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x202>
 8002852:	2306      	movs	r3, #6
 8002854:	e00c      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002856:	2307      	movs	r3, #7
 8002858:	e00a      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800285a:	2305      	movs	r3, #5
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800285e:	2304      	movs	r3, #4
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	@ (8002958 <HAL_GPIO_Init+0x304>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b3a      	ldr	r3, [pc, #232]	@ (8002978 <HAL_GPIO_Init+0x324>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a31      	ldr	r2, [pc, #196]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a26      	ldr	r2, [pc, #152]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b25      	ldr	r3, [pc, #148]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <HAL_GPIO_Init+0x324>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_GPIO_Init+0x324>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a11      	ldr	r2, [pc, #68]	@ (8002978 <HAL_GPIO_Init+0x324>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f ae96 	bls.w	8002670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40021400 	.word	0x40021400
 8002974:	40021800 	.word	0x40021800
 8002978:	40013c00 	.word	0x40013c00

0800297c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e001      	b.n	800299e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0e1      	b.n	8002bb6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a6d      	ldr	r2, [pc, #436]	@ (8002bc0 <HAL_I2S_Init+0x1e0>)
 8002a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7fe ff23 	bl	8001858 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2202      	movs	r2, #2
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002a28:	f023 030f 	bic.w	r3, r3, #15
 8002a2c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2202      	movs	r2, #2
 8002a34:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d06f      	beq.n	8002b1e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a46:	2310      	movs	r3, #16
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e001      	b.n	8002a50 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d802      	bhi.n	8002a5e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a58      	ldr	r2, [pc, #352]	@ (8002bc4 <HAL_I2S_Init+0x1e4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_I2S_Init+0x92>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a56      	ldr	r2, [pc, #344]	@ (8002bc8 <HAL_I2S_Init+0x1e8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d104      	bne.n	8002a7c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f000 ff02 	bl	800387c <HAL_RCCEx_GetPeriphCLKFreq>
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	e003      	b.n	8002a84 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f000 fefd 	bl	800387c <HAL_RCCEx_GetPeriphCLKFreq>
 8002a82:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a8c:	d125      	bne.n	8002ada <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d010      	beq.n	8002ab8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	3305      	adds	r3, #5
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e01f      	b.n	8002af8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	3305      	adds	r3, #5
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	e00e      	b.n	8002af8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	3305      	adds	r3, #5
 8002af6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4a34      	ldr	r2, [pc, #208]	@ (8002bcc <HAL_I2S_Init+0x1ec>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	e003      	b.n	8002b26 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d902      	bls.n	8002b32 <HAL_I2S_Init+0x152>
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2bff      	cmp	r3, #255	@ 0xff
 8002b30:	d907      	bls.n	8002b42 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f043 0210 	orr.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e039      	b.n	8002bb6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002b60:	f023 030f 	bic.w	r3, r3, #15
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6851      	ldr	r1, [r2, #4]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6992      	ldr	r2, [r2, #24]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b84:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b30      	cmp	r3, #48	@ 0x30
 8002b8c:	d003      	beq.n	8002b96 <HAL_I2S_Init+0x1b6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2bb0      	cmp	r3, #176	@ 0xb0
 8002b94:	d107      	bne.n	8002ba6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ba4:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	08002ee1 	.word	0x08002ee1
 8002bc4:	40003800 	.word	0x40003800
 8002bc8:	40003c00 	.word	0x40003c00
 8002bcc:	cccccccd 	.word	0xcccccccd

08002bd0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_I2S_Receive_DMA+0x1a>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e09d      	b.n	8002d2a <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e095      	b.n	8002d2a <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2S_Receive_DMA+0x3e>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e08d      	b.n	8002d2a <HAL_I2S_Receive_DMA+0x15a>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d002      	beq.n	8002c42 <HAL_I2S_Receive_DMA+0x72>
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b05      	cmp	r3, #5
 8002c40:	d10a      	bne.n	8002c58 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002c56:	e005      	b.n	8002c64 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	4a32      	ldr	r2, [pc, #200]	@ (8002d34 <HAL_I2S_Receive_DMA+0x164>)
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	4a31      	ldr	r2, [pc, #196]	@ (8002d38 <HAL_I2S_Receive_DMA+0x168>)
 8002c72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c78:	4a30      	ldr	r2, [pc, #192]	@ (8002d3c <HAL_I2S_Receive_DMA+0x16c>)
 8002c7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	4619      	mov	r1, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002cb8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002cba:	f7ff fa09 	bl	80020d0 <HAL_DMA_Start_IT>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00f      	beq.n	8002ce4 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc8:	f043 0208 	orr.w	r2, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e022      	b.n	8002d2a <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d107      	bne.n	8002d0a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d107      	bne.n	8002d28 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d26:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	08002dbf 	.word	0x08002dbf
 8002d38:	08002d7d 	.word	0x08002d7d
 8002d3c:	08002ddb 	.word	0x08002ddb

08002d40 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d88:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7fe f9fd 	bl	80011b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff ffc1 	bl	8002d54 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0203 	bic.w	r2, r2, #3
 8002df6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e10:	f043 0208 	orr.w	r2, r3, #8
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff ffa5 	bl	8002d68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10e      	bne.n	8002e7a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ff63 	bl	8002d40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	b292      	uxth	r2, r2
 8002e96:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10e      	bne.n	8002ed8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ec8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe f96c 	bl	80011b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d13a      	bne.n	8002f72 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d109      	bne.n	8002f1a <I2S_IRQHandler+0x3a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f10:	2b40      	cmp	r3, #64	@ 0x40
 8002f12:	d102      	bne.n	8002f1a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ffb4 	bl	8002e82 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f20:	2b40      	cmp	r3, #64	@ 0x40
 8002f22:	d126      	bne.n	8002f72 <I2S_IRQHandler+0x92>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d11f      	bne.n	8002f72 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f40:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f64:	f043 0202 	orr.w	r2, r3, #2
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fefb 	bl	8002d68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d136      	bne.n	8002fec <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d109      	bne.n	8002f9c <I2S_IRQHandler+0xbc>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f92:	2b80      	cmp	r3, #128	@ 0x80
 8002f94:	d102      	bne.n	8002f9c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ff45 	bl	8002e26 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d122      	bne.n	8002fec <I2S_IRQHandler+0x10c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d11b      	bne.n	8002fec <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fc2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	f043 0204 	orr.w	r2, r3, #4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff febe 	bl	8002d68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0cc      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003008:	4b68      	ldr	r3, [pc, #416]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d90c      	bls.n	8003030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b65      	ldr	r3, [pc, #404]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b63      	ldr	r3, [pc, #396]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b8      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b59      	ldr	r3, [pc, #356]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a58      	ldr	r2, [pc, #352]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003060:	4b53      	ldr	r3, [pc, #332]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a52      	ldr	r2, [pc, #328]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800306a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b50      	ldr	r3, [pc, #320]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	494d      	ldr	r1, [pc, #308]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d044      	beq.n	8003114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b47      	ldr	r3, [pc, #284]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d119      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b2:	4b3f      	ldr	r3, [pc, #252]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e06f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c2:	4b3b      	ldr	r3, [pc, #236]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e067      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d2:	4b37      	ldr	r3, [pc, #220]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4934      	ldr	r1, [pc, #208]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e4:	f7fe fe28 	bl	8001d38 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7fe fe24 	bl	8001d38 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e04f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	4b2b      	ldr	r3, [pc, #172]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 020c 	and.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d1eb      	bne.n	80030ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003114:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d20c      	bcs.n	800313c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b22      	ldr	r3, [pc, #136]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b20      	ldr	r3, [pc, #128]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4916      	ldr	r1, [pc, #88]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003166:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	490e      	ldr	r1, [pc, #56]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317a:	f000 fdc9 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490a      	ldr	r1, [pc, #40]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a09      	ldr	r2, [pc, #36]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003196:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fd88 	bl	8001cb0 <HAL_InitTick>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023c00 	.word	0x40023c00
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08006568 	.word	0x08006568
 80031b8:	2000000c 	.word	0x2000000c
 80031bc:	20000010 	.word	0x20000010

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	@ (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	2000000c 	.word	0x2000000c

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	@ (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08006578 	.word	0x08006578

08003200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003204:	f7ff ffdc 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0b5b      	lsrs	r3, r3, #13
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	@ (8003224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	08006578 	.word	0x08006578

08003228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	@ 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003260:	4b6f      	ldr	r3, [pc, #444]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003266:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	496c      	ldr	r1, [pc, #432]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800327e:	2301      	movs	r3, #1
 8003280:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800328e:	4b64      	ldr	r3, [pc, #400]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003294:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329c:	4960      	ldr	r1, [pc, #384]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80032ac:	2301      	movs	r3, #1
 80032ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d017      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032bc:	4b58      	ldr	r3, [pc, #352]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	4955      	ldr	r1, [pc, #340]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032da:	d101      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80032dc:	2301      	movs	r3, #1
 80032de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d017      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032f8:	4b49      	ldr	r3, [pc, #292]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003306:	4946      	ldr	r1, [pc, #280]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003312:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003316:	d101      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003318:	2301      	movs	r3, #1
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003324:	2301      	movs	r3, #1
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 808a 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	4b39      	ldr	r3, [pc, #228]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	4a38      	ldr	r2, [pc, #224]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003344:	6413      	str	r3, [r2, #64]	@ 0x40
 8003346:	4b36      	ldr	r3, [pc, #216]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003352:	4b34      	ldr	r3, [pc, #208]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a33      	ldr	r2, [pc, #204]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800335e:	f7fe fceb 	bl	8001d38 <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fe fce7 	bl	8001d38 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e278      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003378:	4b2a      	ldr	r3, [pc, #168]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003384:	4b26      	ldr	r3, [pc, #152]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02f      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339c:	6a3a      	ldr	r2, [r7, #32]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d028      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033aa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033b8:	4a19      	ldr	r2, [pc, #100]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033be:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d114      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fe fcb5 	bl	8001d38 <HAL_GetTick>
 80033ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe fcb1 	bl	8001d38 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e240      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ee      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003400:	d114      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003416:	4902      	ldr	r1, [pc, #8]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]
 800341c:	e00c      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
 8003428:	42470e40 	.word	0x42470e40
 800342c:	4b4a      	ldr	r3, [pc, #296]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a49      	ldr	r2, [pc, #292]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003432:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003436:	6093      	str	r3, [r2, #8]
 8003438:	4b47      	ldr	r3, [pc, #284]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800343a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	4944      	ldr	r1, [pc, #272]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003446:	4313      	orrs	r3, r2
 8003448:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800345e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800346c:	4b3a      	ldr	r3, [pc, #232]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003472:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347a:	4937      	ldr	r1, [pc, #220]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800348e:	4b32      	ldr	r3, [pc, #200]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003494:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349c:	492e      	ldr	r1, [pc, #184]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d011      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034b0:	4b29      	ldr	r3, [pc, #164]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	4926      	ldr	r1, [pc, #152]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ce:	d101      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80034d0:	2301      	movs	r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80034e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	491a      	ldr	r1, [pc, #104]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d011      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003508:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003510:	4911      	ldr	r1, [pc, #68]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003520:	d101      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003522:	2301      	movs	r3, #1
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d005      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003534:	f040 80ff 	bne.w	8003736 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003538:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800353e:	f7fe fbfb 	bl	8001d38 <HAL_GetTick>
 8003542:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003544:	e00e      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003546:	f7fe fbf7 	bl	8001d38 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d907      	bls.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e188      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003558:	40023800 	.word	0x40023800
 800355c:	424711e0 	.word	0x424711e0
 8003560:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003564:	4b7e      	ldr	r3, [pc, #504]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ea      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800358c:	2b00      	cmp	r3, #0
 800358e:	d028      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d124      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003598:	4b71      	ldr	r3, [pc, #452]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	3301      	adds	r3, #1
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b0:	0e1b      	lsrs	r3, r3, #24
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	431a      	orrs	r2, r3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	3b01      	subs	r3, #1
 80035ca:	041b      	lsls	r3, r3, #16
 80035cc:	431a      	orrs	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	071b      	lsls	r3, r3, #28
 80035da:	4961      	ldr	r1, [pc, #388]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d004      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003600:	2b00      	cmp	r3, #0
 8003602:	d035      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800360c:	d130      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800360e:	4b54      	ldr	r3, [pc, #336]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	3301      	adds	r3, #1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003620:	4b4f      	ldr	r3, [pc, #316]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003626:	0f1b      	lsrs	r3, r3, #28
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	019b      	lsls	r3, r3, #6
 8003638:	431a      	orrs	r2, r3
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	431a      	orrs	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	071b      	lsls	r3, r3, #28
 8003650:	4943      	ldr	r1, [pc, #268]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003658:	4b41      	ldr	r3, [pc, #260]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800365a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800365e:	f023 021f 	bic.w	r2, r3, #31
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	493d      	ldr	r1, [pc, #244]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d029      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003684:	d124      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003686:	4b36      	ldr	r3, [pc, #216]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	3301      	adds	r3, #1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003698:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800369a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800369e:	0f1b      	lsrs	r3, r3, #28
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	019b      	lsls	r3, r3, #6
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	3b01      	subs	r3, #1
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	431a      	orrs	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	071b      	lsls	r3, r3, #28
 80036c8:	4925      	ldr	r1, [pc, #148]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d016      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	071b      	lsls	r3, r3, #28
 8003702:	4917      	ldr	r1, [pc, #92]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800370a:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003710:	f7fe fb12 	bl	8001d38 <HAL_GetTick>
 8003714:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003718:	f7fe fb0e 	bl	8001d38 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e09f      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800372a:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003738:	2b01      	cmp	r3, #1
 800373a:	f040 8095 	bne.w	8003868 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800373e:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003744:	f7fe faf8 	bl	8001d38 <HAL_GetTick>
 8003748:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800374a:	e00f      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800374c:	f7fe faf4 	bl	8001d38 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d908      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e085      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800
 8003764:	42470068 	.word	0x42470068
 8003768:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800376c:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003778:	d0e8      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003796:	2b00      	cmp	r3, #0
 8003798:	d02b      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d127      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80037a2:	4b34      	ldr	r3, [pc, #208]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699a      	ldr	r2, [r3, #24]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	431a      	orrs	r2, r3
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	3b01      	subs	r3, #1
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	4928      	ldr	r1, [pc, #160]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037d8:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037de:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	3b01      	subs	r3, #1
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	4922      	ldr	r1, [pc, #136]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01d      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003806:	d118      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003808:	4b1a      	ldr	r3, [pc, #104]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	0e1b      	lsrs	r3, r3, #24
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	019b      	lsls	r3, r3, #6
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	4910      	ldr	r1, [pc, #64]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800383a:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003840:	f7fe fa7a 	bl	8001d38 <HAL_GetTick>
 8003844:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003848:	f7fe fa76 	bl	8001d38 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e007      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003866:	d1ef      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3730      	adds	r7, #48	@ 0x30
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	42470070 	.word	0x42470070

0800387c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	2b07      	cmp	r3, #7
 80038a2:	f200 8224 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80038a6:	a201      	add	r2, pc, #4	@ (adr r2, 80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	08003aaf 	.word	0x08003aaf
 80038b0:	08003bd9 	.word	0x08003bd9
 80038b4:	08003cef 	.word	0x08003cef
 80038b8:	080038cd 	.word	0x080038cd
 80038bc:	08003cef 	.word	0x08003cef
 80038c0:	08003cef 	.word	0x08003cef
 80038c4:	08003cef 	.word	0x08003cef
 80038c8:	080038cd 	.word	0x080038cd
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80038cc:	4ba8      	ldr	r3, [pc, #672]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038d2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038e2:	f000 80d6 	beq.w	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038ec:	f200 80dd 	bhi.w	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038f6:	f000 809f 	beq.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003900:	f200 80d3 	bhi.w	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800390a:	d05b      	beq.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003912:	f200 80ca 	bhi.w	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800391c:	f000 80b6 	beq.w	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003926:	f200 80c0 	bhi.w	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003930:	f000 8082 	beq.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800393a:	f200 80b6 	bhi.w	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800394a:	d03b      	beq.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 800394c:	e0ad      	b.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800394e:	4b88      	ldr	r3, [pc, #544]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800395a:	4b85      	ldr	r3, [pc, #532]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003964:	4a83      	ldr	r2, [pc, #524]	@ (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003966:	fbb2 f3f3 	udiv	r3, r2, r3
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	e008      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800396e:	4b80      	ldr	r3, [pc, #512]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003978:	4a7f      	ldr	r2, [pc, #508]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003980:	4b7b      	ldr	r3, [pc, #492]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	0e1b      	lsrs	r3, r3, #24
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 800398e:	4b78      	ldr	r3, [pc, #480]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	fb03 f202 	mul.w	r2, r3, r2
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80039a8:	4b71      	ldr	r3, [pc, #452]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	61fb      	str	r3, [r7, #28]
          break;
 80039c2:	e073      	b.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80039c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80039d0:	4b67      	ldr	r3, [pc, #412]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039da:	4a66      	ldr	r2, [pc, #408]	@ (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e008      	b.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80039e4:	4b62      	ldr	r3, [pc, #392]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ee:	4a62      	ldr	r2, [pc, #392]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80039f6:	4b5e      	ldr	r3, [pc, #376]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039fc:	0e1b      	lsrs	r3, r3, #24
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8003a04:	4b5a      	ldr	r3, [pc, #360]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	fb03 f202 	mul.w	r2, r3, r2
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003a1e:	4b54      	ldr	r3, [pc, #336]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	3301      	adds	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	61fb      	str	r3, [r7, #28]
          break;
 8003a36:	e039      	b.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a38:	4b4d      	ldr	r3, [pc, #308]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d108      	bne.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a44:	4b4a      	ldr	r3, [pc, #296]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a4c:	4a49      	ldr	r2, [pc, #292]	@ (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e007      	b.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003a56:	4b46      	ldr	r3, [pc, #280]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a5e:	4a46      	ldr	r2, [pc, #280]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003a66:	4b42      	ldr	r3, [pc, #264]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0f1b      	lsrs	r3, r3, #28
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 8003a72:	4b3f      	ldr	r3, [pc, #252]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	fb03 f202 	mul.w	r2, r3, r2
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	61fb      	str	r3, [r7, #28]
          break;
 8003a8a:	e00f      	b.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003a8e:	61fb      	str	r3, [r7, #28]
          break;
 8003a90:	e00c      	b.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a92:	4b37      	ldr	r3, [pc, #220]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003a9e:	4b35      	ldr	r3, [pc, #212]	@ (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003aa0:	61fb      	str	r3, [r7, #28]
          break;
 8003aa2:	e003      	b.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003aa4:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003aa6:	61fb      	str	r3, [r7, #28]
          break;
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003aaa:	bf00      	nop
        }
      }
      break;
 8003aac:	e120      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003aae:	4b30      	ldr	r3, [pc, #192]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ab4:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003ac0:	d079      	beq.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003ac8:	f200 8082 	bhi.w	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ad2:	d03c      	beq.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ada:	d879      	bhi.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae8:	d172      	bne.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003aea:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003aec:	61fb      	str	r3, [r7, #28]
          break;
 8003aee:	e072      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003af0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003afc:	d109      	bne.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003afe:	4b1c      	ldr	r3, [pc, #112]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b08:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	e008      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003b12:	4b17      	ldr	r3, [pc, #92]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b1c:	4a15      	ldr	r2, [pc, #84]	@ (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b24:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b2a:	099b      	lsrs	r3, r3, #6
 8003b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b38:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b3e:	0f1b      	lsrs	r3, r3, #28
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
          break;
 8003b4c:	e043      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b4e:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b5a:	d111      	bne.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b5c:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b64:	4a04      	ldr	r2, [pc, #16]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e010      	b.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	00f42400 	.word	0x00f42400
 8003b78:	007a1200 	.word	0x007a1200
 8003b7c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b80:	4b5f      	ldr	r3, [pc, #380]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b88:	4a5e      	ldr	r2, [pc, #376]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003b90:	4b5b      	ldr	r3, [pc, #364]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003ba2:	4b57      	ldr	r3, [pc, #348]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	0f1b      	lsrs	r3, r3, #28
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	61fb      	str	r3, [r7, #28]
          break;
 8003bb4:	e00f      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bb6:	4b52      	ldr	r3, [pc, #328]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc2:	d102      	bne.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003bc4:	4b50      	ldr	r3, [pc, #320]	@ (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003bc6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003bca:	4b4e      	ldr	r3, [pc, #312]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003bcc:	61fb      	str	r3, [r7, #28]
          break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
          break;
 8003bd4:	bf00      	nop
        }
      }
      break;
 8003bd6:	e08b      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003bd8:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bde:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003bea:	d06f      	beq.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003bf2:	d878      	bhi.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bfa:	d03c      	beq.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c02:	d870      	bhi.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d006      	beq.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c10:	d169      	bne.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c12:	4b3e      	ldr	r3, [pc, #248]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8003c14:	61fb      	str	r3, [r7, #28]
          break;
 8003c16:	e069      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c18:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c24:	d109      	bne.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003c26:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c30:	4a35      	ldr	r2, [pc, #212]	@ (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e008      	b.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003c3a:	4b31      	ldr	r3, [pc, #196]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c44:	4a2f      	ldr	r2, [pc, #188]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c60:	4b27      	ldr	r3, [pc, #156]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c66:	0f1b      	lsrs	r3, r3, #28
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	61fb      	str	r3, [r7, #28]
          break;
 8003c74:	e03a      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c76:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c82:	d108      	bne.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c84:	4b1e      	ldr	r3, [pc, #120]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e007      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c9e:	4a19      	ldr	r2, [pc, #100]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003ca6:	4b16      	ldr	r3, [pc, #88]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	0f1b      	lsrs	r3, r3, #28
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	61fb      	str	r3, [r7, #28]
          break;
 8003cca:	e00f      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd8:	d102      	bne.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003cda:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003cdc:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003cde:	e005      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003ce0:	4b08      	ldr	r3, [pc, #32]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003ce2:	61fb      	str	r3, [r7, #28]
          break;
 8003ce4:	e002      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
          break;
 8003cea:	bf00      	nop
        }
      }
      break;
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 8003cee:	bf00      	nop
    }
  }
  return frequency;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	@ 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	00f42400 	.word	0x00f42400
 8003d08:	007a1200 	.word	0x007a1200
 8003d0c:	00bb8000 	.word	0x00bb8000

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b0ae      	sub	sp, #184	@ 0xb8
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d36:	4bcb      	ldr	r3, [pc, #812]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	f200 8206 	bhi.w	8004150 <HAL_RCC_GetSysClockFreq+0x440>
 8003d44:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d81 	.word	0x08003d81
 8003d50:	08004151 	.word	0x08004151
 8003d54:	08004151 	.word	0x08004151
 8003d58:	08004151 	.word	0x08004151
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08004151 	.word	0x08004151
 8003d64:	08004151 	.word	0x08004151
 8003d68:	08004151 	.word	0x08004151
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08004151 	.word	0x08004151
 8003d74:	08004151 	.word	0x08004151
 8003d78:	08004151 	.word	0x08004151
 8003d7c:	08003f81 	.word	0x08003f81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4bb9      	ldr	r3, [pc, #740]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d86:	e1e7      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d88:	4bb8      	ldr	r3, [pc, #736]	@ (800406c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d8e:	e1e3      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d90:	4bb4      	ldr	r3, [pc, #720]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9c:	4bb1      	ldr	r3, [pc, #708]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d071      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da8:	4bae      	ldr	r3, [pc, #696]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003db4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dce:	4622      	mov	r2, r4
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	0159      	lsls	r1, r3, #5
 8003ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de0:	0150      	lsls	r0, r2, #5
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4621      	mov	r1, r4
 8003de8:	1a51      	subs	r1, r2, r1
 8003dea:	6439      	str	r1, [r7, #64]	@ 0x40
 8003dec:	4629      	mov	r1, r5
 8003dee:	eb63 0301 	sbc.w	r3, r3, r1
 8003df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003e00:	4649      	mov	r1, r9
 8003e02:	018b      	lsls	r3, r1, #6
 8003e04:	4641      	mov	r1, r8
 8003e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	018a      	lsls	r2, r1, #6
 8003e0e:	4641      	mov	r1, r8
 8003e10:	1a51      	subs	r1, r2, r1
 8003e12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e14:	4649      	mov	r1, r9
 8003e16:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003e28:	4649      	mov	r1, r9
 8003e2a:	00cb      	lsls	r3, r1, #3
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e32:	4641      	mov	r1, r8
 8003e34:	00ca      	lsls	r2, r1, #3
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e42:	462b      	mov	r3, r5
 8003e44:	460a      	mov	r2, r1
 8003e46:	eb42 0303 	adc.w	r3, r2, r3
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e58:	4629      	mov	r1, r5
 8003e5a:	024b      	lsls	r3, r1, #9
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e62:	4621      	mov	r1, r4
 8003e64:	024a      	lsls	r2, r1, #9
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e7c:	f7fc fe92 	bl	8000ba4 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e8a:	e067      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8c:	4b75      	ldr	r3, [pc, #468]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e98:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003eaa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec0:	0150      	lsls	r0, r2, #5
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	1a51      	subs	r1, r2, r1
 8003eca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	018b      	lsls	r3, r1, #6
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eea:	4641      	mov	r1, r8
 8003eec:	018a      	lsls	r2, r1, #6
 8003eee:	4641      	mov	r1, r8
 8003ef0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0e:	4692      	mov	sl, r2
 8003f10:	469b      	mov	fp, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	eb1a 0303 	adds.w	r3, sl, r3
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	028b      	lsls	r3, r1, #10
 8003f32:	4621      	mov	r1, r4
 8003f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f38:	4621      	mov	r1, r4
 8003f3a:	028a      	lsls	r2, r1, #10
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f44:	2200      	movs	r2, #0
 8003f46:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f48:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f4e:	f7fc fe29 	bl	8000ba4 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4613      	mov	r3, r2
 8003f58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f5c:	4b41      	ldr	r3, [pc, #260]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f7e:	e0eb      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f80:	4b38      	ldr	r3, [pc, #224]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f8c:	4b35      	ldr	r3, [pc, #212]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d06b      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f98:	4b32      	ldr	r3, [pc, #200]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fac:	2300      	movs	r3, #0
 8003fae:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	0159      	lsls	r1, r3, #5
 8003fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc6:	0150      	lsls	r0, r2, #5
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4621      	mov	r1, r4
 8003fce:	1a51      	subs	r1, r2, r1
 8003fd0:	61b9      	str	r1, [r7, #24]
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fe6:	4659      	mov	r1, fp
 8003fe8:	018b      	lsls	r3, r1, #6
 8003fea:	4651      	mov	r1, sl
 8003fec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	018a      	lsls	r2, r1, #6
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	ebb2 0801 	subs.w	r8, r2, r1
 8003ffa:	4659      	mov	r1, fp
 8003ffc:	eb63 0901 	sbc.w	r9, r3, r1
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004010:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004014:	4690      	mov	r8, r2
 8004016:	4699      	mov	r9, r3
 8004018:	4623      	mov	r3, r4
 800401a:	eb18 0303 	adds.w	r3, r8, r3
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	462b      	mov	r3, r5
 8004022:	eb49 0303 	adc.w	r3, r9, r3
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004034:	4629      	mov	r1, r5
 8004036:	024b      	lsls	r3, r1, #9
 8004038:	4621      	mov	r1, r4
 800403a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800403e:	4621      	mov	r1, r4
 8004040:	024a      	lsls	r2, r1, #9
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800404a:	2200      	movs	r2, #0
 800404c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800404e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004050:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004054:	f7fc fda6 	bl	8000ba4 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004062:	e065      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x420>
 8004064:	40023800 	.word	0x40023800
 8004068:	00f42400 	.word	0x00f42400
 800406c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004070:	4b3d      	ldr	r3, [pc, #244]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x458>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	2200      	movs	r2, #0
 8004078:	4618      	mov	r0, r3
 800407a:	4611      	mov	r1, r2
 800407c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004080:	653b      	str	r3, [r7, #80]	@ 0x50
 8004082:	2300      	movs	r3, #0
 8004084:	657b      	str	r3, [r7, #84]	@ 0x54
 8004086:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800408a:	4642      	mov	r2, r8
 800408c:	464b      	mov	r3, r9
 800408e:	f04f 0000 	mov.w	r0, #0
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	0159      	lsls	r1, r3, #5
 8004098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800409c:	0150      	lsls	r0, r2, #5
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4641      	mov	r1, r8
 80040a4:	1a51      	subs	r1, r2, r1
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	4649      	mov	r1, r9
 80040aa:	eb63 0301 	sbc.w	r3, r3, r1
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040bc:	4659      	mov	r1, fp
 80040be:	018b      	lsls	r3, r1, #6
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c6:	4651      	mov	r1, sl
 80040c8:	018a      	lsls	r2, r1, #6
 80040ca:	4651      	mov	r1, sl
 80040cc:	1a54      	subs	r4, r2, r1
 80040ce:	4659      	mov	r1, fp
 80040d0:	eb63 0501 	sbc.w	r5, r3, r1
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	00eb      	lsls	r3, r5, #3
 80040de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e2:	00e2      	lsls	r2, r4, #3
 80040e4:	4614      	mov	r4, r2
 80040e6:	461d      	mov	r5, r3
 80040e8:	4643      	mov	r3, r8
 80040ea:	18e3      	adds	r3, r4, r3
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	464b      	mov	r3, r9
 80040f0:	eb45 0303 	adc.w	r3, r5, r3
 80040f4:	607b      	str	r3, [r7, #4]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004102:	4629      	mov	r1, r5
 8004104:	028b      	lsls	r3, r1, #10
 8004106:	4621      	mov	r1, r4
 8004108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800410c:	4621      	mov	r1, r4
 800410e:	028a      	lsls	r2, r1, #10
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004118:	2200      	movs	r2, #0
 800411a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800411c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800411e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004122:	f7fc fd3f 	bl	8000ba4 <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4613      	mov	r3, r2
 800412c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004130:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x458>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	0f1b      	lsrs	r3, r3, #28
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800413e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800414e:	e003      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004152:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004156:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800415c:	4618      	mov	r0, r3
 800415e:	37b8      	adds	r7, #184	@ 0xb8
 8004160:	46bd      	mov	sp, r7
 8004162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800
 800416c:	00f42400 	.word	0x00f42400

08004170 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e28d      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8083 	beq.w	8004296 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004190:	4b94      	ldr	r3, [pc, #592]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b04      	cmp	r3, #4
 800419a:	d019      	beq.n	80041d0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800419c:	4b91      	ldr	r3, [pc, #580]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
        || \
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041a8:	4b8e      	ldr	r3, [pc, #568]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b4:	d00c      	beq.n	80041d0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b6:	4b8b      	ldr	r3, [pc, #556]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d112      	bne.n	80041e8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c2:	4b88      	ldr	r3, [pc, #544]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ce:	d10b      	bne.n	80041e8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	4b84      	ldr	r3, [pc, #528]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05b      	beq.n	8004294 <HAL_RCC_OscConfig+0x124>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d157      	bne.n	8004294 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e25a      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f0:	d106      	bne.n	8004200 <HAL_RCC_OscConfig+0x90>
 80041f2:	4b7c      	ldr	r3, [pc, #496]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7b      	ldr	r2, [pc, #492]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e01d      	b.n	800423c <HAL_RCC_OscConfig+0xcc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0xb4>
 800420a:	4b76      	ldr	r3, [pc, #472]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a75      	ldr	r2, [pc, #468]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b73      	ldr	r3, [pc, #460]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a72      	ldr	r2, [pc, #456]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e00b      	b.n	800423c <HAL_RCC_OscConfig+0xcc>
 8004224:	4b6f      	ldr	r3, [pc, #444]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a6e      	ldr	r2, [pc, #440]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 800422a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b6c      	ldr	r3, [pc, #432]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6b      	ldr	r2, [pc, #428]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800423a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d013      	beq.n	800426c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd fd78 	bl	8001d38 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7fd fd74 	bl	8001d38 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	@ 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e21f      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b61      	ldr	r3, [pc, #388]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0xdc>
 800426a:	e014      	b.n	8004296 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd fd64 	bl	8001d38 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fd fd60 	bl	8001d38 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	@ 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e20b      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	4b57      	ldr	r3, [pc, #348]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x104>
 8004292:	e000      	b.n	8004296 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d06f      	beq.n	8004382 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042a2:	4b50      	ldr	r3, [pc, #320]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042ae:	4b4d      	ldr	r3, [pc, #308]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d105      	bne.n	80042c6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042ba:	4b4a      	ldr	r3, [pc, #296]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c6:	4b47      	ldr	r3, [pc, #284]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d11c      	bne.n	800430c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d2:	4b44      	ldr	r3, [pc, #272]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d116      	bne.n	800430c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042de:	4b41      	ldr	r3, [pc, #260]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_RCC_OscConfig+0x186>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d001      	beq.n	80042f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e1d3      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f6:	4b3b      	ldr	r3, [pc, #236]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4937      	ldr	r1, [pc, #220]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430a:	e03a      	b.n	8004382 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d020      	beq.n	8004356 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004314:	4b34      	ldr	r3, [pc, #208]	@ (80043e8 <HAL_RCC_OscConfig+0x278>)
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fd fd0d 	bl	8001d38 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004322:	f7fd fd09 	bl	8001d38 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e1b4      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004334:	4b2b      	ldr	r3, [pc, #172]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004340:	4b28      	ldr	r3, [pc, #160]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4925      	ldr	r1, [pc, #148]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004350:	4313      	orrs	r3, r2
 8004352:	600b      	str	r3, [r1, #0]
 8004354:	e015      	b.n	8004382 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004356:	4b24      	ldr	r3, [pc, #144]	@ (80043e8 <HAL_RCC_OscConfig+0x278>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fd fcec 	bl	8001d38 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004364:	f7fd fce8 	bl	8001d38 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e193      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004376:	4b1b      	ldr	r3, [pc, #108]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d036      	beq.n	80043fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004396:	4b15      	ldr	r3, [pc, #84]	@ (80043ec <HAL_RCC_OscConfig+0x27c>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fd fccc 	bl	8001d38 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a4:	f7fd fcc8 	bl	8001d38 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e173      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80043b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x234>
 80043c2:	e01b      	b.n	80043fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c4:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <HAL_RCC_OscConfig+0x27c>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fd fcb5 	bl	8001d38 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	e00e      	b.n	80043f0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d2:	f7fd fcb1 	bl	8001d38 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d907      	bls.n	80043f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e15c      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
 80043e4:	40023800 	.word	0x40023800
 80043e8:	42470000 	.word	0x42470000
 80043ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	4b8a      	ldr	r3, [pc, #552]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80043f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ea      	bne.n	80043d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8097 	beq.w	8004538 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440e:	4b83      	ldr	r3, [pc, #524]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10f      	bne.n	800443a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	4b7f      	ldr	r3, [pc, #508]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	4a7e      	ldr	r2, [pc, #504]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004428:	6413      	str	r3, [r2, #64]	@ 0x40
 800442a:	4b7c      	ldr	r3, [pc, #496]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443a:	4b79      	ldr	r3, [pc, #484]	@ (8004620 <HAL_RCC_OscConfig+0x4b0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d118      	bne.n	8004478 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004446:	4b76      	ldr	r3, [pc, #472]	@ (8004620 <HAL_RCC_OscConfig+0x4b0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a75      	ldr	r2, [pc, #468]	@ (8004620 <HAL_RCC_OscConfig+0x4b0>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004452:	f7fd fc71 	bl	8001d38 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445a:	f7fd fc6d 	bl	8001d38 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e118      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	4b6c      	ldr	r3, [pc, #432]	@ (8004620 <HAL_RCC_OscConfig+0x4b0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x31e>
 8004480:	4b66      	ldr	r3, [pc, #408]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a65      	ldr	r2, [pc, #404]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
 800448c:	e01c      	b.n	80044c8 <HAL_RCC_OscConfig+0x358>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b05      	cmp	r3, #5
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x340>
 8004496:	4b61      	ldr	r3, [pc, #388]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449a:	4a60      	ldr	r2, [pc, #384]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 800449c:	f043 0304 	orr.w	r3, r3, #4
 80044a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044a2:	4b5e      	ldr	r3, [pc, #376]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	4a5d      	ldr	r2, [pc, #372]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ae:	e00b      	b.n	80044c8 <HAL_RCC_OscConfig+0x358>
 80044b0:	4b5a      	ldr	r3, [pc, #360]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b4:	4a59      	ldr	r2, [pc, #356]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80044bc:	4b57      	ldr	r3, [pc, #348]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c0:	4a56      	ldr	r2, [pc, #344]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80044c2:	f023 0304 	bic.w	r3, r3, #4
 80044c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d015      	beq.n	80044fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fd fc32 	bl	8001d38 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d8:	f7fd fc2e 	bl	8001d38 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e0d7      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ee:	4b4b      	ldr	r3, [pc, #300]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0ee      	beq.n	80044d8 <HAL_RCC_OscConfig+0x368>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fd fc1c 	bl	8001d38 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004502:	e00a      	b.n	800451a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fd fc18 	bl	8001d38 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0c1      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451a:	4b40      	ldr	r3, [pc, #256]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ee      	bne.n	8004504 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452c:	4b3b      	ldr	r3, [pc, #236]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	4a3a      	ldr	r2, [pc, #232]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004536:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80ad 	beq.w	800469c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004542:	4b36      	ldr	r3, [pc, #216]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b08      	cmp	r3, #8
 800454c:	d060      	beq.n	8004610 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d145      	bne.n	80045e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b33      	ldr	r3, [pc, #204]	@ (8004624 <HAL_RCC_OscConfig+0x4b4>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fbec 	bl	8001d38 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fbe8 	bl	8001d38 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e093      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	4b29      	ldr	r3, [pc, #164]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	3b01      	subs	r3, #1
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ac:	071b      	lsls	r3, r3, #28
 80045ae:	491b      	ldr	r1, [pc, #108]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_RCC_OscConfig+0x4b4>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fd fbbd 	bl	8001d38 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fd fbb9 	bl	8001d38 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e064      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d4:	4b11      	ldr	r3, [pc, #68]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x452>
 80045e0:	e05c      	b.n	800469c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e2:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <HAL_RCC_OscConfig+0x4b4>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd fba6 	bl	8001d38 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fd fba2 	bl	8001d38 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e04d      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b06      	ldr	r3, [pc, #24]	@ (800461c <HAL_RCC_OscConfig+0x4ac>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x480>
 800460e:	e045      	b.n	800469c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d107      	bne.n	8004628 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e040      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
 800461c:	40023800 	.word	0x40023800
 8004620:	40007000 	.word	0x40007000
 8004624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004628:	4b1f      	ldr	r3, [pc, #124]	@ (80046a8 <HAL_RCC_OscConfig+0x538>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d030      	beq.n	8004698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d129      	bne.n	8004698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d122      	bne.n	8004698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800465e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004660:	4293      	cmp	r3, r2
 8004662:	d119      	bne.n	8004698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	3b01      	subs	r3, #1
 8004672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d10f      	bne.n	8004698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d107      	bne.n	8004698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800

080046ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e042      	b.n	8004744 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fd fa02 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	@ 0x24
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f973 	bl	80049dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	@ 0x28
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b20      	cmp	r3, #32
 800476a:	d175      	bne.n	8004858 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_UART_Transmit+0x2c>
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e06e      	b.n	800485a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2221      	movs	r2, #33	@ 0x21
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478a:	f7fd fad5 	bl	8001d38 <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	88fa      	ldrh	r2, [r7, #6]
 800479a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a4:	d108      	bne.n	80047b8 <HAL_UART_Transmit+0x6c>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d104      	bne.n	80047b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	e003      	b.n	80047c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047c0:	e02e      	b.n	8004820 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	@ 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f848 	bl	8004862 <UART_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e03a      	b.n	800485a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	3302      	adds	r3, #2
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e007      	b.n	8004812 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3301      	adds	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1cb      	bne.n	80047c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	2140      	movs	r1, #64	@ 0x40
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f814 	bl	8004862 <UART_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e006      	b.n	800485a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004872:	e03b      	b.n	80048ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d037      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487c:	f7fd fa5c 	bl	8001d38 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	6a3a      	ldr	r2, [r7, #32]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <UART_WaitOnFlagUntilTimeout+0x30>
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e03a      	b.n	800490c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d023      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b80      	cmp	r3, #128	@ 0x80
 80048a8:	d020      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b40      	cmp	r3, #64	@ 0x40
 80048ae:	d01d      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d116      	bne.n	80048ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f81d 	bl	8004914 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2208      	movs	r2, #8
 80048de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e00f      	b.n	800490c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	429a      	cmp	r2, r3
 8004908:	d0b4      	beq.n	8004874 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004914:	b480      	push	{r7}
 8004916:	b095      	sub	sp, #84	@ 0x54
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800493c:	643a      	str	r2, [r7, #64]	@ 0x40
 800493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004942:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800494a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e5      	bne.n	800491c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3314      	adds	r3, #20
 800496e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004970:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	2b01      	cmp	r3, #1
 800498a:	d119      	bne.n	80049c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	60bb      	str	r3, [r7, #8]
   return(result);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 0310 	bic.w	r3, r3, #16
 80049a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049ac:	61ba      	str	r2, [r7, #24]
 80049ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049ce:	bf00      	nop
 80049d0:	3754      	adds	r7, #84	@ 0x54
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e0:	b0c0      	sub	sp, #256	@ 0x100
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	68d9      	ldr	r1, [r3, #12]
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	ea40 0301 	orr.w	r3, r0, r1
 8004a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a34:	f021 010c 	bic.w	r1, r1, #12
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a42:	430b      	orrs	r3, r1
 8004a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a56:	6999      	ldr	r1, [r3, #24]
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	ea40 0301 	orr.w	r3, r0, r1
 8004a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b8f      	ldr	r3, [pc, #572]	@ (8004ca8 <UART_SetConfig+0x2cc>)
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d005      	beq.n	8004a7c <UART_SetConfig+0xa0>
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4b8d      	ldr	r3, [pc, #564]	@ (8004cac <UART_SetConfig+0x2d0>)
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d104      	bne.n	8004a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7fe fbc0 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8004a80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a84:	e003      	b.n	8004a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a86:	f7fe fba7 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a98:	f040 810c 	bne.w	8004cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004abe:	4621      	mov	r1, r4
 8004ac0:	eb12 0801 	adds.w	r8, r2, r1
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	eb43 0901 	adc.w	r9, r3, r1
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ade:	4690      	mov	r8, r2
 8004ae0:	4699      	mov	r9, r3
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	eb18 0303 	adds.w	r3, r8, r3
 8004ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004aec:	462b      	mov	r3, r5
 8004aee:	eb49 0303 	adc.w	r3, r9, r3
 8004af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	18db      	adds	r3, r3, r3
 8004b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b10:	4613      	mov	r3, r2
 8004b12:	eb42 0303 	adc.w	r3, r2, r3
 8004b16:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b20:	f7fc f840 	bl	8000ba4 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4b61      	ldr	r3, [pc, #388]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	011c      	lsls	r4, r3, #4
 8004b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b44:	4642      	mov	r2, r8
 8004b46:	464b      	mov	r3, r9
 8004b48:	1891      	adds	r1, r2, r2
 8004b4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b4c:	415b      	adcs	r3, r3
 8004b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b54:	4641      	mov	r1, r8
 8004b56:	eb12 0a01 	adds.w	sl, r2, r1
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b74:	4692      	mov	sl, r2
 8004b76:	469b      	mov	fp, r3
 8004b78:	4643      	mov	r3, r8
 8004b7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b82:	464b      	mov	r3, r9
 8004b84:	eb4b 0303 	adc.w	r3, fp, r3
 8004b88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	18db      	adds	r3, r3, r3
 8004ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	eb42 0303 	adc.w	r3, r2, r3
 8004bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bb6:	f7fb fff5 	bl	8000ba4 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2264      	movs	r2, #100	@ 0x64
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	1acb      	subs	r3, r1, r3
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bd6:	4b36      	ldr	r3, [pc, #216]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004be4:	441c      	add	r4, r3
 8004be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	1891      	adds	r1, r2, r2
 8004bfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c00:	415b      	adcs	r3, r3
 8004c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c08:	4641      	mov	r1, r8
 8004c0a:	1851      	adds	r1, r2, r1
 8004c0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c0e:	4649      	mov	r1, r9
 8004c10:	414b      	adcs	r3, r1
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c20:	4659      	mov	r1, fp
 8004c22:	00cb      	lsls	r3, r1, #3
 8004c24:	4651      	mov	r1, sl
 8004c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	00ca      	lsls	r2, r1, #3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4619      	mov	r1, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	4642      	mov	r2, r8
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c3c:	464b      	mov	r3, r9
 8004c3e:	460a      	mov	r2, r1
 8004c40:	eb42 0303 	adc.w	r3, r2, r3
 8004c44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	18db      	adds	r3, r3, r3
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c62:	4613      	mov	r3, r2
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c72:	f7fb ff97 	bl	8000ba4 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	2164      	movs	r1, #100	@ 0x64
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	3332      	adds	r3, #50	@ 0x32
 8004c8e:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	f003 0207 	and.w	r2, r3, #7
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4422      	add	r2, r4
 8004ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ca4:	e106      	b.n	8004eb4 <UART_SetConfig+0x4d8>
 8004ca6:	bf00      	nop
 8004ca8:	40011000 	.word	0x40011000
 8004cac:	40011400 	.word	0x40011400
 8004cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	464b      	mov	r3, r9
 8004cca:	1891      	adds	r1, r2, r2
 8004ccc:	6239      	str	r1, [r7, #32]
 8004cce:	415b      	adcs	r3, r3
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	1854      	adds	r4, r2, r1
 8004cda:	4649      	mov	r1, r9
 8004cdc:	eb43 0501 	adc.w	r5, r3, r1
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	00eb      	lsls	r3, r5, #3
 8004cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cee:	00e2      	lsls	r2, r4, #3
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	461d      	mov	r5, r3
 8004cf4:	4643      	mov	r3, r8
 8004cf6:	18e3      	adds	r3, r4, r3
 8004cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	eb45 0303 	adc.w	r3, r5, r3
 8004d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d22:	4629      	mov	r1, r5
 8004d24:	008b      	lsls	r3, r1, #2
 8004d26:	4621      	mov	r1, r4
 8004d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	008a      	lsls	r2, r1, #2
 8004d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d34:	f7fb ff36 	bl	8000ba4 <__aeabi_uldivmod>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4b60      	ldr	r3, [pc, #384]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	011c      	lsls	r4, r3, #4
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	1891      	adds	r1, r2, r2
 8004d5e:	61b9      	str	r1, [r7, #24]
 8004d60:	415b      	adcs	r3, r3
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d68:	4641      	mov	r1, r8
 8004d6a:	1851      	adds	r1, r2, r1
 8004d6c:	6139      	str	r1, [r7, #16]
 8004d6e:	4649      	mov	r1, r9
 8004d70:	414b      	adcs	r3, r1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d80:	4659      	mov	r1, fp
 8004d82:	00cb      	lsls	r3, r1, #3
 8004d84:	4651      	mov	r1, sl
 8004d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	00ca      	lsls	r2, r1, #3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	4642      	mov	r2, r8
 8004d96:	189b      	adds	r3, r3, r2
 8004d98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	460a      	mov	r2, r1
 8004da0:	eb42 0303 	adc.w	r3, r2, r3
 8004da4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004db2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	008b      	lsls	r3, r1, #2
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dca:	4641      	mov	r1, r8
 8004dcc:	008a      	lsls	r2, r1, #2
 8004dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dd2:	f7fb fee7 	bl	8000ba4 <__aeabi_uldivmod>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4b38      	ldr	r3, [pc, #224]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004dde:	fba3 2301 	umull	r2, r3, r3, r1
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2264      	movs	r2, #100	@ 0x64
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	1acb      	subs	r3, r1, r3
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	3332      	adds	r3, #50	@ 0x32
 8004df0:	4a33      	ldr	r2, [pc, #204]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dfc:	441c      	add	r4, r3
 8004dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e02:	2200      	movs	r2, #0
 8004e04:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e06:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	415b      	adcs	r3, r3
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	1851      	adds	r1, r2, r1
 8004e20:	6039      	str	r1, [r7, #0]
 8004e22:	4649      	mov	r1, r9
 8004e24:	414b      	adcs	r3, r1
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e34:	4659      	mov	r1, fp
 8004e36:	00cb      	lsls	r3, r1, #3
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3e:	4651      	mov	r1, sl
 8004e40:	00ca      	lsls	r2, r1, #3
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e4e:	464b      	mov	r3, r9
 8004e50:	460a      	mov	r2, r1
 8004e52:	eb42 0303 	adc.w	r3, r2, r3
 8004e56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e62:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e70:	4649      	mov	r1, r9
 8004e72:	008b      	lsls	r3, r1, #2
 8004e74:	4641      	mov	r1, r8
 8004e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	008a      	lsls	r2, r1, #2
 8004e7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e82:	f7fb fe8f 	bl	8000ba4 <__aeabi_uldivmod>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	2164      	movs	r1, #100	@ 0x64
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	3332      	adds	r3, #50	@ 0x32
 8004e9e:	4a08      	ldr	r2, [pc, #32]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	f003 020f 	and.w	r2, r3, #15
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4422      	add	r2, r4
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec0:	51eb851f 	.word	0x51eb851f

08004ec4 <arm_fir_init_f32>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	9d04      	ldr	r5, [sp, #16]
 8004ec8:	8001      	strh	r1, [r0, #0]
 8004eca:	3d01      	subs	r5, #1
 8004ecc:	440d      	add	r5, r1
 8004ece:	6082      	str	r2, [r0, #8]
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	00aa      	lsls	r2, r5, #2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	f000 fa8a 	bl	80053f0 <memset>
 8004edc:	6060      	str	r0, [r4, #4]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}

08004ee0 <arm_fir_f32>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	ed2d 8b10 	vpush	{d8-d15}
 8004ee8:	b08b      	sub	sp, #44	@ 0x2c
 8004eea:	f8b0 c000 	ldrh.w	ip, [r0]
 8004eee:	9003      	str	r0, [sp, #12]
 8004ef0:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8004ef4:	f10c 4080 	add.w	r0, ip, #1073741824	@ 0x40000000
 8004ef8:	3801      	subs	r0, #1
 8004efa:	9304      	str	r3, [sp, #16]
 8004efc:	eb09 0580 	add.w	r5, r9, r0, lsl #2
 8004f00:	08db      	lsrs	r3, r3, #3
 8004f02:	9402      	str	r4, [sp, #8]
 8004f04:	9500      	str	r5, [sp, #0]
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	f000 81f6 	beq.w	80052f8 <arm_fir_f32+0x418>
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 8004f12:	4620      	mov	r0, r4
 8004f14:	015e      	lsls	r6, r3, #5
 8004f16:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8004f1a:	3020      	adds	r0, #32
 8004f1c:	9605      	str	r6, [sp, #20]
 8004f1e:	9406      	str	r4, [sp, #24]
 8004f20:	f00c 0a07 	and.w	sl, ip, #7
 8004f24:	9007      	str	r0, [sp, #28]
 8004f26:	f109 0b1c 	add.w	fp, r9, #28
 8004f2a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8004f2e:	e9dd 8905 	ldrd	r8, r9, [sp, #20]
 8004f32:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8004f36:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 8004f3a:	4650      	mov	r0, sl
 8004f3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004f40:	f8cd c020 	str.w	ip, [sp, #32]
 8004f44:	f101 0620 	add.w	r6, r1, #32
 8004f48:	3520      	adds	r5, #32
 8004f4a:	f102 0420 	add.w	r4, r2, #32
 8004f4e:	469c      	mov	ip, r3
 8004f50:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8004f54:	f845 3c20 	str.w	r3, [r5, #-32]
 8004f58:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8004f5c:	f845 3c1c 	str.w	r3, [r5, #-28]
 8004f60:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8004f64:	f845 3c18 	str.w	r3, [r5, #-24]
 8004f68:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8004f6c:	f845 3c14 	str.w	r3, [r5, #-20]
 8004f70:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8004f74:	f845 3c10 	str.w	r3, [r5, #-16]
 8004f78:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8004f7c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8004f80:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004f84:	f845 3c08 	str.w	r3, [r5, #-8]
 8004f88:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004f8c:	f845 3c04 	str.w	r3, [r5, #-4]
 8004f90:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 8004f94:	ed1b 1a06 	vldr	s2, [fp, #-24]	@ 0xffffffe8
 8004f98:	ed5b 0a05 	vldr	s1, [fp, #-20]	@ 0xffffffec
 8004f9c:	ed1b 0a04 	vldr	s0, [fp, #-16]
 8004fa0:	ed1b 8a03 	vldr	s16, [fp, #-12]
 8004fa4:	ed5b 1a02 	vldr	s3, [fp, #-8]
 8004fa8:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8004fac:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8005238 <arm_fir_f32+0x358>
 8004fb0:	465a      	mov	r2, fp
 8004fb2:	f1bc 0f00 	cmp.w	ip, #0
 8004fb6:	f000 8207 	beq.w	80053c8 <arm_fir_f32+0x4e8>
 8004fba:	f10b 0120 	add.w	r1, fp, #32
 8004fbe:	eef0 ba66 	vmov.f32	s23, s13
 8004fc2:	eeb0 6a66 	vmov.f32	s12, s13
 8004fc6:	eeb0 9a66 	vmov.f32	s18, s13
 8004fca:	eef0 9a66 	vmov.f32	s19, s13
 8004fce:	eeb0 aa66 	vmov.f32	s20, s13
 8004fd2:	eef0 aa66 	vmov.f32	s21, s13
 8004fd6:	eeb0 ba66 	vmov.f32	s22, s13
 8004fda:	460a      	mov	r2, r1
 8004fdc:	4653      	mov	r3, sl
 8004fde:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 8004fe2:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 8004fe6:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 8004fea:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 8004fee:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 8004ff2:	ed53 ca04 	vldr	s25, [r3, #-16]
 8004ff6:	ed53 2a03 	vldr	s5, [r3, #-12]
 8004ffa:	ed13 4a02 	vldr	s8, [r3, #-8]
 8004ffe:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005002:	ee67 fa02 	vmul.f32	s31, s14, s4
 8005006:	ee27 da01 	vmul.f32	s26, s14, s2
 800500a:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800500e:	ee27 ca20 	vmul.f32	s24, s14, s1
 8005012:	ee27 3a00 	vmul.f32	s6, s14, s0
 8005016:	ee67 3a08 	vmul.f32	s7, s14, s16
 800501a:	ee67 5a21 	vmul.f32	s11, s14, s3
 800501e:	ee27 fa28 	vmul.f32	s30, s14, s17
 8005022:	ee67 7a24 	vmul.f32	s15, s14, s9
 8005026:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800502a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800502e:	ee6e fa81 	vmul.f32	s31, s29, s2
 8005032:	ee2e daa0 	vmul.f32	s26, s29, s1
 8005036:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800503a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800503e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005042:	ee2e ca80 	vmul.f32	s24, s29, s0
 8005046:	ee2e 3a88 	vmul.f32	s6, s29, s16
 800504a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800504e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005052:	ee6e 3aa1 	vmul.f32	s7, s29, s3
 8005056:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800505a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee24 faae 	vmul.f32	s30, s9, s29
 8005066:	ee6e ea82 	vmul.f32	s29, s29, s4
 800506a:	ee2e 7a20 	vmul.f32	s14, s28, s1
 800506e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8005072:	ed52 0a05 	vldr	s1, [r2, #-20]	@ 0xffffffec
 8005076:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800507a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800507e:	ee2e da00 	vmul.f32	s26, s28, s0
 8005082:	ee2e ca08 	vmul.f32	s24, s28, s16
 8005086:	ee73 9a29 	vadd.f32	s19, s6, s19
 800508a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800508e:	ee2e 3a21 	vmul.f32	s6, s28, s3
 8005092:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8005096:	ee35 6a86 	vadd.f32	s12, s11, s12
 800509a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800509e:	ee64 5a8e 	vmul.f32	s11, s9, s28
 80050a2:	ee22 fa0e 	vmul.f32	s30, s4, s28
 80050a6:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 80050aa:	ee2e ea01 	vmul.f32	s28, s28, s2
 80050ae:	ee6d 6a80 	vmul.f32	s13, s27, s0
 80050b2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80050b6:	ed12 0a04 	vldr	s0, [r2, #-16]
 80050ba:	ee2d da88 	vmul.f32	s26, s27, s16
 80050be:	ee37 ba0b 	vadd.f32	s22, s14, s22
 80050c2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80050c6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80050ca:	ee2d caa1 	vmul.f32	s24, s27, s3
 80050ce:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 80050d2:	ee33 9a89 	vadd.f32	s18, s7, s18
 80050d6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80050da:	ee64 3aad 	vmul.f32	s7, s9, s27
 80050de:	ee62 5a2d 	vmul.f32	s11, s4, s27
 80050e2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80050e6:	ee7e 7a27 	vadd.f32	s15, s28, s15
 80050ea:	ee21 fa2d 	vmul.f32	s30, s2, s27
 80050ee:	ee6d daa0 	vmul.f32	s27, s27, s1
 80050f2:	ee6c fa88 	vmul.f32	s31, s25, s16
 80050f6:	ee36 ba8b 	vadd.f32	s22, s13, s22
 80050fa:	ed12 8a03 	vldr	s16, [r2, #-12]
 80050fe:	ee3d da2a 	vadd.f32	s26, s26, s21
 8005102:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005106:	ee6c aaa1 	vmul.f32	s21, s25, s3
 800510a:	ee2c caa8 	vmul.f32	s24, s25, s17
 800510e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005112:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005116:	ee24 3aac 	vmul.f32	s6, s9, s25
 800511a:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800511e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005122:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8005126:	ee61 5a2c 	vmul.f32	s11, s2, s25
 800512a:	ee20 faac 	vmul.f32	s30, s1, s25
 800512e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8005132:	ee6c ca80 	vmul.f32	s25, s25, s0
 8005136:	ee62 eaa1 	vmul.f32	s29, s5, s3
 800513a:	ee3a da8d 	vadd.f32	s26, s21, s26
 800513e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8005142:	ee62 aaa8 	vmul.f32	s21, s5, s17
 8005146:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800514a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800514e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005152:	ee24 caa2 	vmul.f32	s24, s9, s5
 8005156:	ee22 3a22 	vmul.f32	s6, s4, s5
 800515a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800515e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005162:	ee61 3a22 	vmul.f32	s7, s2, s5
 8005166:	ee60 5aa2 	vmul.f32	s11, s1, s5
 800516a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800516e:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8005172:	ee20 fa22 	vmul.f32	s30, s0, s5
 8005176:	ee62 2a88 	vmul.f32	s5, s5, s16
 800517a:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800517e:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8005182:	ee24 ba28 	vmul.f32	s22, s8, s17
 8005186:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800518a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800518e:	ee24 da84 	vmul.f32	s26, s9, s8
 8005192:	ee22 ca04 	vmul.f32	s24, s4, s8
 8005196:	ee73 9a29 	vadd.f32	s19, s6, s19
 800519a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800519e:	ee21 3a04 	vmul.f32	s6, s2, s8
 80051a2:	ee60 3a84 	vmul.f32	s7, s1, s8
 80051a6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80051aa:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80051ae:	ee60 5a04 	vmul.f32	s11, s0, s8
 80051b2:	ee28 7a04 	vmul.f32	s14, s16, s8
 80051b6:	ee64 6a21 	vmul.f32	s13, s8, s3
 80051ba:	ed52 8a01 	vldr	s17, [r2, #-4]
 80051be:	ee73 9a29 	vadd.f32	s19, s6, s19
 80051c2:	ee33 9a89 	vadd.f32	s18, s7, s18
 80051c6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80051ca:	ee37 7a2b 	vadd.f32	s14, s14, s23
 80051ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80051d2:	ee3b ba2f 	vadd.f32	s22, s22, s31
 80051d6:	ee64 4a85 	vmul.f32	s9, s9, s10
 80051da:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80051de:	ee22 4a05 	vmul.f32	s8, s4, s10
 80051e2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80051e6:	ee61 2a05 	vmul.f32	s5, s2, s10
 80051ea:	ee20 3a85 	vmul.f32	s6, s1, s10
 80051ee:	ee60 3a05 	vmul.f32	s7, s0, s10
 80051f2:	ee68 5a05 	vmul.f32	s11, s16, s10
 80051f6:	ee61 ba85 	vmul.f32	s23, s3, s10
 80051fa:	ee65 7a28 	vmul.f32	s15, s10, s17
 80051fe:	3320      	adds	r3, #32
 8005200:	429f      	cmp	r7, r3
 8005202:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8005206:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800520a:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800520e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005212:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005216:	ee35 6a86 	vadd.f32	s12, s11, s12
 800521a:	ee7b ba87 	vadd.f32	s23, s23, s14
 800521e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005222:	f102 0220 	add.w	r2, r2, #32
 8005226:	f47f aeda 	bne.w	8004fde <arm_fir_f32+0xfe>
 800522a:	eb0b 0208 	add.w	r2, fp, r8
 800522e:	46cb      	mov	fp, r9
 8005230:	b3c0      	cbz	r0, 80052a4 <arm_fir_f32+0x3c4>
 8005232:	4603      	mov	r3, r0
 8005234:	e004      	b.n	8005240 <arm_fir_f32+0x360>
 8005236:	bf00      	nop
 8005238:	00000000 	.word	0x00000000
 800523c:	eef0 8a65 	vmov.f32	s17, s11
 8005240:	ecfb 7a01 	vldmia	fp!, {s15}
 8005244:	ecf2 5a01 	vldmia	r2!, {s11}
 8005248:	ee27 2a82 	vmul.f32	s4, s15, s4
 800524c:	ee67 2a81 	vmul.f32	s5, s15, s2
 8005250:	ee27 3aa0 	vmul.f32	s6, s15, s1
 8005254:	ee67 3a80 	vmul.f32	s7, s15, s0
 8005258:	ee27 4a88 	vmul.f32	s8, s15, s16
 800525c:	ee67 4aa1 	vmul.f32	s9, s15, s3
 8005260:	ee28 5aa7 	vmul.f32	s10, s17, s15
 8005264:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005268:	3b01      	subs	r3, #1
 800526a:	ee3b ba02 	vadd.f32	s22, s22, s4
 800526e:	ee7a aaa2 	vadd.f32	s21, s21, s5
 8005272:	eeb0 2a41 	vmov.f32	s4, s2
 8005276:	ee3a aa03 	vadd.f32	s20, s20, s6
 800527a:	eeb0 1a60 	vmov.f32	s2, s1
 800527e:	ee79 9aa3 	vadd.f32	s19, s19, s7
 8005282:	eef0 0a40 	vmov.f32	s1, s0
 8005286:	ee39 9a04 	vadd.f32	s18, s18, s8
 800528a:	eeb0 0a48 	vmov.f32	s0, s16
 800528e:	ee36 6a24 	vadd.f32	s12, s12, s9
 8005292:	eeb0 8a61 	vmov.f32	s16, s3
 8005296:	ee7b ba85 	vadd.f32	s23, s23, s10
 800529a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800529e:	eef0 1a68 	vmov.f32	s3, s17
 80052a2:	d1cb      	bne.n	800523c <arm_fir_f32+0x35c>
 80052a4:	f1be 0e01 	subs.w	lr, lr, #1
 80052a8:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 80052ac:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 80052b0:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 80052b4:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 80052b8:	ed04 9a04 	vstr	s18, [r4, #-16]
 80052bc:	ed04 6a03 	vstr	s12, [r4, #-12]
 80052c0:	ed44 ba02 	vstr	s23, [r4, #-8]
 80052c4:	ed44 6a01 	vstr	s13, [r4, #-4]
 80052c8:	f106 0620 	add.w	r6, r6, #32
 80052cc:	f105 0520 	add.w	r5, r5, #32
 80052d0:	f104 0420 	add.w	r4, r4, #32
 80052d4:	468b      	mov	fp, r1
 80052d6:	f47f ae3b 	bne.w	8004f50 <arm_fir_f32+0x70>
 80052da:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80052de:	e9dd c908 	ldrd	ip, r9, [sp, #32]
 80052e2:	9b01      	ldr	r3, [sp, #4]
 80052e4:	9800      	ldr	r0, [sp, #0]
 80052e6:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 80052ea:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 80052ee:	eb09 1943 	add.w	r9, r9, r3, lsl #5
 80052f2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	9b04      	ldr	r3, [sp, #16]
 80052fa:	f013 0607 	ands.w	r6, r3, #7
 80052fe:	d026      	beq.n	800534e <arm_fir_f32+0x46e>
 8005300:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8005304:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005308:	4633      	mov	r3, r6
 800530a:	9f00      	ldr	r7, [sp, #0]
 800530c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005310:	4666      	mov	r6, ip
 8005312:	464d      	mov	r5, r9
 8005314:	469c      	mov	ip, r3
 8005316:	f851 3b04 	ldr.w	r3, [r1], #4
 800531a:	f847 3b04 	str.w	r3, [r7], #4
 800531e:	ed1f 7a3a 	vldr	s14, [pc, #-232]	@ 8005238 <arm_fir_f32+0x358>
 8005322:	b166      	cbz	r6, 800533e <arm_fir_f32+0x45e>
 8005324:	4633      	mov	r3, r6
 8005326:	4644      	mov	r4, r8
 8005328:	4628      	mov	r0, r5
 800532a:	ecf0 7a01 	vldmia	r0!, {s15}
 800532e:	ecf4 6a01 	vldmia	r4!, {s13}
 8005332:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005336:	3b01      	subs	r3, #1
 8005338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800533c:	d1f5      	bne.n	800532a <arm_fir_f32+0x44a>
 800533e:	4561      	cmp	r1, ip
 8005340:	eca2 7a01 	vstmia	r2!, {s14}
 8005344:	f105 0504 	add.w	r5, r5, #4
 8005348:	d1e5      	bne.n	8005316 <arm_fir_f32+0x436>
 800534a:	46b4      	mov	ip, r6
 800534c:	44f1      	add	r9, lr
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005354:	ea5f 059c 	movs.w	r5, ip, lsr #2
 8005358:	685c      	ldr	r4, [r3, #4]
 800535a:	d01e      	beq.n	800539a <arm_fir_f32+0x4ba>
 800535c:	f109 0210 	add.w	r2, r9, #16
 8005360:	f104 0310 	add.w	r3, r4, #16
 8005364:	4629      	mov	r1, r5
 8005366:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800536a:	f843 0c10 	str.w	r0, [r3, #-16]
 800536e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8005372:	f843 0c0c 	str.w	r0, [r3, #-12]
 8005376:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800537a:	f843 0c08 	str.w	r0, [r3, #-8]
 800537e:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005382:	f843 0c04 	str.w	r0, [r3, #-4]
 8005386:	3901      	subs	r1, #1
 8005388:	f102 0210 	add.w	r2, r2, #16
 800538c:	f103 0310 	add.w	r3, r3, #16
 8005390:	d1e9      	bne.n	8005366 <arm_fir_f32+0x486>
 8005392:	eb09 1905 	add.w	r9, r9, r5, lsl #4
 8005396:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800539a:	f01c 0c03 	ands.w	ip, ip, #3
 800539e:	d00e      	beq.n	80053be <arm_fir_f32+0x4de>
 80053a0:	f8d9 3000 	ldr.w	r3, [r9]
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	f1bc 0c01 	subs.w	ip, ip, #1
 80053aa:	d008      	beq.n	80053be <arm_fir_f32+0x4de>
 80053ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80053b0:	6063      	str	r3, [r4, #4]
 80053b2:	f1bc 0f01 	cmp.w	ip, #1
 80053b6:	bf1c      	itt	ne
 80053b8:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 80053bc:	60a3      	strne	r3, [r4, #8]
 80053be:	b00b      	add	sp, #44	@ 0x2c
 80053c0:	ecbd 8b10 	vpop	{d8-d15}
 80053c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80053cc:	eef0 ba66 	vmov.f32	s23, s13
 80053d0:	eeb0 6a66 	vmov.f32	s12, s13
 80053d4:	eeb0 9a66 	vmov.f32	s18, s13
 80053d8:	eef0 9a66 	vmov.f32	s19, s13
 80053dc:	eeb0 aa66 	vmov.f32	s20, s13
 80053e0:	eef0 aa66 	vmov.f32	s21, s13
 80053e4:	eeb0 ba66 	vmov.f32	s22, s13
 80053e8:	f102 0120 	add.w	r1, r2, #32
 80053ec:	e720      	b.n	8005230 <arm_fir_f32+0x350>
 80053ee:	bf00      	nop

080053f0 <memset>:
 80053f0:	4402      	add	r2, r0
 80053f2:	4603      	mov	r3, r0
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d100      	bne.n	80053fa <memset+0xa>
 80053f8:	4770      	bx	lr
 80053fa:	f803 1b01 	strb.w	r1, [r3], #1
 80053fe:	e7f9      	b.n	80053f4 <memset+0x4>

08005400 <__libc_init_array>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4d0d      	ldr	r5, [pc, #52]	@ (8005438 <__libc_init_array+0x38>)
 8005404:	4c0d      	ldr	r4, [pc, #52]	@ (800543c <__libc_init_array+0x3c>)
 8005406:	1b64      	subs	r4, r4, r5
 8005408:	10a4      	asrs	r4, r4, #2
 800540a:	2600      	movs	r6, #0
 800540c:	42a6      	cmp	r6, r4
 800540e:	d109      	bne.n	8005424 <__libc_init_array+0x24>
 8005410:	4d0b      	ldr	r5, [pc, #44]	@ (8005440 <__libc_init_array+0x40>)
 8005412:	4c0c      	ldr	r4, [pc, #48]	@ (8005444 <__libc_init_array+0x44>)
 8005414:	f001 f89c 	bl	8006550 <_init>
 8005418:	1b64      	subs	r4, r4, r5
 800541a:	10a4      	asrs	r4, r4, #2
 800541c:	2600      	movs	r6, #0
 800541e:	42a6      	cmp	r6, r4
 8005420:	d105      	bne.n	800542e <__libc_init_array+0x2e>
 8005422:	bd70      	pop	{r4, r5, r6, pc}
 8005424:	f855 3b04 	ldr.w	r3, [r5], #4
 8005428:	4798      	blx	r3
 800542a:	3601      	adds	r6, #1
 800542c:	e7ee      	b.n	800540c <__libc_init_array+0xc>
 800542e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005432:	4798      	blx	r3
 8005434:	3601      	adds	r6, #1
 8005436:	e7f2      	b.n	800541e <__libc_init_array+0x1e>
 8005438:	08006768 	.word	0x08006768
 800543c:	08006768 	.word	0x08006768
 8005440:	08006768 	.word	0x08006768
 8005444:	0800676c 	.word	0x0800676c

08005448 <cos>:
 8005448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800544a:	ec53 2b10 	vmov	r2, r3, d0
 800544e:	4826      	ldr	r0, [pc, #152]	@ (80054e8 <cos+0xa0>)
 8005450:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005454:	4281      	cmp	r1, r0
 8005456:	d806      	bhi.n	8005466 <cos+0x1e>
 8005458:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80054e0 <cos+0x98>
 800545c:	b005      	add	sp, #20
 800545e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005462:	f000 b899 	b.w	8005598 <__kernel_cos>
 8005466:	4821      	ldr	r0, [pc, #132]	@ (80054ec <cos+0xa4>)
 8005468:	4281      	cmp	r1, r0
 800546a:	d908      	bls.n	800547e <cos+0x36>
 800546c:	4610      	mov	r0, r2
 800546e:	4619      	mov	r1, r3
 8005470:	f7fa fece 	bl	8000210 <__aeabi_dsub>
 8005474:	ec41 0b10 	vmov	d0, r0, r1
 8005478:	b005      	add	sp, #20
 800547a:	f85d fb04 	ldr.w	pc, [sp], #4
 800547e:	4668      	mov	r0, sp
 8005480:	f000 fa0e 	bl	80058a0 <__ieee754_rem_pio2>
 8005484:	f000 0003 	and.w	r0, r0, #3
 8005488:	2801      	cmp	r0, #1
 800548a:	d00b      	beq.n	80054a4 <cos+0x5c>
 800548c:	2802      	cmp	r0, #2
 800548e:	d015      	beq.n	80054bc <cos+0x74>
 8005490:	b9d8      	cbnz	r0, 80054ca <cos+0x82>
 8005492:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005496:	ed9d 0b00 	vldr	d0, [sp]
 800549a:	f000 f87d 	bl	8005598 <__kernel_cos>
 800549e:	ec51 0b10 	vmov	r0, r1, d0
 80054a2:	e7e7      	b.n	8005474 <cos+0x2c>
 80054a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80054a8:	ed9d 0b00 	vldr	d0, [sp]
 80054ac:	f000 f93c 	bl	8005728 <__kernel_sin>
 80054b0:	ec53 2b10 	vmov	r2, r3, d0
 80054b4:	4610      	mov	r0, r2
 80054b6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80054ba:	e7db      	b.n	8005474 <cos+0x2c>
 80054bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80054c0:	ed9d 0b00 	vldr	d0, [sp]
 80054c4:	f000 f868 	bl	8005598 <__kernel_cos>
 80054c8:	e7f2      	b.n	80054b0 <cos+0x68>
 80054ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80054ce:	ed9d 0b00 	vldr	d0, [sp]
 80054d2:	2001      	movs	r0, #1
 80054d4:	f000 f928 	bl	8005728 <__kernel_sin>
 80054d8:	e7e1      	b.n	800549e <cos+0x56>
 80054da:	bf00      	nop
 80054dc:	f3af 8000 	nop.w
	...
 80054e8:	3fe921fb 	.word	0x3fe921fb
 80054ec:	7fefffff 	.word	0x7fefffff

080054f0 <sin>:
 80054f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054f2:	ec53 2b10 	vmov	r2, r3, d0
 80054f6:	4826      	ldr	r0, [pc, #152]	@ (8005590 <sin+0xa0>)
 80054f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054fc:	4281      	cmp	r1, r0
 80054fe:	d807      	bhi.n	8005510 <sin+0x20>
 8005500:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005588 <sin+0x98>
 8005504:	2000      	movs	r0, #0
 8005506:	b005      	add	sp, #20
 8005508:	f85d eb04 	ldr.w	lr, [sp], #4
 800550c:	f000 b90c 	b.w	8005728 <__kernel_sin>
 8005510:	4820      	ldr	r0, [pc, #128]	@ (8005594 <sin+0xa4>)
 8005512:	4281      	cmp	r1, r0
 8005514:	d908      	bls.n	8005528 <sin+0x38>
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	f7fa fe79 	bl	8000210 <__aeabi_dsub>
 800551e:	ec41 0b10 	vmov	d0, r0, r1
 8005522:	b005      	add	sp, #20
 8005524:	f85d fb04 	ldr.w	pc, [sp], #4
 8005528:	4668      	mov	r0, sp
 800552a:	f000 f9b9 	bl	80058a0 <__ieee754_rem_pio2>
 800552e:	f000 0003 	and.w	r0, r0, #3
 8005532:	2801      	cmp	r0, #1
 8005534:	d00c      	beq.n	8005550 <sin+0x60>
 8005536:	2802      	cmp	r0, #2
 8005538:	d011      	beq.n	800555e <sin+0x6e>
 800553a:	b9e8      	cbnz	r0, 8005578 <sin+0x88>
 800553c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005540:	ed9d 0b00 	vldr	d0, [sp]
 8005544:	2001      	movs	r0, #1
 8005546:	f000 f8ef 	bl	8005728 <__kernel_sin>
 800554a:	ec51 0b10 	vmov	r0, r1, d0
 800554e:	e7e6      	b.n	800551e <sin+0x2e>
 8005550:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005554:	ed9d 0b00 	vldr	d0, [sp]
 8005558:	f000 f81e 	bl	8005598 <__kernel_cos>
 800555c:	e7f5      	b.n	800554a <sin+0x5a>
 800555e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005562:	ed9d 0b00 	vldr	d0, [sp]
 8005566:	2001      	movs	r0, #1
 8005568:	f000 f8de 	bl	8005728 <__kernel_sin>
 800556c:	ec53 2b10 	vmov	r2, r3, d0
 8005570:	4610      	mov	r0, r2
 8005572:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005576:	e7d2      	b.n	800551e <sin+0x2e>
 8005578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800557c:	ed9d 0b00 	vldr	d0, [sp]
 8005580:	f000 f80a 	bl	8005598 <__kernel_cos>
 8005584:	e7f2      	b.n	800556c <sin+0x7c>
 8005586:	bf00      	nop
	...
 8005590:	3fe921fb 	.word	0x3fe921fb
 8005594:	7fefffff 	.word	0x7fefffff

08005598 <__kernel_cos>:
 8005598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	ec57 6b10 	vmov	r6, r7, d0
 80055a0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80055a4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80055a8:	ed8d 1b00 	vstr	d1, [sp]
 80055ac:	d206      	bcs.n	80055bc <__kernel_cos+0x24>
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fb fa7f 	bl	8000ab4 <__aeabi_d2iz>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f000 8088 	beq.w	80056cc <__kernel_cos+0x134>
 80055bc:	4632      	mov	r2, r6
 80055be:	463b      	mov	r3, r7
 80055c0:	4630      	mov	r0, r6
 80055c2:	4639      	mov	r1, r7
 80055c4:	f7fa ffdc 	bl	8000580 <__aeabi_dmul>
 80055c8:	4b51      	ldr	r3, [pc, #324]	@ (8005710 <__kernel_cos+0x178>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	4604      	mov	r4, r0
 80055ce:	460d      	mov	r5, r1
 80055d0:	f7fa ffd6 	bl	8000580 <__aeabi_dmul>
 80055d4:	a340      	add	r3, pc, #256	@ (adr r3, 80056d8 <__kernel_cos+0x140>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	4682      	mov	sl, r0
 80055dc:	468b      	mov	fp, r1
 80055de:	4620      	mov	r0, r4
 80055e0:	4629      	mov	r1, r5
 80055e2:	f7fa ffcd 	bl	8000580 <__aeabi_dmul>
 80055e6:	a33e      	add	r3, pc, #248	@ (adr r3, 80056e0 <__kernel_cos+0x148>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fa fe12 	bl	8000214 <__adddf3>
 80055f0:	4622      	mov	r2, r4
 80055f2:	462b      	mov	r3, r5
 80055f4:	f7fa ffc4 	bl	8000580 <__aeabi_dmul>
 80055f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80056e8 <__kernel_cos+0x150>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fe07 	bl	8000210 <__aeabi_dsub>
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	f7fa ffbb 	bl	8000580 <__aeabi_dmul>
 800560a:	a339      	add	r3, pc, #228	@ (adr r3, 80056f0 <__kernel_cos+0x158>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa fe00 	bl	8000214 <__adddf3>
 8005614:	4622      	mov	r2, r4
 8005616:	462b      	mov	r3, r5
 8005618:	f7fa ffb2 	bl	8000580 <__aeabi_dmul>
 800561c:	a336      	add	r3, pc, #216	@ (adr r3, 80056f8 <__kernel_cos+0x160>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fdf5 	bl	8000210 <__aeabi_dsub>
 8005626:	4622      	mov	r2, r4
 8005628:	462b      	mov	r3, r5
 800562a:	f7fa ffa9 	bl	8000580 <__aeabi_dmul>
 800562e:	a334      	add	r3, pc, #208	@ (adr r3, 8005700 <__kernel_cos+0x168>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f7fa fdee 	bl	8000214 <__adddf3>
 8005638:	4622      	mov	r2, r4
 800563a:	462b      	mov	r3, r5
 800563c:	f7fa ffa0 	bl	8000580 <__aeabi_dmul>
 8005640:	4622      	mov	r2, r4
 8005642:	462b      	mov	r3, r5
 8005644:	f7fa ff9c 	bl	8000580 <__aeabi_dmul>
 8005648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800564c:	4604      	mov	r4, r0
 800564e:	460d      	mov	r5, r1
 8005650:	4630      	mov	r0, r6
 8005652:	4639      	mov	r1, r7
 8005654:	f7fa ff94 	bl	8000580 <__aeabi_dmul>
 8005658:	460b      	mov	r3, r1
 800565a:	4602      	mov	r2, r0
 800565c:	4629      	mov	r1, r5
 800565e:	4620      	mov	r0, r4
 8005660:	f7fa fdd6 	bl	8000210 <__aeabi_dsub>
 8005664:	4b2b      	ldr	r3, [pc, #172]	@ (8005714 <__kernel_cos+0x17c>)
 8005666:	4598      	cmp	r8, r3
 8005668:	4606      	mov	r6, r0
 800566a:	460f      	mov	r7, r1
 800566c:	d810      	bhi.n	8005690 <__kernel_cos+0xf8>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4650      	mov	r0, sl
 8005674:	4659      	mov	r1, fp
 8005676:	f7fa fdcb 	bl	8000210 <__aeabi_dsub>
 800567a:	460b      	mov	r3, r1
 800567c:	4926      	ldr	r1, [pc, #152]	@ (8005718 <__kernel_cos+0x180>)
 800567e:	4602      	mov	r2, r0
 8005680:	2000      	movs	r0, #0
 8005682:	f7fa fdc5 	bl	8000210 <__aeabi_dsub>
 8005686:	ec41 0b10 	vmov	d0, r0, r1
 800568a:	b003      	add	sp, #12
 800568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005690:	4b22      	ldr	r3, [pc, #136]	@ (800571c <__kernel_cos+0x184>)
 8005692:	4921      	ldr	r1, [pc, #132]	@ (8005718 <__kernel_cos+0x180>)
 8005694:	4598      	cmp	r8, r3
 8005696:	bf8c      	ite	hi
 8005698:	4d21      	ldrhi	r5, [pc, #132]	@ (8005720 <__kernel_cos+0x188>)
 800569a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800569e:	2400      	movs	r4, #0
 80056a0:	4622      	mov	r2, r4
 80056a2:	462b      	mov	r3, r5
 80056a4:	2000      	movs	r0, #0
 80056a6:	f7fa fdb3 	bl	8000210 <__aeabi_dsub>
 80056aa:	4622      	mov	r2, r4
 80056ac:	4680      	mov	r8, r0
 80056ae:	4689      	mov	r9, r1
 80056b0:	462b      	mov	r3, r5
 80056b2:	4650      	mov	r0, sl
 80056b4:	4659      	mov	r1, fp
 80056b6:	f7fa fdab 	bl	8000210 <__aeabi_dsub>
 80056ba:	4632      	mov	r2, r6
 80056bc:	463b      	mov	r3, r7
 80056be:	f7fa fda7 	bl	8000210 <__aeabi_dsub>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4640      	mov	r0, r8
 80056c8:	4649      	mov	r1, r9
 80056ca:	e7da      	b.n	8005682 <__kernel_cos+0xea>
 80056cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005708 <__kernel_cos+0x170>
 80056d0:	e7db      	b.n	800568a <__kernel_cos+0xf2>
 80056d2:	bf00      	nop
 80056d4:	f3af 8000 	nop.w
 80056d8:	be8838d4 	.word	0xbe8838d4
 80056dc:	bda8fae9 	.word	0xbda8fae9
 80056e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80056e4:	3e21ee9e 	.word	0x3e21ee9e
 80056e8:	809c52ad 	.word	0x809c52ad
 80056ec:	3e927e4f 	.word	0x3e927e4f
 80056f0:	19cb1590 	.word	0x19cb1590
 80056f4:	3efa01a0 	.word	0x3efa01a0
 80056f8:	16c15177 	.word	0x16c15177
 80056fc:	3f56c16c 	.word	0x3f56c16c
 8005700:	5555554c 	.word	0x5555554c
 8005704:	3fa55555 	.word	0x3fa55555
 8005708:	00000000 	.word	0x00000000
 800570c:	3ff00000 	.word	0x3ff00000
 8005710:	3fe00000 	.word	0x3fe00000
 8005714:	3fd33332 	.word	0x3fd33332
 8005718:	3ff00000 	.word	0x3ff00000
 800571c:	3fe90000 	.word	0x3fe90000
 8005720:	3fd20000 	.word	0x3fd20000
 8005724:	00000000 	.word	0x00000000

08005728 <__kernel_sin>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	ec55 4b10 	vmov	r4, r5, d0
 8005730:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005734:	b085      	sub	sp, #20
 8005736:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800573a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800573e:	4680      	mov	r8, r0
 8005740:	d205      	bcs.n	800574e <__kernel_sin+0x26>
 8005742:	4620      	mov	r0, r4
 8005744:	4629      	mov	r1, r5
 8005746:	f7fb f9b5 	bl	8000ab4 <__aeabi_d2iz>
 800574a:	2800      	cmp	r0, #0
 800574c:	d052      	beq.n	80057f4 <__kernel_sin+0xcc>
 800574e:	4622      	mov	r2, r4
 8005750:	462b      	mov	r3, r5
 8005752:	4620      	mov	r0, r4
 8005754:	4629      	mov	r1, r5
 8005756:	f7fa ff13 	bl	8000580 <__aeabi_dmul>
 800575a:	4682      	mov	sl, r0
 800575c:	468b      	mov	fp, r1
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4620      	mov	r0, r4
 8005764:	4629      	mov	r1, r5
 8005766:	f7fa ff0b 	bl	8000580 <__aeabi_dmul>
 800576a:	a342      	add	r3, pc, #264	@ (adr r3, 8005874 <__kernel_sin+0x14c>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	e9cd 0100 	strd	r0, r1, [sp]
 8005774:	4650      	mov	r0, sl
 8005776:	4659      	mov	r1, fp
 8005778:	f7fa ff02 	bl	8000580 <__aeabi_dmul>
 800577c:	a33f      	add	r3, pc, #252	@ (adr r3, 800587c <__kernel_sin+0x154>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fd45 	bl	8000210 <__aeabi_dsub>
 8005786:	4652      	mov	r2, sl
 8005788:	465b      	mov	r3, fp
 800578a:	f7fa fef9 	bl	8000580 <__aeabi_dmul>
 800578e:	a33d      	add	r3, pc, #244	@ (adr r3, 8005884 <__kernel_sin+0x15c>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fa fd3e 	bl	8000214 <__adddf3>
 8005798:	4652      	mov	r2, sl
 800579a:	465b      	mov	r3, fp
 800579c:	f7fa fef0 	bl	8000580 <__aeabi_dmul>
 80057a0:	a33a      	add	r3, pc, #232	@ (adr r3, 800588c <__kernel_sin+0x164>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa fd33 	bl	8000210 <__aeabi_dsub>
 80057aa:	4652      	mov	r2, sl
 80057ac:	465b      	mov	r3, fp
 80057ae:	f7fa fee7 	bl	8000580 <__aeabi_dmul>
 80057b2:	a338      	add	r3, pc, #224	@ (adr r3, 8005894 <__kernel_sin+0x16c>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fd2c 	bl	8000214 <__adddf3>
 80057bc:	4606      	mov	r6, r0
 80057be:	460f      	mov	r7, r1
 80057c0:	f1b8 0f00 	cmp.w	r8, #0
 80057c4:	d11b      	bne.n	80057fe <__kernel_sin+0xd6>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4650      	mov	r0, sl
 80057cc:	4659      	mov	r1, fp
 80057ce:	f7fa fed7 	bl	8000580 <__aeabi_dmul>
 80057d2:	a325      	add	r3, pc, #148	@ (adr r3, 8005868 <__kernel_sin+0x140>)
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f7fa fd1a 	bl	8000210 <__aeabi_dsub>
 80057dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057e0:	f7fa fece 	bl	8000580 <__aeabi_dmul>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4620      	mov	r0, r4
 80057ea:	4629      	mov	r1, r5
 80057ec:	f7fa fd12 	bl	8000214 <__adddf3>
 80057f0:	4604      	mov	r4, r0
 80057f2:	460d      	mov	r5, r1
 80057f4:	ec45 4b10 	vmov	d0, r4, r5
 80057f8:	b005      	add	sp, #20
 80057fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005802:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <__kernel_sin+0x148>)
 8005804:	2200      	movs	r2, #0
 8005806:	f7fa febb 	bl	8000580 <__aeabi_dmul>
 800580a:	4632      	mov	r2, r6
 800580c:	4680      	mov	r8, r0
 800580e:	4689      	mov	r9, r1
 8005810:	463b      	mov	r3, r7
 8005812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005816:	f7fa feb3 	bl	8000580 <__aeabi_dmul>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4640      	mov	r0, r8
 8005820:	4649      	mov	r1, r9
 8005822:	f7fa fcf5 	bl	8000210 <__aeabi_dsub>
 8005826:	4652      	mov	r2, sl
 8005828:	465b      	mov	r3, fp
 800582a:	f7fa fea9 	bl	8000580 <__aeabi_dmul>
 800582e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005832:	f7fa fced 	bl	8000210 <__aeabi_dsub>
 8005836:	a30c      	add	r3, pc, #48	@ (adr r3, 8005868 <__kernel_sin+0x140>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	4606      	mov	r6, r0
 800583e:	460f      	mov	r7, r1
 8005840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005844:	f7fa fe9c 	bl	8000580 <__aeabi_dmul>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4630      	mov	r0, r6
 800584e:	4639      	mov	r1, r7
 8005850:	f7fa fce0 	bl	8000214 <__adddf3>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4620      	mov	r0, r4
 800585a:	4629      	mov	r1, r5
 800585c:	f7fa fcd8 	bl	8000210 <__aeabi_dsub>
 8005860:	e7c6      	b.n	80057f0 <__kernel_sin+0xc8>
 8005862:	bf00      	nop
 8005864:	f3af 8000 	nop.w
 8005868:	55555549 	.word	0x55555549
 800586c:	3fc55555 	.word	0x3fc55555
 8005870:	3fe00000 	.word	0x3fe00000
 8005874:	5acfd57c 	.word	0x5acfd57c
 8005878:	3de5d93a 	.word	0x3de5d93a
 800587c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005880:	3e5ae5e6 	.word	0x3e5ae5e6
 8005884:	57b1fe7d 	.word	0x57b1fe7d
 8005888:	3ec71de3 	.word	0x3ec71de3
 800588c:	19c161d5 	.word	0x19c161d5
 8005890:	3f2a01a0 	.word	0x3f2a01a0
 8005894:	1110f8a6 	.word	0x1110f8a6
 8005898:	3f811111 	.word	0x3f811111
 800589c:	00000000 	.word	0x00000000

080058a0 <__ieee754_rem_pio2>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	ec57 6b10 	vmov	r6, r7, d0
 80058a8:	4bc5      	ldr	r3, [pc, #788]	@ (8005bc0 <__ieee754_rem_pio2+0x320>)
 80058aa:	b08d      	sub	sp, #52	@ 0x34
 80058ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80058b0:	4598      	cmp	r8, r3
 80058b2:	4604      	mov	r4, r0
 80058b4:	9704      	str	r7, [sp, #16]
 80058b6:	d807      	bhi.n	80058c8 <__ieee754_rem_pio2+0x28>
 80058b8:	2200      	movs	r2, #0
 80058ba:	2300      	movs	r3, #0
 80058bc:	ed80 0b00 	vstr	d0, [r0]
 80058c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80058c4:	2500      	movs	r5, #0
 80058c6:	e028      	b.n	800591a <__ieee754_rem_pio2+0x7a>
 80058c8:	4bbe      	ldr	r3, [pc, #760]	@ (8005bc4 <__ieee754_rem_pio2+0x324>)
 80058ca:	4598      	cmp	r8, r3
 80058cc:	d878      	bhi.n	80059c0 <__ieee754_rem_pio2+0x120>
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	4dbd      	ldr	r5, [pc, #756]	@ (8005bc8 <__ieee754_rem_pio2+0x328>)
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	4630      	mov	r0, r6
 80058d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005b88 <__ieee754_rem_pio2+0x2e8>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	4639      	mov	r1, r7
 80058de:	dd38      	ble.n	8005952 <__ieee754_rem_pio2+0xb2>
 80058e0:	f7fa fc96 	bl	8000210 <__aeabi_dsub>
 80058e4:	45a8      	cmp	r8, r5
 80058e6:	4606      	mov	r6, r0
 80058e8:	460f      	mov	r7, r1
 80058ea:	d01a      	beq.n	8005922 <__ieee754_rem_pio2+0x82>
 80058ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005b90 <__ieee754_rem_pio2+0x2f0>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f7fa fc8d 	bl	8000210 <__aeabi_dsub>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4680      	mov	r8, r0
 80058fc:	4689      	mov	r9, r1
 80058fe:	4630      	mov	r0, r6
 8005900:	4639      	mov	r1, r7
 8005902:	f7fa fc85 	bl	8000210 <__aeabi_dsub>
 8005906:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005b90 <__ieee754_rem_pio2+0x2f0>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fc80 	bl	8000210 <__aeabi_dsub>
 8005910:	e9c4 8900 	strd	r8, r9, [r4]
 8005914:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005918:	2501      	movs	r5, #1
 800591a:	4628      	mov	r0, r5
 800591c:	b00d      	add	sp, #52	@ 0x34
 800591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005922:	a39d      	add	r3, pc, #628	@ (adr r3, 8005b98 <__ieee754_rem_pio2+0x2f8>)
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f7fa fc72 	bl	8000210 <__aeabi_dsub>
 800592c:	a39c      	add	r3, pc, #624	@ (adr r3, 8005ba0 <__ieee754_rem_pio2+0x300>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	4606      	mov	r6, r0
 8005934:	460f      	mov	r7, r1
 8005936:	f7fa fc6b 	bl	8000210 <__aeabi_dsub>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4680      	mov	r8, r0
 8005940:	4689      	mov	r9, r1
 8005942:	4630      	mov	r0, r6
 8005944:	4639      	mov	r1, r7
 8005946:	f7fa fc63 	bl	8000210 <__aeabi_dsub>
 800594a:	a395      	add	r3, pc, #596	@ (adr r3, 8005ba0 <__ieee754_rem_pio2+0x300>)
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	e7dc      	b.n	800590c <__ieee754_rem_pio2+0x6c>
 8005952:	f7fa fc5f 	bl	8000214 <__adddf3>
 8005956:	45a8      	cmp	r8, r5
 8005958:	4606      	mov	r6, r0
 800595a:	460f      	mov	r7, r1
 800595c:	d018      	beq.n	8005990 <__ieee754_rem_pio2+0xf0>
 800595e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005b90 <__ieee754_rem_pio2+0x2f0>)
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f7fa fc56 	bl	8000214 <__adddf3>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4680      	mov	r8, r0
 800596e:	4689      	mov	r9, r1
 8005970:	4630      	mov	r0, r6
 8005972:	4639      	mov	r1, r7
 8005974:	f7fa fc4c 	bl	8000210 <__aeabi_dsub>
 8005978:	a385      	add	r3, pc, #532	@ (adr r3, 8005b90 <__ieee754_rem_pio2+0x2f0>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa fc49 	bl	8000214 <__adddf3>
 8005982:	f04f 35ff 	mov.w	r5, #4294967295
 8005986:	e9c4 8900 	strd	r8, r9, [r4]
 800598a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800598e:	e7c4      	b.n	800591a <__ieee754_rem_pio2+0x7a>
 8005990:	a381      	add	r3, pc, #516	@ (adr r3, 8005b98 <__ieee754_rem_pio2+0x2f8>)
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fc3d 	bl	8000214 <__adddf3>
 800599a:	a381      	add	r3, pc, #516	@ (adr r3, 8005ba0 <__ieee754_rem_pio2+0x300>)
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	4606      	mov	r6, r0
 80059a2:	460f      	mov	r7, r1
 80059a4:	f7fa fc36 	bl	8000214 <__adddf3>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4680      	mov	r8, r0
 80059ae:	4689      	mov	r9, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fa fc2c 	bl	8000210 <__aeabi_dsub>
 80059b8:	a379      	add	r3, pc, #484	@ (adr r3, 8005ba0 <__ieee754_rem_pio2+0x300>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	e7de      	b.n	800597e <__ieee754_rem_pio2+0xde>
 80059c0:	4b82      	ldr	r3, [pc, #520]	@ (8005bcc <__ieee754_rem_pio2+0x32c>)
 80059c2:	4598      	cmp	r8, r3
 80059c4:	f200 80d1 	bhi.w	8005b6a <__ieee754_rem_pio2+0x2ca>
 80059c8:	f000 f966 	bl	8005c98 <fabs>
 80059cc:	ec57 6b10 	vmov	r6, r7, d0
 80059d0:	a375      	add	r3, pc, #468	@ (adr r3, 8005ba8 <__ieee754_rem_pio2+0x308>)
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	4630      	mov	r0, r6
 80059d8:	4639      	mov	r1, r7
 80059da:	f7fa fdd1 	bl	8000580 <__aeabi_dmul>
 80059de:	4b7c      	ldr	r3, [pc, #496]	@ (8005bd0 <__ieee754_rem_pio2+0x330>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	f7fa fc17 	bl	8000214 <__adddf3>
 80059e6:	f7fb f865 	bl	8000ab4 <__aeabi_d2iz>
 80059ea:	4605      	mov	r5, r0
 80059ec:	f7fa fd5e 	bl	80004ac <__aeabi_i2d>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059f8:	a363      	add	r3, pc, #396	@ (adr r3, 8005b88 <__ieee754_rem_pio2+0x2e8>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fdbf 	bl	8000580 <__aeabi_dmul>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4630      	mov	r0, r6
 8005a08:	4639      	mov	r1, r7
 8005a0a:	f7fa fc01 	bl	8000210 <__aeabi_dsub>
 8005a0e:	a360      	add	r3, pc, #384	@ (adr r3, 8005b90 <__ieee754_rem_pio2+0x2f0>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	4682      	mov	sl, r0
 8005a16:	468b      	mov	fp, r1
 8005a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a1c:	f7fa fdb0 	bl	8000580 <__aeabi_dmul>
 8005a20:	2d1f      	cmp	r5, #31
 8005a22:	4606      	mov	r6, r0
 8005a24:	460f      	mov	r7, r1
 8005a26:	dc0c      	bgt.n	8005a42 <__ieee754_rem_pio2+0x1a2>
 8005a28:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd4 <__ieee754_rem_pio2+0x334>)
 8005a2a:	1e6a      	subs	r2, r5, #1
 8005a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a30:	4543      	cmp	r3, r8
 8005a32:	d006      	beq.n	8005a42 <__ieee754_rem_pio2+0x1a2>
 8005a34:	4632      	mov	r2, r6
 8005a36:	463b      	mov	r3, r7
 8005a38:	4650      	mov	r0, sl
 8005a3a:	4659      	mov	r1, fp
 8005a3c:	f7fa fbe8 	bl	8000210 <__aeabi_dsub>
 8005a40:	e00e      	b.n	8005a60 <__ieee754_rem_pio2+0x1c0>
 8005a42:	463b      	mov	r3, r7
 8005a44:	4632      	mov	r2, r6
 8005a46:	4650      	mov	r0, sl
 8005a48:	4659      	mov	r1, fp
 8005a4a:	f7fa fbe1 	bl	8000210 <__aeabi_dsub>
 8005a4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005a52:	9305      	str	r3, [sp, #20]
 8005a54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a58:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	dc02      	bgt.n	8005a66 <__ieee754_rem_pio2+0x1c6>
 8005a60:	e9c4 0100 	strd	r0, r1, [r4]
 8005a64:	e039      	b.n	8005ada <__ieee754_rem_pio2+0x23a>
 8005a66:	a34c      	add	r3, pc, #304	@ (adr r3, 8005b98 <__ieee754_rem_pio2+0x2f8>)
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a70:	f7fa fd86 	bl	8000580 <__aeabi_dmul>
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4650      	mov	r0, sl
 8005a7e:	4659      	mov	r1, fp
 8005a80:	f7fa fbc6 	bl	8000210 <__aeabi_dsub>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	4659      	mov	r1, fp
 8005a90:	f7fa fbbe 	bl	8000210 <__aeabi_dsub>
 8005a94:	4632      	mov	r2, r6
 8005a96:	463b      	mov	r3, r7
 8005a98:	f7fa fbba 	bl	8000210 <__aeabi_dsub>
 8005a9c:	a340      	add	r3, pc, #256	@ (adr r3, 8005ba0 <__ieee754_rem_pio2+0x300>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aaa:	f7fa fd69 	bl	8000580 <__aeabi_dmul>
 8005aae:	4632      	mov	r2, r6
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	f7fa fbad 	bl	8000210 <__aeabi_dsub>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4606      	mov	r6, r0
 8005abc:	460f      	mov	r7, r1
 8005abe:	4640      	mov	r0, r8
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	f7fa fba5 	bl	8000210 <__aeabi_dsub>
 8005ac6:	9a05      	ldr	r2, [sp, #20]
 8005ac8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b31      	cmp	r3, #49	@ 0x31
 8005ad0:	dc20      	bgt.n	8005b14 <__ieee754_rem_pio2+0x274>
 8005ad2:	e9c4 0100 	strd	r0, r1, [r4]
 8005ad6:	46c2      	mov	sl, r8
 8005ad8:	46cb      	mov	fp, r9
 8005ada:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005ade:	4650      	mov	r0, sl
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	f7fa fb93 	bl	8000210 <__aeabi_dsub>
 8005aea:	463b      	mov	r3, r7
 8005aec:	4632      	mov	r2, r6
 8005aee:	f7fa fb8f 	bl	8000210 <__aeabi_dsub>
 8005af2:	9b04      	ldr	r3, [sp, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005afa:	f6bf af0e 	bge.w	800591a <__ieee754_rem_pio2+0x7a>
 8005afe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005b02:	6063      	str	r3, [r4, #4]
 8005b04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b08:	f8c4 8000 	str.w	r8, [r4]
 8005b0c:	60a0      	str	r0, [r4, #8]
 8005b0e:	60e3      	str	r3, [r4, #12]
 8005b10:	426d      	negs	r5, r5
 8005b12:	e702      	b.n	800591a <__ieee754_rem_pio2+0x7a>
 8005b14:	a326      	add	r3, pc, #152	@ (adr r3, 8005bb0 <__ieee754_rem_pio2+0x310>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b1e:	f7fa fd2f 	bl	8000580 <__aeabi_dmul>
 8005b22:	4606      	mov	r6, r0
 8005b24:	460f      	mov	r7, r1
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	f7fa fb6f 	bl	8000210 <__aeabi_dsub>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4682      	mov	sl, r0
 8005b38:	468b      	mov	fp, r1
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	f7fa fb67 	bl	8000210 <__aeabi_dsub>
 8005b42:	4632      	mov	r2, r6
 8005b44:	463b      	mov	r3, r7
 8005b46:	f7fa fb63 	bl	8000210 <__aeabi_dsub>
 8005b4a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005bb8 <__ieee754_rem_pio2+0x318>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	4606      	mov	r6, r0
 8005b52:	460f      	mov	r7, r1
 8005b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b58:	f7fa fd12 	bl	8000580 <__aeabi_dmul>
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	463b      	mov	r3, r7
 8005b60:	f7fa fb56 	bl	8000210 <__aeabi_dsub>
 8005b64:	4606      	mov	r6, r0
 8005b66:	460f      	mov	r7, r1
 8005b68:	e764      	b.n	8005a34 <__ieee754_rem_pio2+0x194>
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd8 <__ieee754_rem_pio2+0x338>)
 8005b6c:	4598      	cmp	r8, r3
 8005b6e:	d935      	bls.n	8005bdc <__ieee754_rem_pio2+0x33c>
 8005b70:	4632      	mov	r2, r6
 8005b72:	463b      	mov	r3, r7
 8005b74:	4630      	mov	r0, r6
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa fb4a 	bl	8000210 <__aeabi_dsub>
 8005b7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b80:	e9c4 0100 	strd	r0, r1, [r4]
 8005b84:	e69e      	b.n	80058c4 <__ieee754_rem_pio2+0x24>
 8005b86:	bf00      	nop
 8005b88:	54400000 	.word	0x54400000
 8005b8c:	3ff921fb 	.word	0x3ff921fb
 8005b90:	1a626331 	.word	0x1a626331
 8005b94:	3dd0b461 	.word	0x3dd0b461
 8005b98:	1a600000 	.word	0x1a600000
 8005b9c:	3dd0b461 	.word	0x3dd0b461
 8005ba0:	2e037073 	.word	0x2e037073
 8005ba4:	3ba3198a 	.word	0x3ba3198a
 8005ba8:	6dc9c883 	.word	0x6dc9c883
 8005bac:	3fe45f30 	.word	0x3fe45f30
 8005bb0:	2e000000 	.word	0x2e000000
 8005bb4:	3ba3198a 	.word	0x3ba3198a
 8005bb8:	252049c1 	.word	0x252049c1
 8005bbc:	397b839a 	.word	0x397b839a
 8005bc0:	3fe921fb 	.word	0x3fe921fb
 8005bc4:	4002d97b 	.word	0x4002d97b
 8005bc8:	3ff921fb 	.word	0x3ff921fb
 8005bcc:	413921fb 	.word	0x413921fb
 8005bd0:	3fe00000 	.word	0x3fe00000
 8005bd4:	08006588 	.word	0x08006588
 8005bd8:	7fefffff 	.word	0x7fefffff
 8005bdc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005be0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005be4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005be8:	4630      	mov	r0, r6
 8005bea:	460f      	mov	r7, r1
 8005bec:	f7fa ff62 	bl	8000ab4 <__aeabi_d2iz>
 8005bf0:	f7fa fc5c 	bl	80004ac <__aeabi_i2d>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c00:	f7fa fb06 	bl	8000210 <__aeabi_dsub>
 8005c04:	4b22      	ldr	r3, [pc, #136]	@ (8005c90 <__ieee754_rem_pio2+0x3f0>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	f7fa fcba 	bl	8000580 <__aeabi_dmul>
 8005c0c:	460f      	mov	r7, r1
 8005c0e:	4606      	mov	r6, r0
 8005c10:	f7fa ff50 	bl	8000ab4 <__aeabi_d2iz>
 8005c14:	f7fa fc4a 	bl	80004ac <__aeabi_i2d>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	4639      	mov	r1, r7
 8005c20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c24:	f7fa faf4 	bl	8000210 <__aeabi_dsub>
 8005c28:	4b19      	ldr	r3, [pc, #100]	@ (8005c90 <__ieee754_rem_pio2+0x3f0>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f7fa fca8 	bl	8000580 <__aeabi_dmul>
 8005c30:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005c34:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005c38:	f04f 0803 	mov.w	r8, #3
 8005c3c:	2600      	movs	r6, #0
 8005c3e:	2700      	movs	r7, #0
 8005c40:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	46c2      	mov	sl, r8
 8005c4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c4e:	f7fa feff 	bl	8000a50 <__aeabi_dcmpeq>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1f4      	bne.n	8005c40 <__ieee754_rem_pio2+0x3a0>
 8005c56:	4b0f      	ldr	r3, [pc, #60]	@ (8005c94 <__ieee754_rem_pio2+0x3f4>)
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	462a      	mov	r2, r5
 8005c60:	4653      	mov	r3, sl
 8005c62:	4621      	mov	r1, r4
 8005c64:	a806      	add	r0, sp, #24
 8005c66:	f000 f81f 	bl	8005ca8 <__kernel_rem_pio2>
 8005c6a:	9b04      	ldr	r3, [sp, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	4605      	mov	r5, r0
 8005c70:	f6bf ae53 	bge.w	800591a <__ieee754_rem_pio2+0x7a>
 8005c74:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005c78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c7c:	e9c4 2300 	strd	r2, r3, [r4]
 8005c80:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005c84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005c8c:	e740      	b.n	8005b10 <__ieee754_rem_pio2+0x270>
 8005c8e:	bf00      	nop
 8005c90:	41700000 	.word	0x41700000
 8005c94:	08006608 	.word	0x08006608

08005c98 <fabs>:
 8005c98:	ec51 0b10 	vmov	r0, r1, d0
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005ca2:	ec43 2b10 	vmov	d0, r2, r3
 8005ca6:	4770      	bx	lr

08005ca8 <__kernel_rem_pio2>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	ed2d 8b02 	vpush	{d8}
 8005cb0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005cb4:	f112 0f14 	cmn.w	r2, #20
 8005cb8:	9306      	str	r3, [sp, #24]
 8005cba:	9104      	str	r1, [sp, #16]
 8005cbc:	4bbe      	ldr	r3, [pc, #760]	@ (8005fb8 <__kernel_rem_pio2+0x310>)
 8005cbe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005cc0:	9008      	str	r0, [sp, #32]
 8005cc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	9b06      	ldr	r3, [sp, #24]
 8005cca:	f103 33ff 	add.w	r3, r3, #4294967295
 8005cce:	bfa8      	it	ge
 8005cd0:	1ed4      	subge	r4, r2, #3
 8005cd2:	9305      	str	r3, [sp, #20]
 8005cd4:	bfb2      	itee	lt
 8005cd6:	2400      	movlt	r4, #0
 8005cd8:	2318      	movge	r3, #24
 8005cda:	fb94 f4f3 	sdivge	r4, r4, r3
 8005cde:	f06f 0317 	mvn.w	r3, #23
 8005ce2:	fb04 3303 	mla	r3, r4, r3, r3
 8005ce6:	eb03 0b02 	add.w	fp, r3, r2
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	9a05      	ldr	r2, [sp, #20]
 8005cee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005fa8 <__kernel_rem_pio2+0x300>
 8005cf2:	eb03 0802 	add.w	r8, r3, r2
 8005cf6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005cf8:	1aa7      	subs	r7, r4, r2
 8005cfa:	ae20      	add	r6, sp, #128	@ 0x80
 8005cfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005d00:	2500      	movs	r5, #0
 8005d02:	4545      	cmp	r5, r8
 8005d04:	dd13      	ble.n	8005d2e <__kernel_rem_pio2+0x86>
 8005d06:	9b06      	ldr	r3, [sp, #24]
 8005d08:	aa20      	add	r2, sp, #128	@ 0x80
 8005d0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005d0e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005d12:	f04f 0800 	mov.w	r8, #0
 8005d16:	9b00      	ldr	r3, [sp, #0]
 8005d18:	4598      	cmp	r8, r3
 8005d1a:	dc31      	bgt.n	8005d80 <__kernel_rem_pio2+0xd8>
 8005d1c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005fa8 <__kernel_rem_pio2+0x300>
 8005d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d28:	462f      	mov	r7, r5
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	e01b      	b.n	8005d66 <__kernel_rem_pio2+0xbe>
 8005d2e:	42ef      	cmn	r7, r5
 8005d30:	d407      	bmi.n	8005d42 <__kernel_rem_pio2+0x9a>
 8005d32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005d36:	f7fa fbb9 	bl	80004ac <__aeabi_i2d>
 8005d3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005d3e:	3501      	adds	r5, #1
 8005d40:	e7df      	b.n	8005d02 <__kernel_rem_pio2+0x5a>
 8005d42:	ec51 0b18 	vmov	r0, r1, d8
 8005d46:	e7f8      	b.n	8005d3a <__kernel_rem_pio2+0x92>
 8005d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005d50:	f7fa fc16 	bl	8000580 <__aeabi_dmul>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d5c:	f7fa fa5a 	bl	8000214 <__adddf3>
 8005d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d64:	3601      	adds	r6, #1
 8005d66:	9b05      	ldr	r3, [sp, #20]
 8005d68:	429e      	cmp	r6, r3
 8005d6a:	f1a7 0708 	sub.w	r7, r7, #8
 8005d6e:	ddeb      	ble.n	8005d48 <__kernel_rem_pio2+0xa0>
 8005d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d74:	f108 0801 	add.w	r8, r8, #1
 8005d78:	ecaa 7b02 	vstmia	sl!, {d7}
 8005d7c:	3508      	adds	r5, #8
 8005d7e:	e7ca      	b.n	8005d16 <__kernel_rem_pio2+0x6e>
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	f8dd 8000 	ldr.w	r8, [sp]
 8005d86:	aa0c      	add	r2, sp, #48	@ 0x30
 8005d88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005d90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d96:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005d9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d9c:	ab98      	add	r3, sp, #608	@ 0x260
 8005d9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005da2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005da6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005daa:	ac0c      	add	r4, sp, #48	@ 0x30
 8005dac:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005dae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005db2:	46a1      	mov	r9, r4
 8005db4:	46c2      	mov	sl, r8
 8005db6:	f1ba 0f00 	cmp.w	sl, #0
 8005dba:	f1a5 0508 	sub.w	r5, r5, #8
 8005dbe:	dc77      	bgt.n	8005eb0 <__kernel_rem_pio2+0x208>
 8005dc0:	4658      	mov	r0, fp
 8005dc2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005dc6:	f000 fac7 	bl	8006358 <scalbn>
 8005dca:	ec57 6b10 	vmov	r6, r7, d0
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa fbd2 	bl	8000580 <__aeabi_dmul>
 8005ddc:	ec41 0b10 	vmov	d0, r0, r1
 8005de0:	f000 fb3a 	bl	8006458 <floor>
 8005de4:	4b75      	ldr	r3, [pc, #468]	@ (8005fbc <__kernel_rem_pio2+0x314>)
 8005de6:	ec51 0b10 	vmov	r0, r1, d0
 8005dea:	2200      	movs	r2, #0
 8005dec:	f7fa fbc8 	bl	8000580 <__aeabi_dmul>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4630      	mov	r0, r6
 8005df6:	4639      	mov	r1, r7
 8005df8:	f7fa fa0a 	bl	8000210 <__aeabi_dsub>
 8005dfc:	460f      	mov	r7, r1
 8005dfe:	4606      	mov	r6, r0
 8005e00:	f7fa fe58 	bl	8000ab4 <__aeabi_d2iz>
 8005e04:	9002      	str	r0, [sp, #8]
 8005e06:	f7fa fb51 	bl	80004ac <__aeabi_i2d>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7fa f9fd 	bl	8000210 <__aeabi_dsub>
 8005e16:	f1bb 0f00 	cmp.w	fp, #0
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	460f      	mov	r7, r1
 8005e1e:	dd6c      	ble.n	8005efa <__kernel_rem_pio2+0x252>
 8005e20:	f108 31ff 	add.w	r1, r8, #4294967295
 8005e24:	ab0c      	add	r3, sp, #48	@ 0x30
 8005e26:	9d02      	ldr	r5, [sp, #8]
 8005e28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e2c:	f1cb 0018 	rsb	r0, fp, #24
 8005e30:	fa43 f200 	asr.w	r2, r3, r0
 8005e34:	4415      	add	r5, r2
 8005e36:	4082      	lsls	r2, r0
 8005e38:	1a9b      	subs	r3, r3, r2
 8005e3a:	aa0c      	add	r2, sp, #48	@ 0x30
 8005e3c:	9502      	str	r5, [sp, #8]
 8005e3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005e42:	f1cb 0217 	rsb	r2, fp, #23
 8005e46:	fa43 f902 	asr.w	r9, r3, r2
 8005e4a:	f1b9 0f00 	cmp.w	r9, #0
 8005e4e:	dd64      	ble.n	8005f1a <__kernel_rem_pio2+0x272>
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	3301      	adds	r3, #1
 8005e56:	9302      	str	r3, [sp, #8]
 8005e58:	4615      	mov	r5, r2
 8005e5a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005e5e:	4590      	cmp	r8, r2
 8005e60:	f300 80b8 	bgt.w	8005fd4 <__kernel_rem_pio2+0x32c>
 8005e64:	f1bb 0f00 	cmp.w	fp, #0
 8005e68:	dd07      	ble.n	8005e7a <__kernel_rem_pio2+0x1d2>
 8005e6a:	f1bb 0f01 	cmp.w	fp, #1
 8005e6e:	f000 80bf 	beq.w	8005ff0 <__kernel_rem_pio2+0x348>
 8005e72:	f1bb 0f02 	cmp.w	fp, #2
 8005e76:	f000 80c6 	beq.w	8006006 <__kernel_rem_pio2+0x35e>
 8005e7a:	f1b9 0f02 	cmp.w	r9, #2
 8005e7e:	d14c      	bne.n	8005f1a <__kernel_rem_pio2+0x272>
 8005e80:	4632      	mov	r2, r6
 8005e82:	463b      	mov	r3, r7
 8005e84:	494e      	ldr	r1, [pc, #312]	@ (8005fc0 <__kernel_rem_pio2+0x318>)
 8005e86:	2000      	movs	r0, #0
 8005e88:	f7fa f9c2 	bl	8000210 <__aeabi_dsub>
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	d042      	beq.n	8005f1a <__kernel_rem_pio2+0x272>
 8005e94:	4658      	mov	r0, fp
 8005e96:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005fb0 <__kernel_rem_pio2+0x308>
 8005e9a:	f000 fa5d 	bl	8006358 <scalbn>
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	ec53 2b10 	vmov	r2, r3, d0
 8005ea6:	f7fa f9b3 	bl	8000210 <__aeabi_dsub>
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460f      	mov	r7, r1
 8005eae:	e034      	b.n	8005f1a <__kernel_rem_pio2+0x272>
 8005eb0:	4b44      	ldr	r3, [pc, #272]	@ (8005fc4 <__kernel_rem_pio2+0x31c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb8:	f7fa fb62 	bl	8000580 <__aeabi_dmul>
 8005ebc:	f7fa fdfa 	bl	8000ab4 <__aeabi_d2iz>
 8005ec0:	f7fa faf4 	bl	80004ac <__aeabi_i2d>
 8005ec4:	4b40      	ldr	r3, [pc, #256]	@ (8005fc8 <__kernel_rem_pio2+0x320>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4606      	mov	r6, r0
 8005eca:	460f      	mov	r7, r1
 8005ecc:	f7fa fb58 	bl	8000580 <__aeabi_dmul>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ed8:	f7fa f99a 	bl	8000210 <__aeabi_dsub>
 8005edc:	f7fa fdea 	bl	8000ab4 <__aeabi_d2iz>
 8005ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ee4:	f849 0b04 	str.w	r0, [r9], #4
 8005ee8:	4639      	mov	r1, r7
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7fa f992 	bl	8000214 <__adddf3>
 8005ef0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef8:	e75d      	b.n	8005db6 <__kernel_rem_pio2+0x10e>
 8005efa:	d107      	bne.n	8005f0c <__kernel_rem_pio2+0x264>
 8005efc:	f108 33ff 	add.w	r3, r8, #4294967295
 8005f00:	aa0c      	add	r2, sp, #48	@ 0x30
 8005f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f06:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005f0a:	e79e      	b.n	8005e4a <__kernel_rem_pio2+0x1a2>
 8005f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8005fcc <__kernel_rem_pio2+0x324>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f7fa fdbc 	bl	8000a8c <__aeabi_dcmpge>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d143      	bne.n	8005fa0 <__kernel_rem_pio2+0x2f8>
 8005f18:	4681      	mov	r9, r0
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa fd95 	bl	8000a50 <__aeabi_dcmpeq>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	f000 80bf 	beq.w	80060aa <__kernel_rem_pio2+0x402>
 8005f2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005f30:	2200      	movs	r2, #0
 8005f32:	9900      	ldr	r1, [sp, #0]
 8005f34:	428b      	cmp	r3, r1
 8005f36:	da6e      	bge.n	8006016 <__kernel_rem_pio2+0x36e>
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	f000 8089 	beq.w	8006050 <__kernel_rem_pio2+0x3a8>
 8005f3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f42:	ab0c      	add	r3, sp, #48	@ 0x30
 8005f44:	f1ab 0b18 	sub.w	fp, fp, #24
 8005f48:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f6      	beq.n	8005f3e <__kernel_rem_pio2+0x296>
 8005f50:	4658      	mov	r0, fp
 8005f52:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005fb0 <__kernel_rem_pio2+0x308>
 8005f56:	f000 f9ff 	bl	8006358 <scalbn>
 8005f5a:	f108 0301 	add.w	r3, r8, #1
 8005f5e:	00da      	lsls	r2, r3, #3
 8005f60:	9205      	str	r2, [sp, #20]
 8005f62:	ec55 4b10 	vmov	r4, r5, d0
 8005f66:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005f68:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005fc4 <__kernel_rem_pio2+0x31c>
 8005f6c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005f70:	4646      	mov	r6, r8
 8005f72:	f04f 0a00 	mov.w	sl, #0
 8005f76:	2e00      	cmp	r6, #0
 8005f78:	f280 80cf 	bge.w	800611a <__kernel_rem_pio2+0x472>
 8005f7c:	4644      	mov	r4, r8
 8005f7e:	2c00      	cmp	r4, #0
 8005f80:	f2c0 80fd 	blt.w	800617e <__kernel_rem_pio2+0x4d6>
 8005f84:	4b12      	ldr	r3, [pc, #72]	@ (8005fd0 <__kernel_rem_pio2+0x328>)
 8005f86:	461f      	mov	r7, r3
 8005f88:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f8e:	9306      	str	r3, [sp, #24]
 8005f90:	f04f 0a00 	mov.w	sl, #0
 8005f94:	f04f 0b00 	mov.w	fp, #0
 8005f98:	2600      	movs	r6, #0
 8005f9a:	eba8 0504 	sub.w	r5, r8, r4
 8005f9e:	e0e2      	b.n	8006166 <__kernel_rem_pio2+0x4be>
 8005fa0:	f04f 0902 	mov.w	r9, #2
 8005fa4:	e754      	b.n	8005e50 <__kernel_rem_pio2+0x1a8>
 8005fa6:	bf00      	nop
	...
 8005fb4:	3ff00000 	.word	0x3ff00000
 8005fb8:	08006750 	.word	0x08006750
 8005fbc:	40200000 	.word	0x40200000
 8005fc0:	3ff00000 	.word	0x3ff00000
 8005fc4:	3e700000 	.word	0x3e700000
 8005fc8:	41700000 	.word	0x41700000
 8005fcc:	3fe00000 	.word	0x3fe00000
 8005fd0:	08006710 	.word	0x08006710
 8005fd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8005fd8:	b945      	cbnz	r5, 8005fec <__kernel_rem_pio2+0x344>
 8005fda:	b123      	cbz	r3, 8005fe6 <__kernel_rem_pio2+0x33e>
 8005fdc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005fe0:	f844 3c04 	str.w	r3, [r4, #-4]
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	3201      	adds	r2, #1
 8005fe8:	461d      	mov	r5, r3
 8005fea:	e738      	b.n	8005e5e <__kernel_rem_pio2+0x1b6>
 8005fec:	1acb      	subs	r3, r1, r3
 8005fee:	e7f7      	b.n	8005fe0 <__kernel_rem_pio2+0x338>
 8005ff0:	f108 32ff 	add.w	r2, r8, #4294967295
 8005ff4:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005ffe:	a90c      	add	r1, sp, #48	@ 0x30
 8006000:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006004:	e739      	b.n	8005e7a <__kernel_rem_pio2+0x1d2>
 8006006:	f108 32ff 	add.w	r2, r8, #4294967295
 800600a:	ab0c      	add	r3, sp, #48	@ 0x30
 800600c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006010:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006014:	e7f3      	b.n	8005ffe <__kernel_rem_pio2+0x356>
 8006016:	a90c      	add	r1, sp, #48	@ 0x30
 8006018:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800601c:	3b01      	subs	r3, #1
 800601e:	430a      	orrs	r2, r1
 8006020:	e787      	b.n	8005f32 <__kernel_rem_pio2+0x28a>
 8006022:	3401      	adds	r4, #1
 8006024:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006028:	2a00      	cmp	r2, #0
 800602a:	d0fa      	beq.n	8006022 <__kernel_rem_pio2+0x37a>
 800602c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800602e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006032:	eb0d 0503 	add.w	r5, sp, r3
 8006036:	9b06      	ldr	r3, [sp, #24]
 8006038:	aa20      	add	r2, sp, #128	@ 0x80
 800603a:	4443      	add	r3, r8
 800603c:	f108 0701 	add.w	r7, r8, #1
 8006040:	3d98      	subs	r5, #152	@ 0x98
 8006042:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006046:	4444      	add	r4, r8
 8006048:	42bc      	cmp	r4, r7
 800604a:	da04      	bge.n	8006056 <__kernel_rem_pio2+0x3ae>
 800604c:	46a0      	mov	r8, r4
 800604e:	e6a2      	b.n	8005d96 <__kernel_rem_pio2+0xee>
 8006050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006052:	2401      	movs	r4, #1
 8006054:	e7e6      	b.n	8006024 <__kernel_rem_pio2+0x37c>
 8006056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006058:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800605c:	f7fa fa26 	bl	80004ac <__aeabi_i2d>
 8006060:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006328 <__kernel_rem_pio2+0x680>
 8006064:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006068:	ed8d 7b02 	vstr	d7, [sp, #8]
 800606c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006070:	46b2      	mov	sl, r6
 8006072:	f04f 0800 	mov.w	r8, #0
 8006076:	9b05      	ldr	r3, [sp, #20]
 8006078:	4598      	cmp	r8, r3
 800607a:	dd05      	ble.n	8006088 <__kernel_rem_pio2+0x3e0>
 800607c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006080:	3701      	adds	r7, #1
 8006082:	eca5 7b02 	vstmia	r5!, {d7}
 8006086:	e7df      	b.n	8006048 <__kernel_rem_pio2+0x3a0>
 8006088:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800608c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006090:	f7fa fa76 	bl	8000580 <__aeabi_dmul>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800609c:	f7fa f8ba 	bl	8000214 <__adddf3>
 80060a0:	f108 0801 	add.w	r8, r8, #1
 80060a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a8:	e7e5      	b.n	8006076 <__kernel_rem_pio2+0x3ce>
 80060aa:	f1cb 0000 	rsb	r0, fp, #0
 80060ae:	ec47 6b10 	vmov	d0, r6, r7
 80060b2:	f000 f951 	bl	8006358 <scalbn>
 80060b6:	ec55 4b10 	vmov	r4, r5, d0
 80060ba:	4b9d      	ldr	r3, [pc, #628]	@ (8006330 <__kernel_rem_pio2+0x688>)
 80060bc:	2200      	movs	r2, #0
 80060be:	4620      	mov	r0, r4
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7fa fce3 	bl	8000a8c <__aeabi_dcmpge>
 80060c6:	b300      	cbz	r0, 800610a <__kernel_rem_pio2+0x462>
 80060c8:	4b9a      	ldr	r3, [pc, #616]	@ (8006334 <__kernel_rem_pio2+0x68c>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	4620      	mov	r0, r4
 80060ce:	4629      	mov	r1, r5
 80060d0:	f7fa fa56 	bl	8000580 <__aeabi_dmul>
 80060d4:	f7fa fcee 	bl	8000ab4 <__aeabi_d2iz>
 80060d8:	4606      	mov	r6, r0
 80060da:	f7fa f9e7 	bl	80004ac <__aeabi_i2d>
 80060de:	4b94      	ldr	r3, [pc, #592]	@ (8006330 <__kernel_rem_pio2+0x688>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	f7fa fa4d 	bl	8000580 <__aeabi_dmul>
 80060e6:	460b      	mov	r3, r1
 80060e8:	4602      	mov	r2, r0
 80060ea:	4629      	mov	r1, r5
 80060ec:	4620      	mov	r0, r4
 80060ee:	f7fa f88f 	bl	8000210 <__aeabi_dsub>
 80060f2:	f7fa fcdf 	bl	8000ab4 <__aeabi_d2iz>
 80060f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80060f8:	f10b 0b18 	add.w	fp, fp, #24
 80060fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006100:	f108 0801 	add.w	r8, r8, #1
 8006104:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006108:	e722      	b.n	8005f50 <__kernel_rem_pio2+0x2a8>
 800610a:	4620      	mov	r0, r4
 800610c:	4629      	mov	r1, r5
 800610e:	f7fa fcd1 	bl	8000ab4 <__aeabi_d2iz>
 8006112:	ab0c      	add	r3, sp, #48	@ 0x30
 8006114:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006118:	e71a      	b.n	8005f50 <__kernel_rem_pio2+0x2a8>
 800611a:	ab0c      	add	r3, sp, #48	@ 0x30
 800611c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006120:	f7fa f9c4 	bl	80004ac <__aeabi_i2d>
 8006124:	4622      	mov	r2, r4
 8006126:	462b      	mov	r3, r5
 8006128:	f7fa fa2a 	bl	8000580 <__aeabi_dmul>
 800612c:	4652      	mov	r2, sl
 800612e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006132:	465b      	mov	r3, fp
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa fa22 	bl	8000580 <__aeabi_dmul>
 800613c:	3e01      	subs	r6, #1
 800613e:	4604      	mov	r4, r0
 8006140:	460d      	mov	r5, r1
 8006142:	e718      	b.n	8005f76 <__kernel_rem_pio2+0x2ce>
 8006144:	9906      	ldr	r1, [sp, #24]
 8006146:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800614a:	9106      	str	r1, [sp, #24]
 800614c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006150:	f7fa fa16 	bl	8000580 <__aeabi_dmul>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4650      	mov	r0, sl
 800615a:	4659      	mov	r1, fp
 800615c:	f7fa f85a 	bl	8000214 <__adddf3>
 8006160:	3601      	adds	r6, #1
 8006162:	4682      	mov	sl, r0
 8006164:	468b      	mov	fp, r1
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	429e      	cmp	r6, r3
 800616a:	dc01      	bgt.n	8006170 <__kernel_rem_pio2+0x4c8>
 800616c:	42b5      	cmp	r5, r6
 800616e:	dae9      	bge.n	8006144 <__kernel_rem_pio2+0x49c>
 8006170:	ab48      	add	r3, sp, #288	@ 0x120
 8006172:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006176:	e9c5 ab00 	strd	sl, fp, [r5]
 800617a:	3c01      	subs	r4, #1
 800617c:	e6ff      	b.n	8005f7e <__kernel_rem_pio2+0x2d6>
 800617e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006180:	2b02      	cmp	r3, #2
 8006182:	dc0b      	bgt.n	800619c <__kernel_rem_pio2+0x4f4>
 8006184:	2b00      	cmp	r3, #0
 8006186:	dc39      	bgt.n	80061fc <__kernel_rem_pio2+0x554>
 8006188:	d05d      	beq.n	8006246 <__kernel_rem_pio2+0x59e>
 800618a:	9b02      	ldr	r3, [sp, #8]
 800618c:	f003 0007 	and.w	r0, r3, #7
 8006190:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006194:	ecbd 8b02 	vpop	{d8}
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d1f3      	bne.n	800618a <__kernel_rem_pio2+0x4e2>
 80061a2:	9b05      	ldr	r3, [sp, #20]
 80061a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80061a8:	eb0d 0403 	add.w	r4, sp, r3
 80061ac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80061b0:	4625      	mov	r5, r4
 80061b2:	46c2      	mov	sl, r8
 80061b4:	f1ba 0f00 	cmp.w	sl, #0
 80061b8:	f1a5 0508 	sub.w	r5, r5, #8
 80061bc:	dc6b      	bgt.n	8006296 <__kernel_rem_pio2+0x5ee>
 80061be:	4645      	mov	r5, r8
 80061c0:	2d01      	cmp	r5, #1
 80061c2:	f1a4 0408 	sub.w	r4, r4, #8
 80061c6:	f300 8087 	bgt.w	80062d8 <__kernel_rem_pio2+0x630>
 80061ca:	9c05      	ldr	r4, [sp, #20]
 80061cc:	ab48      	add	r3, sp, #288	@ 0x120
 80061ce:	441c      	add	r4, r3
 80061d0:	2000      	movs	r0, #0
 80061d2:	2100      	movs	r1, #0
 80061d4:	f1b8 0f01 	cmp.w	r8, #1
 80061d8:	f300 809c 	bgt.w	8006314 <__kernel_rem_pio2+0x66c>
 80061dc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80061e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	f040 80a6 	bne.w	8006338 <__kernel_rem_pio2+0x690>
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	e9c3 7800 	strd	r7, r8, [r3]
 80061f2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80061f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80061fa:	e7c6      	b.n	800618a <__kernel_rem_pio2+0x4e2>
 80061fc:	9d05      	ldr	r5, [sp, #20]
 80061fe:	ab48      	add	r3, sp, #288	@ 0x120
 8006200:	441d      	add	r5, r3
 8006202:	4644      	mov	r4, r8
 8006204:	2000      	movs	r0, #0
 8006206:	2100      	movs	r1, #0
 8006208:	2c00      	cmp	r4, #0
 800620a:	da35      	bge.n	8006278 <__kernel_rem_pio2+0x5d0>
 800620c:	f1b9 0f00 	cmp.w	r9, #0
 8006210:	d038      	beq.n	8006284 <__kernel_rem_pio2+0x5dc>
 8006212:	4602      	mov	r2, r0
 8006214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006218:	9c04      	ldr	r4, [sp, #16]
 800621a:	e9c4 2300 	strd	r2, r3, [r4]
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006226:	f7f9 fff3 	bl	8000210 <__aeabi_dsub>
 800622a:	ad4a      	add	r5, sp, #296	@ 0x128
 800622c:	2401      	movs	r4, #1
 800622e:	45a0      	cmp	r8, r4
 8006230:	da2b      	bge.n	800628a <__kernel_rem_pio2+0x5e2>
 8006232:	f1b9 0f00 	cmp.w	r9, #0
 8006236:	d002      	beq.n	800623e <__kernel_rem_pio2+0x596>
 8006238:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800623c:	4619      	mov	r1, r3
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006244:	e7a1      	b.n	800618a <__kernel_rem_pio2+0x4e2>
 8006246:	9c05      	ldr	r4, [sp, #20]
 8006248:	ab48      	add	r3, sp, #288	@ 0x120
 800624a:	441c      	add	r4, r3
 800624c:	2000      	movs	r0, #0
 800624e:	2100      	movs	r1, #0
 8006250:	f1b8 0f00 	cmp.w	r8, #0
 8006254:	da09      	bge.n	800626a <__kernel_rem_pio2+0x5c2>
 8006256:	f1b9 0f00 	cmp.w	r9, #0
 800625a:	d002      	beq.n	8006262 <__kernel_rem_pio2+0x5ba>
 800625c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006260:	4619      	mov	r1, r3
 8006262:	9b04      	ldr	r3, [sp, #16]
 8006264:	e9c3 0100 	strd	r0, r1, [r3]
 8006268:	e78f      	b.n	800618a <__kernel_rem_pio2+0x4e2>
 800626a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800626e:	f7f9 ffd1 	bl	8000214 <__adddf3>
 8006272:	f108 38ff 	add.w	r8, r8, #4294967295
 8006276:	e7eb      	b.n	8006250 <__kernel_rem_pio2+0x5a8>
 8006278:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800627c:	f7f9 ffca 	bl	8000214 <__adddf3>
 8006280:	3c01      	subs	r4, #1
 8006282:	e7c1      	b.n	8006208 <__kernel_rem_pio2+0x560>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	e7c6      	b.n	8006218 <__kernel_rem_pio2+0x570>
 800628a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800628e:	f7f9 ffc1 	bl	8000214 <__adddf3>
 8006292:	3401      	adds	r4, #1
 8006294:	e7cb      	b.n	800622e <__kernel_rem_pio2+0x586>
 8006296:	ed95 7b00 	vldr	d7, [r5]
 800629a:	ed8d 7b00 	vstr	d7, [sp]
 800629e:	ed95 7b02 	vldr	d7, [r5, #8]
 80062a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062a6:	ec53 2b17 	vmov	r2, r3, d7
 80062aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80062ae:	f7f9 ffb1 	bl	8000214 <__adddf3>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062be:	f7f9 ffa7 	bl	8000210 <__aeabi_dsub>
 80062c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062c6:	f7f9 ffa5 	bl	8000214 <__adddf3>
 80062ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80062d2:	e9c5 6700 	strd	r6, r7, [r5]
 80062d6:	e76d      	b.n	80061b4 <__kernel_rem_pio2+0x50c>
 80062d8:	ed94 7b00 	vldr	d7, [r4]
 80062dc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80062e0:	ec51 0b17 	vmov	r0, r1, d7
 80062e4:	4652      	mov	r2, sl
 80062e6:	465b      	mov	r3, fp
 80062e8:	ed8d 7b00 	vstr	d7, [sp]
 80062ec:	f7f9 ff92 	bl	8000214 <__adddf3>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4606      	mov	r6, r0
 80062f6:	460f      	mov	r7, r1
 80062f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062fc:	f7f9 ff88 	bl	8000210 <__aeabi_dsub>
 8006300:	4652      	mov	r2, sl
 8006302:	465b      	mov	r3, fp
 8006304:	f7f9 ff86 	bl	8000214 <__adddf3>
 8006308:	3d01      	subs	r5, #1
 800630a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800630e:	e9c4 6700 	strd	r6, r7, [r4]
 8006312:	e755      	b.n	80061c0 <__kernel_rem_pio2+0x518>
 8006314:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006318:	f7f9 ff7c 	bl	8000214 <__adddf3>
 800631c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006320:	e758      	b.n	80061d4 <__kernel_rem_pio2+0x52c>
 8006322:	bf00      	nop
 8006324:	f3af 8000 	nop.w
	...
 8006330:	41700000 	.word	0x41700000
 8006334:	3e700000 	.word	0x3e700000
 8006338:	9b04      	ldr	r3, [sp, #16]
 800633a:	9a04      	ldr	r2, [sp, #16]
 800633c:	601f      	str	r7, [r3, #0]
 800633e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006342:	605c      	str	r4, [r3, #4]
 8006344:	609d      	str	r5, [r3, #8]
 8006346:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800634a:	60d3      	str	r3, [r2, #12]
 800634c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006350:	6110      	str	r0, [r2, #16]
 8006352:	6153      	str	r3, [r2, #20]
 8006354:	e719      	b.n	800618a <__kernel_rem_pio2+0x4e2>
 8006356:	bf00      	nop

08006358 <scalbn>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	ec55 4b10 	vmov	r4, r5, d0
 800635e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006362:	4606      	mov	r6, r0
 8006364:	462b      	mov	r3, r5
 8006366:	b991      	cbnz	r1, 800638e <scalbn+0x36>
 8006368:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800636c:	4323      	orrs	r3, r4
 800636e:	d03d      	beq.n	80063ec <scalbn+0x94>
 8006370:	4b35      	ldr	r3, [pc, #212]	@ (8006448 <scalbn+0xf0>)
 8006372:	4620      	mov	r0, r4
 8006374:	4629      	mov	r1, r5
 8006376:	2200      	movs	r2, #0
 8006378:	f7fa f902 	bl	8000580 <__aeabi_dmul>
 800637c:	4b33      	ldr	r3, [pc, #204]	@ (800644c <scalbn+0xf4>)
 800637e:	429e      	cmp	r6, r3
 8006380:	4604      	mov	r4, r0
 8006382:	460d      	mov	r5, r1
 8006384:	da0f      	bge.n	80063a6 <scalbn+0x4e>
 8006386:	a328      	add	r3, pc, #160	@ (adr r3, 8006428 <scalbn+0xd0>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	e01e      	b.n	80063cc <scalbn+0x74>
 800638e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006392:	4291      	cmp	r1, r2
 8006394:	d10b      	bne.n	80063ae <scalbn+0x56>
 8006396:	4622      	mov	r2, r4
 8006398:	4620      	mov	r0, r4
 800639a:	4629      	mov	r1, r5
 800639c:	f7f9 ff3a 	bl	8000214 <__adddf3>
 80063a0:	4604      	mov	r4, r0
 80063a2:	460d      	mov	r5, r1
 80063a4:	e022      	b.n	80063ec <scalbn+0x94>
 80063a6:	460b      	mov	r3, r1
 80063a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80063ac:	3936      	subs	r1, #54	@ 0x36
 80063ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80063b2:	4296      	cmp	r6, r2
 80063b4:	dd0d      	ble.n	80063d2 <scalbn+0x7a>
 80063b6:	2d00      	cmp	r5, #0
 80063b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006430 <scalbn+0xd8>)
 80063ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063be:	da02      	bge.n	80063c6 <scalbn+0x6e>
 80063c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006438 <scalbn+0xe0>)
 80063c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006430 <scalbn+0xd8>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7fa f8d8 	bl	8000580 <__aeabi_dmul>
 80063d0:	e7e6      	b.n	80063a0 <scalbn+0x48>
 80063d2:	1872      	adds	r2, r6, r1
 80063d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80063d8:	428a      	cmp	r2, r1
 80063da:	dcec      	bgt.n	80063b6 <scalbn+0x5e>
 80063dc:	2a00      	cmp	r2, #0
 80063de:	dd08      	ble.n	80063f2 <scalbn+0x9a>
 80063e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80063e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80063e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80063ec:	ec45 4b10 	vmov	d0, r4, r5
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80063f6:	da08      	bge.n	800640a <scalbn+0xb2>
 80063f8:	2d00      	cmp	r5, #0
 80063fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8006428 <scalbn+0xd0>)
 80063fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006400:	dac1      	bge.n	8006386 <scalbn+0x2e>
 8006402:	a10f      	add	r1, pc, #60	@ (adr r1, 8006440 <scalbn+0xe8>)
 8006404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006408:	e7bd      	b.n	8006386 <scalbn+0x2e>
 800640a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800640e:	3236      	adds	r2, #54	@ 0x36
 8006410:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006414:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006418:	4620      	mov	r0, r4
 800641a:	4b0d      	ldr	r3, [pc, #52]	@ (8006450 <scalbn+0xf8>)
 800641c:	4629      	mov	r1, r5
 800641e:	2200      	movs	r2, #0
 8006420:	e7d4      	b.n	80063cc <scalbn+0x74>
 8006422:	bf00      	nop
 8006424:	f3af 8000 	nop.w
 8006428:	c2f8f359 	.word	0xc2f8f359
 800642c:	01a56e1f 	.word	0x01a56e1f
 8006430:	8800759c 	.word	0x8800759c
 8006434:	7e37e43c 	.word	0x7e37e43c
 8006438:	8800759c 	.word	0x8800759c
 800643c:	fe37e43c 	.word	0xfe37e43c
 8006440:	c2f8f359 	.word	0xc2f8f359
 8006444:	81a56e1f 	.word	0x81a56e1f
 8006448:	43500000 	.word	0x43500000
 800644c:	ffff3cb0 	.word	0xffff3cb0
 8006450:	3c900000 	.word	0x3c900000
 8006454:	00000000 	.word	0x00000000

08006458 <floor>:
 8006458:	ec51 0b10 	vmov	r0, r1, d0
 800645c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006464:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006468:	2e13      	cmp	r6, #19
 800646a:	460c      	mov	r4, r1
 800646c:	4605      	mov	r5, r0
 800646e:	4680      	mov	r8, r0
 8006470:	dc34      	bgt.n	80064dc <floor+0x84>
 8006472:	2e00      	cmp	r6, #0
 8006474:	da17      	bge.n	80064a6 <floor+0x4e>
 8006476:	a332      	add	r3, pc, #200	@ (adr r3, 8006540 <floor+0xe8>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f7f9 feca 	bl	8000214 <__adddf3>
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	f7fa fb0c 	bl	8000aa0 <__aeabi_dcmpgt>
 8006488:	b150      	cbz	r0, 80064a0 <floor+0x48>
 800648a:	2c00      	cmp	r4, #0
 800648c:	da55      	bge.n	800653a <floor+0xe2>
 800648e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006492:	432c      	orrs	r4, r5
 8006494:	2500      	movs	r5, #0
 8006496:	42ac      	cmp	r4, r5
 8006498:	4c2b      	ldr	r4, [pc, #172]	@ (8006548 <floor+0xf0>)
 800649a:	bf08      	it	eq
 800649c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80064a0:	4621      	mov	r1, r4
 80064a2:	4628      	mov	r0, r5
 80064a4:	e023      	b.n	80064ee <floor+0x96>
 80064a6:	4f29      	ldr	r7, [pc, #164]	@ (800654c <floor+0xf4>)
 80064a8:	4137      	asrs	r7, r6
 80064aa:	ea01 0307 	and.w	r3, r1, r7
 80064ae:	4303      	orrs	r3, r0
 80064b0:	d01d      	beq.n	80064ee <floor+0x96>
 80064b2:	a323      	add	r3, pc, #140	@ (adr r3, 8006540 <floor+0xe8>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7f9 feac 	bl	8000214 <__adddf3>
 80064bc:	2200      	movs	r2, #0
 80064be:	2300      	movs	r3, #0
 80064c0:	f7fa faee 	bl	8000aa0 <__aeabi_dcmpgt>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d0eb      	beq.n	80064a0 <floor+0x48>
 80064c8:	2c00      	cmp	r4, #0
 80064ca:	bfbe      	ittt	lt
 80064cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80064d0:	4133      	asrlt	r3, r6
 80064d2:	18e4      	addlt	r4, r4, r3
 80064d4:	ea24 0407 	bic.w	r4, r4, r7
 80064d8:	2500      	movs	r5, #0
 80064da:	e7e1      	b.n	80064a0 <floor+0x48>
 80064dc:	2e33      	cmp	r6, #51	@ 0x33
 80064de:	dd0a      	ble.n	80064f6 <floor+0x9e>
 80064e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80064e4:	d103      	bne.n	80064ee <floor+0x96>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	f7f9 fe93 	bl	8000214 <__adddf3>
 80064ee:	ec41 0b10 	vmov	d0, r0, r1
 80064f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80064fa:	f04f 37ff 	mov.w	r7, #4294967295
 80064fe:	40df      	lsrs	r7, r3
 8006500:	4207      	tst	r7, r0
 8006502:	d0f4      	beq.n	80064ee <floor+0x96>
 8006504:	a30e      	add	r3, pc, #56	@ (adr r3, 8006540 <floor+0xe8>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f7f9 fe83 	bl	8000214 <__adddf3>
 800650e:	2200      	movs	r2, #0
 8006510:	2300      	movs	r3, #0
 8006512:	f7fa fac5 	bl	8000aa0 <__aeabi_dcmpgt>
 8006516:	2800      	cmp	r0, #0
 8006518:	d0c2      	beq.n	80064a0 <floor+0x48>
 800651a:	2c00      	cmp	r4, #0
 800651c:	da0a      	bge.n	8006534 <floor+0xdc>
 800651e:	2e14      	cmp	r6, #20
 8006520:	d101      	bne.n	8006526 <floor+0xce>
 8006522:	3401      	adds	r4, #1
 8006524:	e006      	b.n	8006534 <floor+0xdc>
 8006526:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800652a:	2301      	movs	r3, #1
 800652c:	40b3      	lsls	r3, r6
 800652e:	441d      	add	r5, r3
 8006530:	4545      	cmp	r5, r8
 8006532:	d3f6      	bcc.n	8006522 <floor+0xca>
 8006534:	ea25 0507 	bic.w	r5, r5, r7
 8006538:	e7b2      	b.n	80064a0 <floor+0x48>
 800653a:	2500      	movs	r5, #0
 800653c:	462c      	mov	r4, r5
 800653e:	e7af      	b.n	80064a0 <floor+0x48>
 8006540:	8800759c 	.word	0x8800759c
 8006544:	7e37e43c 	.word	0x7e37e43c
 8006548:	bff00000 	.word	0xbff00000
 800654c:	000fffff 	.word	0x000fffff

08006550 <_init>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr

0800655c <_fini>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr
